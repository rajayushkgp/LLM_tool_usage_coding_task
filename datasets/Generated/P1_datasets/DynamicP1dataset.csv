Query,Output,Docstring
" For user ""Tina"", list her tasks, filter work items related to these tasks by issue priority ""p2"", prioritize the filtered items, and summarize them for the monthly performance review.","var_1 = list_user_tasks(user_id=""Tina"")
var_2 = works_list(type=[""issue""], issue.priority=[""p2""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
","

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""
"
"Find the current sprint ID, list all tasks assigned to user ""DevLead"" whether completed or not, summarize these tasks, and add them to the current sprint.","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""DevLead"")
var_3 = list_user_tasks(user_id=var_2)
var_4 = summarize_objects(objects=var_3)
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Search for the user ID of ""ManagerMike,"" list all tasks assigned to this user and prioritize them, including the completed ones.","var_1 = search_object_by_name(query=""ManagerMike"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Use the ID of the current user, list all tasks assigned to them, prioritize the tasks, and summarize them for a weekly review.","var_1 = who_am_i()
var_2 = list_user_tasks(user_id=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the ID of the current sprint, list all tasks assigned to user ""QAEngineer"" including completed tasks, summarize, and add them to the current sprint.","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""QAEngineer"")
var_3 = list_user_tasks(user_id=var_2, completed=True)
var_4 = summarize_objects(objects=var_3)
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Search for the user ID of ""FrontEndDev,"" list all completed tasks assigned to this user, prioritize them, and summarize for performance evaluation.","var_1 = search_object_by_name(query=""FrontEndDev"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Identify the user ID of ""BackEndDev,"" list their tasks, summarize the completed ones, and prioritize the list for sprint planning.","var_1 = search_object_by_name(query=""BackEndDev"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Find the current user's ID, list all their tasks, prioritize, and summarize the completed tasks for daily stand-up preparation.","var_1 = who_am_i()
var_2 = list_user_tasks(user_id=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Search for the user ID of ""ProductOwner,"" list all tasks assigned to this user, summarize the tasks, and prioritize for sprint retrospective.","var_1 = search_object_by_name(query=""ProductOwner"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
","

def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Retrieve the user ID of ""DataAnalyst,"" list all tasks assigned to them, prioritize, and summarize the completed tasks for a progress report.","var_1 = search_object_by_name(query=""DataAnalyst"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
","

def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""


def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""


def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Locate the user ID of ""ClientSupport,"" list all tasks assigned to them, summarize, and prioritize for end-of-day report.","var_1 = search_object_by_name(query=""ClientSupport"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Search for the user ID of ""SysAdmin,"" list all tasks assigned to this user, prioritize both completed and completed tasks, and summarize for system audit preparation.","var_1 = search_object_by_name(query=""SysAdmin"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Get the user ID of ""DevOpsLead,"" list all tasks assigned to them, summarize the tasks, and prioritize for deployment planning.","var_1 = search_object_by_name(query=""DevOpsLead"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
","

def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""


def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Search for the user ID of ""NetworkEngineer,"" list all tasks assigned to this user, summarize the completed tasks, and prioritize for network optimization planning.","var_1 = search_object_by_name(query=""NetworkEngineer"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Locate the user ID of ""TechSupportLead,"" list all tasks assigned to them, prioritize, and summarize for customer support enhancement.","var_1 = search_object_by_name(query=""TechSupportLead"")
var_2 = list_user_tasks(user_id=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
","

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Identify the user ID of ""DatabaseAdmin,"" list all tasks assigned to them, prioritize, and summarize the completed tasks for database maintenance scheduling.","var_1 = search_object_by_name(query=""DatabaseAdmin"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
","def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Get the sprint ID, list all tasks for user ""CloudSpecialist,"" prioritize the tasks, summarize, and add the completed ones to the current sprint for cloud migration project tracking.","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""CloudSpecialist"")
var_3 = list_user_tasks(user_id=var_2, completed=True)
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)
var_6 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
","

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


 
 def list_user_tasks(user_id, completed=False):
 """"""
 Lists all tasks assigned to a user, optionally filtering for completed tasks
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be listed
  completed (bool): If True, only completed tasks are returned
 
 Returns:
  list: A list of tasks assigned to the user
 """"""
 

def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Find all work items owned by a user with ID ""USR123"", update their status to ""active"", and summarize the items.","var_1 = works_list(owned_by=[""USR123""])
var_2 = update_user_status(user_id=""USR123"", status=""active"")
var_3 = summarize_objects(objects=var_1)
","

def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""


def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""

 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Prioritize work items created by a user with ID ""USR456"", change the user's status to ""on leave"", and add the prioritized items to the current sprint.","var_1 = works_list(created_by=[""USR456""])
var_2 = prioritize_objects(objects=var_1)
var_3 = update_user_status(user_id=""USR456"", status=""on leave"")
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
","
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve work items with a severity of ""blocker"", update the status of the user with ID ""USR789"" to ""busy"", and summarize the items.","var_1 = works_list(ticket.severity=[""blocker""])
var_2 = update_user_status(user_id=""USR789"", status=""busy"")
var_3 = summarize_objects(objects=var_1)
","
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""
"
"Search for work items related to the part name ""WidgetA"", update the status of the user with ID ""USR101"" to ""available"", and prioritize the items.","var_1 = search_object_by_name(query=""WidgetA"")
var_2 = works_list(applies_to_part=[var_1])
var_3 = update_user_status(user_id=""USR101"", status=""available"")
var_4 = prioritize_objects(objects=var_2)
","
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Get similar work items to ""TASK-321"", update the status of the user with ID ""USR202"" to ""offline"", and add the similar items to the current sprint.","var_1 = get_similar_work_items(work_id=""TASK-321"")
var_2 = update_user_status(user_id=""USR202"", status=""offline"")
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
","
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Summarize all tickets that need a response from the ""Support"" channel, update the status of the user with ID ""USR303"" to ""active"", and prioritize the tickets.","var_1 = works_list(ticket.needs_response=True, ticket.source_channel=[""Support""])
var_2 = update_user_status(user_id=""USR303"", status=""active"")
var_3 = prioritize_objects(objects=var_1)
","
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve work items of type ""issue"" with priority ""p2"", update the status of the user with ID ""USR404"" to ""in a meeting"", and add the items to the current sprint.","var_1 = works_list(type=[""issue""], issue.priority=[""p2""])
var_2 = update_user_status(user_id=""USR404"", status=""in a meeting"")
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
","
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""


def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Locate all tasks created by ""TeamLead"", update their status to ""completed"", and summarize the tasks for a progress report.","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = update_user_status(user_id=var_1, status=""completed"")
var_4 = summarize_objects(objects=var_2)
","
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Find all tickets from the source channel ""EMAIL"" with severity ""high"", update the status of the user with ID ""USR505"" to ""on break"", and prioritize the tickets.","var_1 = works_list(ticket.source_channel=[""EMAIL""], ticket.severity=[""high""])
var_2 = update_user_status(user_id=""USR505"", status=""on break"")
var_3 = prioritize_objects(objects=var_1)
","
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Retrieve work items that apply to part ""XJZ-300"", update the status of the user with ID ""USR606"" to ""active"", and summarize the items for inventory review.","var_1 = works_list(applies_to_part=[""XJZ-300""])
var_2 = update_user_status(user_id=""USR606"", status=""active"")
var_3 = summarize_objects(objects=var_1)
","
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""


def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Prioritize all issues from the ""Development"" stage with priority ""p3"", update the status of the user with ID ""USR707"" to ""away"", and add the prioritized issues to the current sprint.","var_1 = works_list(stage.name=[""Development""], type=[""issue""], issue.priority=[""p3""])
var_2 = update_user_status(user_id=""USR707"", status=""away"")
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
","
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Summarize all tasks owned by user ""EngineerEllie"", update her status to ""working remotely"", and add the tasks to the current sprint.","var_1 = search_object_by_name(query=""EngineerEllie"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = update_user_status(user_id=var_1, status=""working remotely"")
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
","

def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""

 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""


def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Locate work items created by ""DesignerDan"", update his status to ""on vacation"", and summarize the items for a design review meeting.","var_1 = search_object_by_name(query=""DesignerDan"")
var_2 = works_list(created_by=[var_1])
var_3 = update_user_status(user_id=var_1, status=""on vacation"")
var_4 = summarize_objects(objects=var_2)
","

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""

 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""


def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Find all tasks related to part ""GFX-450"", update the status of the user with ID ""USR808"" to ""busy"", and prioritize the tasks for the production team.","var_1 = search_object_by_name(query=""GFX-450"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = update_user_status(user_id=""USR808"", status=""busy"")
var_4 = prioritize_objects(objects=var_2)
","

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""

 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 
def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Get similar work items to ""TICKET-987"", update the status of the user with ID ""USR909"" to ""available"", and add the similar items to the current sprint for resolution.","var_1 = get_similar_work_items(work_id=""TICKET-987"")
var_2 = update_user_status(user_id=""USR909"", status=""available"")
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
","

def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""

 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
"""""""
" Retrieve work items with issue priority ""p1"" from the ""Customer Service"" stage, update the status of the user with ID ""USR010"" to ""engaged"", and summarize the items for a service quality report.","var_1 = works_list(stage.name=[""Customer Service""], type=[""issue""], issue.priority=[""p1""])
var_2 = update_user_status(user_id=""USR010"", status=""engaged"")
var_3 = summarize_objects(objects=var_1)
","
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Prioritize all tickets from source channel ""APP"" that need a response, update the status of the user with ID ""USR111"" to ""active"", and add the prioritized tickets to the current sprint.","var_1 = works_list(ticket.source_channel=[""APP""], ticket.needs_response=True)
var_2 = update_user_status(user_id=""USR111"", status=""active"")
var_3 = prioritize_objects(objects=var_1)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
","

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""

 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""


def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Summarize all issues owned by ""AdminAndy"", update his status to ""in training"", and prioritize the issues for administrative follow-up.","var_1 = search_object_by_name(query=""AdminAndy"")
var_2 = works_list(owned_by=[var_1], type=[""issue""])
var_3 = update_user_status(user_id=var_1, status=""in training"")
var_4 = prioritize_objects(objects=var_2)
","
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Locate work items of type ""ticket"" with severity ""medium"", update the status of the user with ID ""USR212"" to ""active"", and summarize the items for customer follow-up.","var_1 = works_list(type=[""ticket""], ticket.severity=[""medium""])
var_2 = update_user_status(user_id=""USR212"", status=""active"")
var_3 = summarize_objects(objects=var_1)
","

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""

 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Find all tasks created by ""CoordinatorCathy"", update her status to ""present"", and prioritize the tasks for the upcoming team meeting.","var_1 = search_object_by_name(query=""CoordinatorCathy"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = update_user_status(user_id=var_1, status=""present"")
var_4 = prioritize_objects(objects=var_2)
","
 
 def update_user_status(user_id, status):
 """"""
 Updates the status of a user account in the system
 
 Parameters:
  user_id (str): The ID of the user whose status is to be updated
  status (str): The new status to apply to the user account
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Filter work items by date range from ""2023-01-01"" to ""2023-01-31"", retrieve those created by user ""UserA"", and summarize them.","var_1 = filter_work_by_date_range(start_date=""2023-01-01"", end_date=""2023-01-31"", type=None)
var_2 = works_list(created_by=[""UserA""])
var_3 = summarize_objects(objects=var_2)
","

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""


def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""
def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""


def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Within the date range ""2023-02-01"" to ""2023-02-28"", find all tasks related to part ""PartB"", prioritize them, and add them to the current sprint.","var_1 = filter_work_by_date_range(start_date=""2023-02-01"", end_date=""2023-02-28"", type=[""task""])
var_2 = works_list(applies_to_part=[""PartB""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
","

def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""

def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Summarize and prioritize all issues with priority P2 from the ""Development"" stage that fall between ""2023-03-01"" and ""2023-03-15"".","var_1 = filter_work_by_date_range(start_date=""2023-03-01"", end_date=""2023-03-15"", type=[""issue""])
var_2 = works_list(stage.name=[""Development""], issue.priority=[""p2""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
","

def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""

def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""


def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Locate all tickets from source channel ""EMAIL"" that need a response, filter them by the date range ""2023-04-01"" to ""2023-04-30"", and summarize them.","var_1 = filter_work_by_date_range(start_date=""2023-04-01"", end_date=""2023-04-30"", type=[""ticket""])
var_2 = works_list(ticket.source_channel=[""EMAIL""], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
","

def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""

def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Filter work items from ""2023-05-01"" to ""2023-05-20"", prioritize all tasks owned by user ""UserC"", and add them to the current sprint.","var_1 = filter_work_by_date_range(start_date=""2023-05-01"", end_date=""2023-05-20"", type=[""task""])
var_2 = works_list(owned_by=[""UserC""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
","

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""

def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve similar work items to ""TASK-456"" that were created between ""2023-06-10"" and ""2023-06-24"", and summarize them for a report.","var_1 = get_similar_work_items(work_id=""TASK-456"")
var_2 = filter_work_by_date_range(start_date=""2023-06-10"", end_date=""2023-06-24"", type=None)
var_3 = summarize_objects(objects=var_1)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""

def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"From ""2023-07-01"" to ""2023-07-31"", filter and summarize work items created by ""TeamLeadD"", then prioritize them.","var_1 = filter_work_by_date_range(start_date=""2023-07-01"", end_date=""2023-07-31"", type=None)
var_2 = works_list(created_by=[""TeamLeadD""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
","

def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""
def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""

def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Find and prioritize all tasks related to part ""PartE"" within the date range ""2023-08-01"" to ""2023-08-15"", and add them to the current sprint.","var_1 = filter_work_by_date_range(start_date=""2023-08-01"", end_date=""2023-08-15"", type=[""task""])
var_2 = works_list(applies_to_part=[""PartE""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""

def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Summarize and prioritize all issues with priority P3 from the ""Support"" stage between ""2023-09-01"" and ""2023-09-30"".","var_1 = filter_work_by_date_range(start_date=""2023-09-01"", end_date=""2023-09-30"", type=[""issue""])
var_2 = works_list(stage.name=[""Support""], issue.priority=[""p3""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""

def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Filter work items by date range ""2023-10-01"" to ""2023-10-31"", locate all tickets from source channel ""CHAT"" that need a response, and summarize them.","var_1 = filter_work_by_date_range(start_date=""2023-10-01"", end_date=""2023-10-31"", type=[""ticket""])
var_2 = works_list(ticket.source_channel=[""CHAT""], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""
def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Prioritize all tasks owned by user ""UserF"" that fall within the date range ""2023-11-01"" to ""2023-11-15"", and add them to the current sprint.","var_1 = filter_work_by_date_range(start_date=""2023-11-01"", end_date=""2023-11-15"", type=[""task""])
var_2 = works_list(owned_by=[""UserF""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
","

def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""
def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Retrieve similar work items to ""ISSUE-789"" from ""2023-12-01"" to ""2023-12-31"", and provide a summarized report.","var_1 = get_similar_work_items(work_id=""ISSUE-789"")
var_2 = filter_work_by_date_range(start_date=""2023-12-01"", end_date=""2023-12-31"", type=None)
var_3 = summarize_objects(objects=var_1)
","

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""


def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""

def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""


def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Filter work items by date range ""2023-01-15"" to ""2023-01-22"", retrieve those created by user ""UserG"", prioritize them, and add them to the current sprint.","var_1 = filter_work_by_date_range(start_date=""2023-01-15"", end_date=""2023-01-22"", type=None)
var_2 = works_list(created_by=[""UserG""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""
def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Summarize and prioritize all issues with priority P0 from the ""Testing"" stage that fall between ""2023-03-15"" and ""2023-03-31"".","var_1 = filter_work_by_date_range(start_date=""2023-03-15"", end_date=""2023-03-31"", type=[""issue""])
var_2 = works_list(stage.name=[""Testing""], issue.priority=[""p0""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""

def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Locate all tickets from source channel ""MOBILE"" that need a response, filter them by the date range ""2023-04-01"" to ""2023-04-15"", and prioritize them.","var_1 = filter_work_by_date_range(start_date=""2023-04-01"", end_date=""2023-04-15"", type=[""ticket""])
var_2 = works_list(ticket.source_channel=[""MOBILE""], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""

def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Filter work items from ""2023-05-10"" to ""2023-05-25"", summarize all tasks owned by user ""UserI"", and add them to the current sprint.","var_1 = filter_work_by_date_range(start_date=""2023-05-10"", end_date=""2023-05-25"", type=[""task""])
var_2 = works_list(owned_by=[""UserI""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
","

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""

def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Retrieve similar work items to ""TASK-101"" that were created between ""2023-06-15"" and ""2023-06-30"", summarize them, and prioritize them.","var_1 = get_similar_work_items(work_id=""TASK-101"")
var_2 = filter_work_by_date_range(start_date=""2023-06-15"", end_date=""2023-06-30"", type=None)
var_3 = summarize_objects(objects=var_1)
var_4 = prioritize_objects(objects=var_1)
","

def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""

def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""


def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""


def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" From ""2023-07-15"" to ""2023-07-29"", filter and prioritize work items created by ""TeamLeadJ"", then summarize them.","var_1 = filter_work_by_date_range(start_date=""2023-07-15"", end_date=""2023-07-29"", type=None)
var_2 = works_list(created_by=[""TeamLeadJ""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_2)
","

def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""
def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""
"
" Find and summarize all tasks related to part ""PartK"" within the date range ""2023-08-05"" to ""2023-08-20"", and add them to the current sprint.","var_1 = filter_work_by_date_range(start_date=""2023-08-05"", end_date=""2023-08-20"", type=[""task""])
var_2 = works_list(applies_to_part=[""PartK""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
","

def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""
def filter_work_by_date_range(start_date, end_date, type=None):
 """"""
 Filters work items based on a given date range.
 
 Parameters:
  start_date (str): The start date of the desired date range
  end_date (str): The end date of the desired date range
  type (list): Optional filter for type of work
 
 Returns:
  list: Work items within the specified date range
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Search for the sprint ID, add prioritized tasks related to part ""ENG-101"" to the sprint, and delete the original tasks using their IDs.","var_1 = get_sprint_id()
var_2 = works_list(type=[""task""], applies_to_part=[""ENG-101""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
var_5 = delete_objects_by_id(object_ids=var_2)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


 
 def delete_objects_by_id(object_ids):
 """"""
 Deletes objects from the system based on their IDs
 
 Parameters:
  object_ids (list): List of object IDs to delete
 
 Returns:
  bool: True if objects were successfully deleted, False otherwise
 """"""
 

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Search for work items owned by ""TeamLeadTom"", prioritize them, add them to the current sprint, and delete the original work items using their IDs.","var_1 = search_object_by_name(query=""TeamLeadTom"")
var_2 = works_list(owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = delete_objects_by_id(object_ids=var_2)
","def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


 
 def delete_objects_by_id(object_ids):
 """"""
 Deletes objects from the system based on their IDs
 
 Parameters:
  object_ids (list): List of object IDs to delete
 
 Returns:
  bool: True if objects were successfully deleted, False otherwise
 """"""
 

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""


def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Create actionable tasks from the text of a recent meeting, prioritize these tasks, and then delete the original text entries using their IDs.","var_1 = create_actionable_tasks_from_text(text=""Recent meeting text"")
var_2 = prioritize_objects(objects=var_1)
var_3 = delete_objects_by_id(object_ids=var_1)
","

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""


def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""

 
 def delete_objects_by_id(object_ids):
 """"""
 Deletes objects from the system based on their IDs
 
 Parameters:
  object_ids (list): List of object IDs to delete
 
 Returns:
  bool: True if objects were successfully deleted, False otherwise
 """"""
 

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Find all work items created by ""DesignerDana"", add them to the current sprint after prioritizing, and delete the original work items using their IDs.","var_1 = search_object_by_name(query=""DesignerDana"")
var_2 = works_list(created_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = delete_objects_by_id(object_ids=var_2)
","

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


 
 def delete_objects_by_id(object_ids):
 """"""
 Deletes objects from the system based on their IDs
 
 Parameters:
  object_ids (list): List of object IDs to delete
 
 Returns:
  bool: True if objects were successfully deleted, False otherwise
 """"""
 

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""


def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Locate all work items owned by ""ProductPat"", add them to the current sprint after summarizing and prioritizing, and delete the original work items using their IDs.","var_1 = search_object_by_name(query=""ProductPat"")
var_2 = works_list(owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
var_7 = delete_objects_by_id(object_ids=var_2)
","

def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


 
 def delete_objects_by_id(object_ids):
 """"""
 Deletes objects from the system based on their IDs
 
 Parameters:
  object_ids (list): List of object IDs to delete
 
 Returns:
  bool: True if objects were successfully deleted, False otherwise
 """"""
 

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Get the list of skills for user ""USR456"", find all tasks related to those skills, prioritize the tasks, and add them to the current sprint.","var_1 = list_user_skills(user_id=""USR456"")
var_2 = works_list(type=[""task""], type=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
","
 
 def retrieve_user_permissions(user_id):
 """"""
 Retrieves the list of permissions for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose permissions are to be retrieved
 
 Returns:
  list: The list of permissions for the user
 """"""
 ', '
 
 def list_user_skills(user_id):
 """"""
 Lists the skills associated with the specified user
 
 Parameters:
  user_id (str): The ID of the user whose skills are being queried
 
 Returns:
  list: The skills of the user
 """"""
 


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check the permissions for user ""USR202"", then find all issues created by them with priority P2 and summarize the issues.","var_1 = retrieve_user_permissions(user_id=""USR202"")
var_2 = works_list(created_by=[""USR202""], issue.priority=[""p2""])
var_3 = summarize_objects(objects=var_2)
","
 
 def retrieve_user_permissions(user_id):
 """"""
 Retrieves the list of permissions for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose permissions are to be retrieved
 
 Returns:
  list: The list of permissions for the user
 """"""
 ', '
 
 def list_user_skills(user_id):
 """"""
 Lists the skills associated with the specified user
 
 Parameters:
  user_id (str): The ID of the user whose skills are being queried
 
 Returns:
  list: The skills of the user
 """"""
 

def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"List the skills for user ""USR303"", search for similar work items related to a task they completed, prioritize, and summarize those items.","var_1 = list_user_skills(user_id=""USR303"")
var_2 = get_similar_work_items(work_id=""USR303"")
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
","
 
 def retrieve_user_permissions(user_id):
 """"""
 Retrieves the list of permissions for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose permissions are to be retrieved
 
 Returns:
  list: The list of permissions for the user
 """"""
 ', '
 
 def list_user_skills(user_id):
 """"""
 Lists the skills associated with the specified user
 
 Parameters:
  user_id (str): The ID of the user whose skills are being queried
 
 Returns:
  list: The skills of the user
 """"""
 


def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Get the skills for user ""USR121"", find all tasks with those skills as a requirement, prioritize them, and add them to the current sprint.","var_1 = list_user_skills(user_id=""USR121"")
var_2 = works_list(type=[""task""], type=var_1)
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
","
 
 def retrieve_user_permissions(user_id):
 """"""
 Retrieves the list of permissions for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose permissions are to be retrieved
 
 Returns:
  list: The list of permissions for the user
 """"""
 ', '
 
 def list_user_skills(user_id):
 """"""
 Lists the skills associated with the specified user
 
 Parameters:
  user_id (str): The ID of the user whose skills are being queried
 
 Returns:
  list: The skills of the user
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" For user ""USR141"", list their skills, find all work items related to a part they are working on, prioritize, and summarize the work items.","var_1 = list_user_skills(user_id=""USR141"")
var_2 = search_object_by_name(query=""USR141"")  
var_3 = works_list(applies_to_part=[var_2], type=var_1)
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)
","
 
 def retrieve_user_permissions(user_id):
 """"""
 Retrieves the list of permissions for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose permissions are to be retrieved
 
 Returns:
  list: The list of permissions for the user
 """"""
 ', '
 
 def list_user_skills(user_id):
 """"""
 Lists the skills associated with the specified user
 
 Parameters:
  user_id (str): The ID of the user whose skills are being queried
 
 Returns:
  list: The skills of the user
 """"""
 


def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Take the comments from ticket ""TICKET-012"", summarize the work items owned by the users mentioned in the comments, and calculate the remaining budget for budget ID ""BUD-1012"".","var_1 = get_ticket_comments(ticket_id=""TICKET-012"")
var_2 = search_object_by_name(query=var_1[0])
var_3 = works_list(owned_by=[var_2])
var_4 = summarize_objects(objects=var_3)
var_5 = calculate_budget_remaining(budget_id=""BUD-1012"")
","
 
 def get_ticket_comments(ticket_id):
 """"""
 Retrieves the comments attached to a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose comments are being retrieved
 
 Returns:
  list: Comments associated with the ticket
 """"""
 ', '
 
 def calculate_budget_remaining(budget_id):
 """"""
 Calculates the remaining budget for a given budget ID
 
 Parameters:
  budget_id (str): The ID of the budget to calculate
 
 Returns:
  float: The amount of remaining budget
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Prioritize all issues with priority ""p2"" and get comments for ticket ID ""TICK-707"", add them to the current sprint, and determine the remaining budget for budget ID ""BUD-789"".","var_1 = works_list(issue.priority=[""p2""], type=[""issue""])
var_2 = get_ticket_comments(ticket_id=""TICK-707"")
var_3 = prioritize_objects(objects=var_1)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = calculate_budget_remaining(budget_id=""BUD-789"")
","
 
 def get_ticket_comments(ticket_id):
 """"""
 Retrieves the comments attached to a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose comments are being retrieved
 
 Returns:
  list: Comments associated with the ticket
 """"""
 ', '
 
 def calculate_budget_remaining(budget_id):
 """"""
 Calculates the remaining budget for a given budget ID
 
 Parameters:
  budget_id (str): The ID of the budget to calculate
 
 Returns:
  float: The amount of remaining budget
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Archive tickets older than ""2022-01-01"", generate a summary report from the archived data, and retrieve work items created by user ""DevLead"" to summarize them.","var_1 = archive_old_tickets(older_than_date=""2022-01-01"")
var_2 = generate_report_from_data(dataset_id=var_1, report_type=""summary"")
var_3 = search_object_by_name(query=""DevLead"")
var_4 = works_list(created_by=[var_3], type=[""ticket"", ""issue"", ""task""])
var_5 = summarize_objects(objects=var_4)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


 
 def archive_old_tickets(older_than_date, active_status=False):
 """"""
 Archives tickets that are older than the specified date and optionally filters by active status
 
 Parameters:
  older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
  active_status (bool): If True, only archives tickets that are currently active; defaults to False
 
 Returns:
  str: The ID of the tickets
 """"""
 ', '
 
 def generate_report_from_data(dataset_id, report_type=""summary""):
 """"""
 Generates a specific type of report from a dataset
 
 Parameters:
  dataset_id (str): The ID of the dataset from which to generate the report
  report_type (str): The type of report to generate, default is 'summary'
 
 Returns:
  str: The ID of the generated report
 """"""
 

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Prioritize all tasks owned by user ""TeamLeadTom"", add them to the current sprint, archive tickets older than ""2022-03-01"", and generate a report from the archived tickets.","var_1 = search_object_by_name(query=""TeamLeadTom"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = archive_old_tickets(older_than_date=""2022-03-01"")
var_7 = generate_report_from_data(dataset_id=var_6, report_type=""summary"")
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


 
 def archive_old_tickets(older_than_date, active_status=False):
 """"""
 Archives tickets that are older than the specified date and optionally filters by active status
 
 Parameters:
  older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
  active_status (bool): If True, only archives tickets that are currently active; defaults to False
 
 Returns:
  str: The ID of the tickets
 """"""
 ', '
 
 def generate_report_from_data(dataset_id, report_type=""summary""):
 """"""
 Generates a specific type of report from a dataset
 
 Parameters:
  dataset_id (str): The ID of the dataset from which to generate the report
  report_type (str): The type of report to generate, default is 'summary'
 
 Returns:
  str: The ID of the generated report
 """"""
 

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Archive all active tickets older than ""2022-07-01"", generate a report from these tickets, and then summarize and prioritize all tickets from the ""Support"" stage.","var_1 = archive_old_tickets(older_than_date=""2022-07-01"", active_status=True)
var_2 = generate_report_from_data(dataset_id=var_1, report_type=""summary"")
var_3 = works_list(stage.name=[""Support""], type=[""ticket""])
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


 
 def archive_old_tickets(older_than_date, active_status=False):
 """"""
 Archives tickets that are older than the specified date and optionally filters by active status
 
 Parameters:
  older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
  active_status (bool): If True, only archives tickets that are currently active; defaults to False
 
 Returns:
  str: The ID of the tickets
 """"""
 ', '
 
 def generate_report_from_data(dataset_id, report_type=""summary""):
 """"""
 Generates a specific type of report from a dataset
 
 Parameters:
  dataset_id (str): The ID of the dataset from which to generate the report
  report_type (str): The type of report to generate, default is 'summary'
 
 Returns:
  str: The ID of the generated report
 """"""
 

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Summarize all issues created by user ""CoderCarl"", prioritize them, archive tickets older than ""2022-08-01"", and generate a summary report from the data.","var_1 = search_object_by_name(query=""CoderCarl"")
var_2 = works_list(created_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = archive_old_tickets(older_than_date=""2022-08-01"")
var_6 = generate_report_from_data(dataset_id=var_5, report_type=""summary"")
","

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


 
 def archive_old_tickets(older_than_date, active_status=False):
 """"""
 Archives tickets that are older than the specified date and optionally filters by active status
 
 Parameters:
  older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
  active_status (bool): If True, only archives tickets that are currently active; defaults to False
 
 Returns:
  str: The ID of the tickets
 """"""
 ', '
 
 def generate_report_from_data(dataset_id, report_type=""summary""):
 """"""
 Generates a specific type of report from a dataset
 
 Parameters:
  dataset_id (str): The ID of the dataset from which to generate the report
  report_type (str): The type of report to generate, default is 'summary'
 
 Returns:
  str: The ID of the generated report
 """"""
 

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Retrieve similar work items to ""ISSUE-789"", summarize them for a report, archive tickets older than ""2022-12-01"", and generate a detailed report from the archived tickets.","var_1 = get_similar_work_items(work_id=""ISSUE-789"")
var_2 = summarize_objects(objects=var_1)
var_3 = archive_old_tickets(older_than_date=""2022-12-01"")
var_4 = generate_report_from_data(dataset_id=var_3, report_type=""detailed"")
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


 
 def archive_old_tickets(older_than_date, active_status=False):
 """"""
 Archives tickets that are older than the specified date and optionally filters by active status
 
 Parameters:
  older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
  active_status (bool): If True, only archives tickets that are currently active; defaults to False
 
 Returns:
  str: The ID of the tickets
 """"""
 ', '
 
 def generate_report_from_data(dataset_id, report_type=""summary""):
 """"""
 Generates a specific type of report from a dataset
 
 Parameters:
  dataset_id (str): The ID of the dataset from which to generate the report
  report_type (str): The type of report to generate, default is 'summary'
 
 Returns:
  str: The ID of the generated report
 """"""
 

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Archive all active tickets older than ""2023-02-01"", generate a report from these tickets, and then summarize and prioritize all work items owned by ""AdminAndy"".","var_1 = archive_old_tickets(older_than_date=""2023-02-01"", active_status=True)
var_2 = generate_report_from_data(dataset_id=""var_1"", report_type=""summary"")
var_3 = search_object_by_name(query=""AdminAndy"")
var_4 = works_list(owned_by=[var_3], type=[""ticket"", ""issue"", ""task""])
var_5 = summarize_objects(objects=var_4)
var_6 = prioritize_objects(objects=var_4)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


 
 def archive_old_tickets(older_than_date, active_status=False):
 """"""
 Archives tickets that are older than the specified date and optionally filters by active status
 
 Parameters:
  older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
  active_status (bool): If True, only archives tickets that are currently active; defaults to False
 
 Returns:
  str: The ID of the tickets
 """"""
 ', '
 
 def generate_report_from_data(dataset_id, report_type=""summary""):
 """"""
 Generates a specific type of report from a dataset
 
 Parameters:
  dataset_id (str): The ID of the dataset from which to generate the report
  report_type (str): The type of report to generate, default is 'summary'
 
 Returns:
  str: The ID of the generated report
 """"""
 

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Find all tasks associated with part ""UX-101"", remove users ""AJones"" and ""MBrown"" from group ""UX-Team"", mark ticket ""TICK234"" as resolved, and then prioritize the tasks.","var_1 = works_list(applies_to_part=[""UX-101""], type=[""task""])
var_2 = remove_users_from_group(user_ids=[""AJones"", ""MBrown""], group_id=""UX-Team"")
var_3 = mark_ticket_as_resolved(ticket_id=""TICK234"")
var_4 = prioritize_objects(objects=var_1)
","
 
 def remove_users_from_group(user_ids, group_id):
 """"""
 Removes the specified users from a group
 
 Parameters:
  user_ids (list): A list of user IDs to be removed from the group
  group_id (str): The ID of the group from which the users should be removed
 
 Returns:
  bool: Status of the removal
 """"""
 ', '
 
 def mark_ticket_as_resolved(ticket_id):
 """"""
 Marks a ticket as resolved in the system
 
 Parameters:
  ticket_id (str): The ID of the ticket to be marked as resolved
 
 Returns:
  bool: True if the ticket was marked as resolved, False otherwise
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Summarize and prioritize all tickets with severity ""high"" from the ""CustomerSupport"" stage, remove user ""CTech"" from group ""SupportStaff"", and mark ticket ""TICK345"" as resolved.","var_1 = works_list(stage.name=[""CustomerSupport""], ticket.severity=[""high""], type=[""ticket""])
var_2 = remove_users_from_group(user_ids=[""CTech""], group_id=""SupportStaff"")
var_3 = mark_ticket_as_resolved(ticket_id=""TICK345"")
var_4 = summarize_objects(objects=var_1)
var_5 = prioritize_objects(objects=var_1)
","
 
 def remove_users_from_group(user_ids, group_id):
 """"""
 Removes the specified users from a group
 
 Parameters:
  user_ids (list): A list of user IDs to be removed from the group
  group_id (str): The ID of the group from which the users should be removed
 
 Returns:
  bool: Status of the removal
 """"""
 ', '
 
 def mark_ticket_as_resolved(ticket_id):
 """"""
 Marks a ticket as resolved in the system
 
 Parameters:
  ticket_id (str): The ID of the ticket to be marked as resolved
 
 Returns:
  bool: True if the ticket was marked as resolved, False otherwise
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Prioritize all tasks with type ""ticket"" and ticket severity ""low"", add them to the current sprint, remove user ""LowPriorityHandler"" from group ""NonUrgentIssues"", and mark ticket ""TICK4567"" as resolved.","var_1 = works_list(ticket.severity=[""low""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = remove_users_from_group(user_ids=[""LowPriorityHandler""], group_id=""NonUrgentIssues"")
var_6 = mark_ticket_as_resolved(ticket_id=""TICK4567"")
","
 
 def remove_users_from_group(user_ids, group_id):
 """"""
 Removes the specified users from a group
 
 Parameters:
  user_ids (list): A list of user IDs to be removed from the group
  group_id (str): The ID of the group from which the users should be removed
 
 Returns:
  bool: Status of the removal
 """"""
 ', '
 
 def mark_ticket_as_resolved(ticket_id):
 """"""
 Marks a ticket as resolved in the system
 
 Parameters:
  ticket_id (str): The ID of the ticket to be marked as resolved
 
 Returns:
  bool: True if the ticket was marked as resolved, False otherwise
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the contact information for user ""ProductOwner22"", then filter active contacts by organization  ""O"" and summarize all work items created by those contacts.","var_1 = retrieve_user_contact_info(user_id=""ProductOwner22"")
var_2 = filter_contacts_by_organization(organization_id=""O"")
var_3 = works_list(created_by=[""""ProductOwner22""], type=[""issue"", ""ticket"", ""task""])
var_4 = summarize_objects(objects=var_3)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


 
 def retrieve_user_contact_info(user_id):
 """"""
 Retrieves the contact information for a user
 
 Parameters:
  user_id (str): The ID of the user whose contact info is requested
 
 Returns:
  str: Contact information of the user
 """"""
 ', '
 
 def filter_contacts_by_organization(organization_id, active_only=True):
 """"""
 Returns a list of contacts associated with the specified organization, optionally filtering only active contacts
 
 Parameters:
  organization_id (str): The ID of the organization to filter contacts
  active_only (bool): Flag to filter only active contacts, default value 'True'
 
 Returns:
  list: Contacts associated with the organization
 """"""
 

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Retrieve the contact information for user ""DataAnalyst1"", then prioritize all tasks owned by ""DataAnalyst1"" and add them to the current sprint.","var_1 = retrieve_user_contact_info(user_id=""DataAnalyst1"")
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
","

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


 
 def retrieve_user_contact_info(user_id):
 """"""
 Retrieves the contact information for a user
 
 Parameters:
  user_id (str): The ID of the user whose contact info is requested
 
 Returns:
  str: Contact information of the user
 """"""
 ', '
 
 def filter_contacts_by_organization(organization_id, active_only=True):
 """"""
 Returns a list of contacts associated with the specified organization, optionally filtering only active contacts
 
 Parameters:
  organization_id (str): The ID of the organization to filter contacts
  active_only (bool): Flag to filter only active contacts, default value 'True'
 
 Returns:
  list: Contacts associated with the organization
 """"""
 

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""


def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve all tickets with severity ""High"" created by ""QAEngineer"", summarize the objects, prioritize them, and update the stage of 1st item to ""Testing"".","var_1 = works_list(created_by=[""QAEngineer""], ticket.severity=[""High""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = update_stage_of_work_item(work_item_id=var_3[0], new_stage=""Testing"")
","

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
    object_ids (list): A list of object IDs

Returns:
    str: The ID of the generated report
""""""

 
 def update_stage_of_work_item(work_item_id, new_stage):
 """"""
 Updates the stage of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item to update
  new_stage (str): The new stage to which the work item should be moved
 
 Returns:
  bool: True if the stage is successfully updated, False otherwise
 """"""', '
 
 def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
 """"""
 Merges duplicate tickets into a primary ticket
 
 Parameters:
  primary_ticket_id (str): The ID of the primary ticket that remains
  duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary
 
 Returns:
  None
 """"""
 

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""


def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Get all tasks created by ""DesignerDana"", update 1st item's stage to ""Completed"", summarize them, and merge any duplicate tickets into 1st one.","var_1 = works_list(created_by=[""DesignerDana""], type=[""task""])
var_2 = update_stage_of_work_item(work_item_id=var_1[0], new_stage=""Completed"")
var_3 = summarize_objects(objects=var_1)
var_4 = merge_duplicate_tickets(primary_ticket_id=var_1[0], duplicate_ticket_ids=var_1)
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


 
 def update_stage_of_work_item(work_item_id, new_stage):
 """"""
 Updates the stage of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item to update
  new_stage (str): The new stage to which the work item should be moved
 
 Returns:
  bool: True if the stage is successfully updated, False otherwise
 """"""', '
 
 def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
 """"""
 Merges duplicate tickets into a primary ticket
 
 Parameters:
  primary_ticket_id (str): The ID of the primary ticket that remains
  duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary
 
 Returns:
  None
 """"""
 

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
"""""""
"Search for tickets from the source channel ""EMAIL"", summarize the results, prioritize them, and update 2nd item's stage to ""Customer Support"".","var_1 = works_list(ticket.source_channel=[""EMAIL""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = update_stage_of_work_item(work_item_id=var_3[1], new_stage=""Customer Support"")
","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


 
 def update_stage_of_work_item(work_item_id, new_stage):
 """"""
 Updates the stage of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item to update
  new_stage (str): The new stage to which the work item should be moved
 
 Returns:
  bool: True if the stage is successfully updated, False otherwise
 """"""', '
 
 def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
 """"""
 Merges duplicate tickets into a primary ticket
 
 Parameters:
  primary_ticket_id (str): The ID of the primary ticket that remains
  duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary
 
 Returns:
  None
 """"""
 

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Find the list of work items completed by user ""User123"", summarize these items, and update their contact information with a new email.","var_1 = list_completed_items_by_user(user_id=""User123"")
var_2 = summarize_objects(objects=var_1)
var_3 = search_object_by_name(query=""User123"")
var_4 = update_contact_information(contact_id=var_3, new_email=""new.email@example.com"")
","def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


 
 def list_completed_items_by_user(user_id):
 """"""
 Lists items that have been completed by the given user
 
 Parameters:
  user_id (str): The ID of the user whose completed items are being requested
 
 Returns:
  list: Completed items by the user
 """"""
 ', '
 
 def update_contact_information(contact_id, new_phone=None, new_email=None):
 """"""
 Updates the contact information with new provided phone number or email
 
 Parameters:
  contact_id (str): The ID of the contact to update
  new_phone (str): The new phone number for the contact, default is 'None'
  new_email (str): The new email address for the contact, default is 'None'
 
 Returns:
  bool: Status of the update operation
 """"""
 

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
"""""""
"Validate the completion of project ""PROJ-002"", then retrieve and prioritize all tasks related to the part ""PART-123"" associated with that project, and check the status of the main ticket for ""PROJ-002"".","var_1 = validate_project_completion(project_id=""PROJ-002"")
var_2 = works_list(applies_to_part=[""PART-123""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = search_object_by_name(query=""PROJ-002"")
var_5 = check_ticket_status(ticket_id=var_4)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


 
 def check_ticket_status(ticket_id):
 """"""
 Checks the status of a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose status is to be checked
 
 Returns:
  str: The status of the ticket
 """"""
 ', '
 
 def schedule_meeting_with_user(user_id, duration=30, urgent=False):
 """"""
 Schedules a meeting with a specified user
 
 Parameters:
  user_id (str): The ID of the user with whom to schedule a meeting
  duration (int): Duration of the meeting in minutes, default is '30'
  urgent (bool): Whether the meeting is urgent, defaults to False
 
 Returns:
  str: The ID of the scheduled meeting
 """"""
 ', '
 
 def validate_project_completion(project_id):
 """"""
 Validates if all tasks within a project are completed
 
 Parameters:
  project_id (str): The ID of the project to validate
 
 Returns:
  bool: True if completed, False otherwise
 """"""
 

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Schedule an urgent meeting with user ""User567"" to discuss the status of their ticket ""TICKET-567"", then summarize and prioritize all issues with priority P2 that the user is involved with.","var_1 = schedule_meeting_with_user(user_id=""User567"", urgent=True)
var_2 = check_ticket_status(ticket_id=""TICKET-567"")
var_3 = works_list(issue.priority=[""p2""], owned_by=[""User567""], type=[""issue""])
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)","

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


 
 def check_ticket_status(ticket_id):
 """"""
 Checks the status of a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose status is to be checked
 
 Returns:
  str: The status of the ticket
 """"""
 ', '
 
 def schedule_meeting_with_user(user_id, duration=30, urgent=False):
 """"""
 Schedules a meeting with a specified user
 
 Parameters:
  user_id (str): The ID of the user with whom to schedule a meeting
  duration (int): Duration of the meeting in minutes, default is '30'
  urgent (bool): Whether the meeting is urgent, defaults to False
 
 Returns:
  str: The ID of the scheduled meeting
 """"""
 ', '
 
 def validate_project_completion(project_id):
 """"""
 Validates if all tasks within a project are completed
 
 Parameters:
  project_id (str): The ID of the project to validate
 
 Returns:
  bool: True if completed, False otherwise
 """"""
 

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Validate the completion of project ""PROJ-101"", then retrieve similar work items to ""TASK-101"" related to this project, summarize them, and schedule a meeting with the project manager ""P"" to discuss the findings.","var_1 = validate_project_completion(project_id=""PROJ-101"")
var_2 = get_similar_work_items(work_id=""TASK-101"")
var_3 = summarize_objects(objects=var_2)
var_4 = search_object_by_name(query=""P"")
var_5 = schedule_meeting_with_user(user_id=var_4)","

def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""

 
 def check_ticket_status(ticket_id):
 """"""
 Checks the status of a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose status is to be checked
 
 Returns:
  str: The status of the ticket
 """"""
 ', '
 
 def schedule_meeting_with_user(user_id, duration=30, urgent=False):
 """"""
 Schedules a meeting with a specified user
 
 Parameters:
  user_id (str): The ID of the user with whom to schedule a meeting
  duration (int): Duration of the meeting in minutes, default is '30'
  urgent (bool): Whether the meeting is urgent, defaults to False
 
 Returns:
  str: The ID of the scheduled meeting
 """"""
 ', '
 
 def validate_project_completion(project_id):
 """"""
 Validates if all tasks within a project are completed
 
 Parameters:
  project_id (str): The ID of the project to validate
 
 Returns:
  bool: True if completed, False otherwise
 """"""
 

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check the status of ticket ""TICKET-345"", then find all work items with the type ""issue"" that are in the ""Development"" stage, summarize and prioritize them, and schedule a meeting with the development team lead.","var_1 = check_ticket_status(ticket_id=""TICKET-345"")
var_2 = works_list(stage.name=[""Development""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = search_object_by_name(query=""Development Team Lead"")
var_6 = schedule_meeting_with_user(user_id=var_5)","

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""
def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


 
 def check_ticket_status(ticket_id):
 """"""
 Checks the status of a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose status is to be checked
 
 Returns:
  str: The status of the ticket
 """"""
 ', '
 
 def schedule_meeting_with_user(user_id, duration=30, urgent=False):
 """"""
 Schedules a meeting with a specified user
 
 Parameters:
  user_id (str): The ID of the user with whom to schedule a meeting
  duration (int): Duration of the meeting in minutes, default is '30'
  urgent (bool): Whether the meeting is urgent, defaults to False
 
 Returns:
  str: The ID of the scheduled meeting
 """"""
 ', '
 
 def validate_project_completion(project_id):
 """"""
 Validates if all tasks within a project are completed
 
 Parameters:
  project_id (str): The ID of the project to validate
 
 Returns:
  bool: True if completed, False otherwise
 """"""
 

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Schedule a meeting with user ""QA-Expert"" to discuss the urgent ticket ""TICKET-909"", then retrieve all tasks where ""QA-Expert"" is the creator, summarize and prioritize these tasks for the sprint planning.","var_1 = schedule_meeting_with_user(user_id=""QA-Expert"", urgent=True)
var_2 = check_ticket_status(ticket_id=""TICKET-909"")
var_3 = works_list(created_by=[""QA-Expert""], type=[""task""])
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)
var_6 = get_sprint_id()
var_7 = add_work_items_to_sprint(work_ids=var_5, sprint_id=var_6)","

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


 
 def check_ticket_status(ticket_id):
 """"""
 Checks the status of a ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket whose status is to be checked
 
 Returns:
  str: The status of the ticket
 """"""
 ', '
 
 def schedule_meeting_with_user(user_id, duration=30, urgent=False):
 """"""
 Schedules a meeting with a specified user
 
 Parameters:
  user_id (str): The ID of the user with whom to schedule a meeting
  duration (int): Duration of the meeting in minutes, default is '30'
  urgent (bool): Whether the meeting is urgent, defaults to False
 
 Returns:
  str: The ID of the scheduled meeting
 """"""
 ', '
 
 def validate_project_completion(project_id):
 """"""
 Validates if all tasks within a project are completed
 
 Parameters:
  project_id (str): The ID of the project to validate
 
 Returns:
  bool: True if completed, False otherwise
 """"""
 

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Find the current sprint ID, list all completed tasks by user ""User123"", filter these tasks by type ""issue"", and then summarize and prioritize them.","var_1 = get_sprint_id()
var_2 = list_completed_tasks_by_user(user_id=""User123"")
var_3 = filter_objects_by_type(object_ids=var_2, object_type=""issue"")
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)","

def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""

 
 def list_completed_tasks_by_user(user_id):
 """"""
 Lists all completed tasks for a specific user
 
 Parameters:
  user_id (str): The ID of the user whose completed tasks need to be listed
 
 Returns:
  list: List of completed task IDs
 """"""
 ', '
 
 def filter_objects_by_type(object_ids, object_type):
 """"""
 Filters a list of objects based on their type
 
 Parameters:
  object_ids (list): A list of object IDs to filter
  object_type (str): The type of objects to filter for
 
 Returns:
  list: Filtered object IDs matching the specified type
 """"""
 ', '
 
 def mark_ticket_for_review(ticket_id, reviewer_id):
 """"""
 Marks a ticket for review by a specific user
 
 Parameters:
  ticket_id (str): The ID of the ticket to be marked for review
  reviewer_id (str): The ID of the user who should review the ticket
 
 Returns:
  None
 """"""
 


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""

def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
"""""""
"Retrieve the user ID for ""TeamLead"", list their completed tasks, filter these tasks by type ""ticket"", mark them for review by ""Reviewer456"", and then summarize the tasks.","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = list_completed_tasks_by_user(user_id=var_1)
var_3 = filter_objects_by_type(object_ids=var_2, object_type=""ticket"")
var_4 = search_object_by_name(query=""Reviewer456"")
var_5 = mark_ticket_for_review(ticket_id=var_3, reviewer_id=var_4)
var_6 = summarize_objects(objects=var_3)","

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""

 
 def list_completed_tasks_by_user(user_id):
 """"""
 Lists all completed tasks for a specific user
 
 Parameters:
  user_id (str): The ID of the user whose completed tasks need to be listed
 
 Returns:
  list: List of completed task IDs
 """"""
 ', '
 
 def filter_objects_by_type(object_ids, object_type):
 """"""
 Filters a list of objects based on their type
 
 Parameters:
  object_ids (list): A list of object IDs to filter
  object_type (str): The type of objects to filter for
 
 Returns:
  list: Filtered object IDs matching the specified type
 """"""
 ', '
 
 def mark_ticket_for_review(ticket_id, reviewer_id):
 """"""
 Marks a ticket for review by a specific user
 
 Parameters:
  ticket_id (str): The ID of the ticket to be marked for review
  reviewer_id (str): The ID of the user who should review the ticket
 
 Returns:
  None
 """"""
 
def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Search for the object ID by name ""ProjectX"", list all completed tasks by the user associated with this object, filter these tasks by type ""task"", and then prioritize and summarize them.","var_1 = search_object_by_name(query=""ProjectX"")
var_2 = list_completed_tasks_by_user(user_id=var_1)
var_3 = filter_objects_by_type(object_ids=var_2, object_type=""task"")
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)","

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""

 
 def list_completed_tasks_by_user(user_id):
 """"""
 Lists all completed tasks for a specific user
 
 Parameters:
  user_id (str): The ID of the user whose completed tasks need to be listed
 
 Returns:
  list: List of completed task IDs
 """"""
 ', '
 
 def filter_objects_by_type(object_ids, object_type):
 """"""
 Filters a list of objects based on their type
 
 Parameters:
  object_ids (list): A list of object IDs to filter
  object_type (str): The type of objects to filter for
 
 Returns:
  list: Filtered object IDs matching the specified type
 """"""
 ', '
 
 def mark_ticket_for_review(ticket_id, reviewer_id):
 """"""
 Marks a ticket for review by a specific user
 
 Parameters:
  ticket_id (str): The ID of the ticket to be marked for review
  reviewer_id (str): The ID of the user who should review the ticket
 
 Returns:
  None
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"For user ""QAEngineer"", list their recent activities, deactivate their account with the reason ""Contract End"", and remove their test device from inventory. Summarize and prioritize all issues with priority P1 from the ""Development"" stage.","var_1 = list_recent_activities(user_id=""QAEngineer"", limit=10)
var_2 = deactivate_user_account(user_id=""QAEngineer"", reason=""Contract End"")
var_3 = search_object_by_name(query=""QAEngineer's test device"")
var_4 = remove_object_from_inventory(object_id=var_3)
var_5 = works_list(issue.priority=[""p1""], stage.name=[""Development""], type=[""issue""])
var_6 = summarize_objects(objects=var_5)
var_7 = prioritize_objects(objects=var_5)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


 
 def list_recent_activities(user_id, limit=10):
 """"""
 Lists the most recent activities performed by a user
 
 Parameters:
  user_id (str): The ID of the user whose activities are to be listed
  limit (int): The maximum number of recent activities to return
 
 Returns:
  list: Recent activities of the user
 """"""
 ', '
 
 def deactivate_user_account(user_id, reason):
 """"""
 Deactivates a user account for a specific reason
 
 Parameters:
  user_id (str): The ID of the user whose account is to be deactivated
  reason (str): The reason for deactivating the account
 
 Returns:
  bool: True if the account was successfully deactivated; otherwise False
 """"""
 ', '
 
 def remove_object_from_inventory(object_id):
 """"""
 Removes an object from the inventory system based on the object ID
 
 Parameters:
  object_id (str): The ID of the object to remove from inventory
 
 Returns:
  bool: True if the removal was successful, False otherwise
 """"""
 

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve recent activities for user ""ManagerMike"", deactivate their account for ""Role Change"", and remove their old business cards from inventory. Prioritize all tasks owned by ""ManagerMike"" and add them to the current sprint.","var_1 = list_recent_activities(user_id=""ManagerMike"", limit=10)
var_2 = deactivate_user_account(user_id=""ManagerMike"", reason=""Role Change"")
var_3 = search_object_by_name(query=""ManagerMike's old business cards"")
var_4 = remove_object_from_inventory(object_id=var_3)
var_5 = works_list(owned_by=[""ManagerMike""], type=[""task""])
var_6 = prioritize_objects(objects=var_5)
var_7 = get_sprint_id()
var_8 = add_work_items_to_sprint(work_ids=var_6, sprint_id=var_7)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


 
 def list_recent_activities(user_id, limit=10):
 """"""
 Lists the most recent activities performed by a user
 
 Parameters:
  user_id (str): The ID of the user whose activities are to be listed
  limit (int): The maximum number of recent activities to return
 
 Returns:
  list: Recent activities of the user
 """"""
 ', '
 
 def deactivate_user_account(user_id, reason):
 """"""
 Deactivates a user account for a specific reason
 
 Parameters:
  user_id (str): The ID of the user whose account is to be deactivated
  reason (str): The reason for deactivating the account
 
 Returns:
  bool: True if the account was successfully deactivated; otherwise False
 """"""
 ', '
 
 def remove_object_from_inventory(object_id):
 """"""
 Removes an object from the inventory system based on the object ID
 
 Parameters:
  object_id (str): The ID of the object to remove from inventory
 
 Returns:
  bool: True if the removal was successful, False otherwise
 """"""
 

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve similar work items to ""ISSUE-789"" that need a response, update their status to ""closed"", generate a summary report, and filter out the ones that have been completed.","var_1 = get_similar_work_items(work_id=""ISSUE-789"")
var_2 = works_list(ticket.needs_response=True, type=[""issue""])
var_3 = update_issue_status(issue_id=var_2, new_status=""closed"")
var_4 = generate_summary_report(object_ids=var_2)
var_5 = filter_tasks_by_completion(task_ids=var_2, completed=False)","def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""

def update_issue_status(issue_id, new_status):
 """"""
 Updates the status of an issue
 
 Parameters:
  issue_id (str): The ID of the issue to be updated
  new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ', '
 
 def generate_summary_report(object_ids):
 """"""
 Generates a summary report for the specified objects
 
 Parameters:
  object_ids (list): A list of object IDs
 
 Returns:
  str: The ID of the generated report
 """"""
 ', '
 
 def filter_tasks_by_completion(task_ids, completed=True):
 """"""
 Filters the list of tasks by their completion status
 
 Parameters:
  task_ids (list): List of task IDs to filter
  completed (bool): The completion status to filter by. Default is 'True'
 
 Returns:
  list: List of task IDs that match the completion status
 """"""
 

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Find all work items owned by user ""QA_Analyst"" and summarize them. Then, assign the summarized tasks to user ""TeamLead"" and fetch all tasks assigned to ""TeamLead"", including the completed ones.","var_1 = works_list(owned_by=[""QA_Analyst""])
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)
var_4 = search_object_by_name(query=""TeamLead"")
var_5 = assign_tasks_to_user(task_ids=var_3, user_id=var_4)
var_6 = fetch_user_tasks(user_id=var_4, include_completed=True)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""

 
 def assign_tasks_to_user(task_ids, user_id):
 """"""
 Assigns a list of task IDs to the provided user
 
 Parameters:
  task_ids (list): List of task IDs to be assigned
  user_id (str): The ID of the user to whom the tasks will be assigned
 
 Returns:
  bool: True if the assignment is successful, False otherwise
 """"""
 ', 'def fetch_user_tasks(user_id, include_completed=False):
 """"""
 Retrieves a list of tasks assigned to a user
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be fetched
  include_completed (bool): Whether to include completed tasks in the list
 
 Returns:
  list: List of tasks assigned to the user
 """"""
 ', '
 
 def update_issue_with_solution(issue_id, solution_text):
 """"""
 Updates an issue with a solution description
 
 Parameters:
  issue_id (str): The ID of the issue to be updated
  solution_text (str): The description of the solution to apply to the issue
 
 Returns:
  None
 """"""
 

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Get similar work items to ""TICKET-456"" and prioritize them. Assign the prioritized tasks to user ""SupportLead"" and fetch all tasks for ""SupportLead"", including completed ones to review their workload.","var_1 = get_similar_work_items(work_id=""TICKET-456"")
var_2 = prioritize_objects(objects=var_1)
var_3 = search_object_by_name(query=""SupportLead"")
var_4 = assign_tasks_to_user(task_ids=var_2, user_id=var_3)
var_5 = fetch_user_tasks(user_id=var_3, include_completed=True)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""

 
 def assign_tasks_to_user(task_ids, user_id):
 """"""
 Assigns a list of task IDs to the provided user
 
 Parameters:
  task_ids (list): List of task IDs to be assigned
  user_id (str): The ID of the user to whom the tasks will be assigned
 
 Returns:
  bool: True if the assignment is successful, False otherwise
 """"""
 ', 'def fetch_user_tasks(user_id, include_completed=False):
 """"""
 Retrieves a list of tasks assigned to a user
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be fetched
  include_completed (bool): Whether to include completed tasks in the list
 
 Returns:
  list: List of tasks assigned to the user
 """"""
 ', '
 
 def update_issue_with_solution(issue_id, solution_text):
 """"""
 Updates an issue with a solution description
 
 Parameters:
  issue_id (str): The ID of the issue to be updated
  solution_text (str): The description of the solution to apply to the issue
 
 Returns:
  None
 """"""
 

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""


def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Summarize all tickets created by ""CustomerRep"" and prioritize them. Assign the most urgent tasks to user ""SupervisorJoe"" and fetch all tasks for ""SupervisorJoe"" to ensure proper delegation.","var_1 = works_list(created_by=[""CustomerRep""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = search_object_by_name(query=""SupervisorJoe"")
var_5 = assign_tasks_to_user(task_ids=[var_3[0]], user_id=var_4)
var_6 = fetch_user_tasks(user_id=var_4)","def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


 
 def assign_tasks_to_user(task_ids, user_id):
 """"""
 Assigns a list of task IDs to the provided user
 
 Parameters:
  task_ids (list): List of task IDs to be assigned
  user_id (str): The ID of the user to whom the tasks will be assigned
 
 Returns:
  bool: True if the assignment is successful, False otherwise
 """"""
 ', 'def fetch_user_tasks(user_id, include_completed=False):
 """"""
 Retrieves a list of tasks assigned to a user
 
 Parameters:
  user_id (str): The ID of the user whose tasks are to be fetched
  include_completed (bool): Whether to include completed tasks in the list
 
 Returns:
  list: List of tasks assigned to the user
 """"""
 ', '
 
 def update_issue_with_solution(issue_id, solution_text):
 """"""
 Updates an issue with a solution description
 
 Parameters:
  issue_id (str): The ID of the issue to be updated
  solution_text (str): The description of the solution to apply to the issue
 
 Returns:
  None
 """"""
 

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""


def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Summarize and prioritize all tickets with severity ""blocker"" from the ""Development"" stage, create a report for the current sprint, and filter these records by the date range ""2023-04-10"" to ""2023-04-17"".","var_1 = works_list(stage.name=[""Development""], ticket.severity=[""blocker""], type=[""ticket""])
var_2 = get_sprint_id()
var_3 = create_report_for_sprint(sprint_id=var_2, report_type=""ticket_summary"")
var_4 = filter_records_by_date(record_ids=var_1, start_date=""2023-04-10"", end_date=""2023-04-17"")
var_5 = prioritize_objects(objects=var_4)
var_6 = summarize_objects(objects=var_5)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


 
 def create_report_for_sprint(sprint_id, report_type):
 """"""
 Generates a report for a given sprint
 
 Parameters:
  sprint_id (str): The ID of the sprint
  report_type (str): The type of report to be generated
 
 Returns:
  str: The ID of the generated report
 """"""
 ', '
 
 def filter_tasks_by_due_date(task_ids, due_date):
 """"""
 Filters tasks by their due date
 
 Parameters:
  task_ids (list): A list of task IDs to filter
  due_date (str): The due date to filter tasks by
 
 Returns:
  list: List of task IDs that have the specified due date
 """"""
 ', '
 
 def filter_records_by_date(record_ids, start_date, end_date):
 """"""
 Filters a list of record IDs based on a date range
 
 Parameters:
  record_ids (list): List of record IDs to filter
  start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
  end_date (str): End date for the filtering in 'YYYY-MM-DD' format
 
 Returns:
  list: Filtered record IDs
 """"""
 "
"Find all tickets with severity ""high"" related to Rev organization ""AcmeCorp"", summarize them, generate a report, estimate the work hours for each ticket, and assign the task with the highest priority to user ""SeniorSupport"".","var_1 = search_object_by_name(query=""AcmeCorp"")
var_2 = works_list(ticket.severity=[""high""], ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = generate_report(report_type=""tickets"", subject_id=var_1)
var_5 = estimate_work_hours(work_id=var_2[0])
var_6 = prioritize_objects(objects=var_2)
var_7 = assign_task_to_user(task_id=var_6[0], user_id=""SeniorSupport"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""

 
 def generate_report(report_type, subject_id, include_summary=True):
 """"""
 Generates a report of a specific type for a subject in the system
 
 Parameters:
  report_type (str): The type of report to generate
  subject_id (str): The ID of the subject for the report
  include_summary (bool): Whether to include a summary in the report; defaults to True
 
 Returns:
  str: The ID of the generated report
 """"""
 ', '
 
 def estimate_work_hours(work_id):
 """"""
 Estimates the number of hours required to complete a specific work item
 
 Parameters:
  work_id (str): The ID of the work item for which the estimation is to be made
 
 Returns:
  float: Estimated hours required to complete the work item
 """"""
 ', '
 
 def assign_task_to_user(task_id, user_id):
 """"""
 Assigns a specific task to a user
 
 Parameters:
  task_id (str): The ID of the task to be assigned
  user_id (str): The ID of the user to whom the task will be assigned
 
 Returns:
  bool: True if assignment was successful, otherwise False
 """"""
 
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve all issues from stage ""Development"" with priority ""p2"", prioritize them, generate a report including a summary, estimate the work hours for the most critical issue, and assign it to user ""DevOps"".","var_1 = works_list(stage.name=[""Development""], issue.priority=[""p2""])
var_2 = prioritize_objects(objects=var_1)
var_3 = generate_report(report_type=""issues"", subject_id=""Development"", include_summary=True)
var_4 = estimate_work_hours(work_id=var_2[0])
var_5 = assign_task_to_user(task_id=var_2[0], user_id=""DevOps"")","def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""

 
 def generate_report(report_type, subject_id, include_summary=True):
 """"""
 Generates a report of a specific type for a subject in the system
 
 Parameters:
  report_type (str): The type of report to generate
  subject_id (str): The ID of the subject for the report
  include_summary (bool): Whether to include a summary in the report; defaults to True
 
 Returns:
  str: The ID of the generated report
 """"""
 ', '
 
 def estimate_work_hours(work_id):
 """"""
 Estimates the number of hours required to complete a specific work item
 
 Parameters:
  work_id (str): The ID of the work item for which the estimation is to be made
 
 Returns:
  float: Estimated hours required to complete the work item
 """"""
 ', '
 
 def assign_task_to_user(task_id, user_id):
 """"""
 Assigns a specific task to a user
 
 Parameters:
  task_id (str): The ID of the task to be assigned
  user_id (str): The ID of the user to whom the task will be assigned
 
 Returns:
  bool: True if assignment was successful, otherwise False
 """"""
 
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve work items owned by ""ProjectManager"", prioritize them, generate a report with a summary, estimate the work hours for the task that will take the longest, and assign it to user ""LeadDeveloper"".","var_1 = search_object_by_name(query=""ProjectManager"")
var_2 = works_list(owned_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = generate_report(report_type=""work_items"", subject_id=var_1, include_summary=True)
var_5 = estimate_work_hours(work_id=var_3[0])
var_6 = assign_task_to_user(task_id=var_3[0], user_id=""LeadDeveloper"")","

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""

 
 def generate_report(report_type, subject_id, include_summary=True):
 """"""
 Generates a report of a specific type for a subject in the system
 
 Parameters:
  report_type (str): The type of report to generate
  subject_id (str): The ID of the subject for the report
  include_summary (bool): Whether to include a summary in the report; defaults to True
 
 Returns:
  str: The ID of the generated report
 """"""
 ', '
 
 def estimate_work_hours(work_id):
 """"""
 Estimates the number of hours required to complete a specific work item
 
 Parameters:
  work_id (str): The ID of the work item for which the estimation is to be made
 
 Returns:
  float: Estimated hours required to complete the work item
 """"""
 ', '
 
 def assign_task_to_user(task_id, user_id):
 """"""
 Assigns a specific task to a user
 
 Parameters:
  task_id (str): The ID of the task to be assigned
  user_id (str): The ID of the user to whom the task will be assigned
 
 Returns:
  bool: True if assignment was successful, otherwise False
 """"""
 
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve all tickets reported by the ""Support"" department members, summarize these tickets, prioritize them, and then create a new ticket to track the resolution process in the current sprint.","var_1 = list_department_members(department_id=""Support"")
var_2 = works_list(created_by=var_1, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = create_new_ticket(title=""Track Resolution Process"", description=""Summarize and prioritize tickets reported by Support department for resolution in the current sprint."", reported_by=who_am_i())","

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


 
 def list_department_members(department_id):
 """"""
 Returns a list of user IDs for all members within a specified department
 
 Parameters:
  department_id (str): The ID of the department to list members for
 
 Returns:
  list: User IDs of all the members in the department
 """"""
 ', '
 
 def generate_report_for_sprint(sprint_id):
 """"""
 Generates a performance report for a specified sprint
 
 Parameters:
  sprint_id (str): The ID of the sprint for which to generate the report
 
 Returns:
  str: The ID of the generated report
 """"""
 ', '
 
 def create_new_ticket(title, description, reported_by):
 """"""
 Creates a new ticket in the system with the given details
 
 Parameters:
  title (str): The title of the new ticket
  description (str): A detailed description of the issue or request
  reported_by (str): The ID of the user reporting the ticket
 
 Returns:
  str: The ID of the newly created ticket
 """"""
 

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""
def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Filter projects by category ""CAT-003"" that are active, summarize the project details, check inventory for part ""PART-102"", and assign the most critical task to user ""User789"".","var_1 = filter_projects_by_category(category_id=""CAT-003"", active_only=True)
var_2 = works_list(applies_to_part=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = check_inventory_availability(part_id=""PART-102"")
var_5 = prioritize_objects(objects=var_2)
var_6 = assign_task_to_user(task_id=var_5[0], user_id=""User789"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


 
 def filter_projects_by_category(category_id, active_only=True):
 """"""
 Filters projects by their category and returns a list of project IDs
 
 Parameters:
  category_id (str): The ID of the category to filter projects by
  active_only (bool): Whether to return only active projects
 
 Returns:
  list: List of project IDs matching the category filter
 """"""
 ', 'def assign_task_to_user(task_id, user_id):
 """"""
 Assigns a specific task to a user
 
 Parameters:
  task_id (str): The ID of the task to be assigned
  user_id (str): The ID of the user to whom the task is assigned
 
 Returns:
  None
 """"""
 ', '
 
 def check_inventory_availability(part_id, minimum_quantity=1):
 """"""
 Checks if the inventory has the specified part in at least the minimum quantity
 
 Parameters:
  part_id (str): The ID of the part to check in inventory
  minimum_quantity (int): The minimum quantity to check for; defaults to 1
 
 Returns:
  bool: True if the minimum quantity is available; otherwise False
 """"""
 

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
" Find all tasks associated with ""RevOrgX"", prioritize them for the current sprint, log the user's activity of sprint planning, log the event of RevOrgX-related task retrieval, extract keywords from the task descriptions, and check if the user has permission to access these tasks.","var_1 = who_am_i()
var_2 = search_object_by_name(query=""RevOrgX"")
var_3 = works_list(ticket.rev_org=[var_2], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
var_7 = log_user_activity(user_id=var_1, activity_description=""Planning sprint with tasks associated with RevOrgX"")
var_8 = log_system_event(event_type=""RevOrgXRelatedTaskRetrieval"", description=""Retrieved tasks associated with RevOrgX"")
var_9 = extract_keywords_from_text(text=var_4)
var_10 = check_object_permission(user_id=var_1, object_id=var_3)","

def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""


def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


 
 def log_user_activity(user_id, activity_description):
 """"""
 Logs a user's activity with a description
 
 Parameters:
  user_id (str): The ID of the user whose activity is being logged
  activity_description (str): A description of the activity
 
 Returns:
  bool: True if the logging was successful, False otherwise
 """"""
 ', '
 
 def log_system_event(event_type, description, user_id=None):
 """"""
 Logs an event in the system with an optional user ID associated with it
 
 Parameters:
  event_type (str): The type of event to log
  description (str): A brief description of the event
  user_id (str): The ID of the user involved in the event, if applicable
 
 Returns:
  str: The ID of the logged event
 """"""
 ', '
 
 def extract_keywords_from_text(text):
 """"""
 Given a text, extracts and returns the main keywords
 
 Parameters:
  text (str): The text from which keywords are to be extracted
 
 Returns:
  list: A list of extracted keywords
 """"""
 ', '
 
 def check_object_permission(user_id, object_id):
 """"""
 Checks if a user has permission to access a specific object
 
 Parameters:
  user_id (str): The ID of the user
  object_id (str): The ID of the object to check permission for
 
 Returns:
  bool: True if the user has permission, False otherwise
 """"""
 

def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Summarize and prioritize all tickets from the ""Development"" stage, update their status to ""Open"", get the object history, and calculate the estimated effort for each ticket.","var_1 = works_list(stage.name=[""Development""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = update_ticket_status(ticket_id=var_3[0], new_status=""Open"")
var_5 = get_object_history(object_id=var_3[0])
var_6 = calculate_estimated_effort(work_id=var_3[0])","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


 
 def update_ticket_status(ticket_id, new_status):
 """"""
 Updates the status of a given ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket to be updated
  new_status (str): The new status to update the ticket with
 
 Returns:
  bool: True if the update was successful, otherwise False
 """"""
 ', '
 
 def get_object_history(object_id):
 """"""
 Retrieves the change history of a specified object
 
 Parameters:
  object_id (str): The ID of the object for which history is requested
 
 Returns:
  list: A list of changes made to the object
 """"""
 ', '
 
 def calculate_estimated_effort(work_id):
 """"""
 Calculates the estimated effort required to complete a work item.
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  float: Estimated effort in hours
 """"""
 ', '
 
 def calculate_budget_allocation(project_id, cost_limit):
 """"""
 Calculates and assigns the budget allocation for a project
 
 Parameters:
  project_id (str): The ID of the project for which the budget is calculated
  cost_limit (float): The cost limit for the project's budget
 
 Returns:
  float: The amount allocated to the project budget
 """"""
 

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
"""""""
"Search for an object by name ""ProjectX"", use the returned ID to fetch the ticket history, summarize the associated work items, generate a report, and batch update the user roles of all users involved to ""Project Manager"".","var_1 = search_object_by_name(query=""ProjectX"")
var_2 = fetch_ticket_history(ticket_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = generate_work_report(work_ids=var_2)
var_5 = batch_update_user_roles(user_ids=var_2, new_role=""Project Manager"")","def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""

 
 def fetch_ticket_history(ticket_id, history_limit=10):
 """"""
 Fetches the history of changes to a given ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket for which the history is requested
  history_limit (int): Maximum number of history entries to retrieve. The default is '10'
 
 Returns:
  list: A list of history records for the ticket
 """"""
 ', '
 
 def generate_work_report(work_ids):
 """"""
 Generates a report for the given work items.
 
 Parameters:
  work_ids (list): A list of work item IDs for report generation
 
 Returns:
  str: The ID of the generated report
 """"""
 ', 'def calculate_due_dates(work_item_ids, urgency_level):
 """"""
 Calculates the due dates for given work items based on their urgency
 
 Parameters:
  work_item_ids (list): A list of work item IDs for which due dates are required
  urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'
 
 Returns:
  list: Due dates for the specified work items
 """"""
 ', '
 
 def batch_update_user_roles(user_ids, new_role):
 """"""
 Updates the roles for a batch of users to a new role
 
 Parameters:
  user_ids (list): List of user IDs whose roles should be updated
  new_role (str): The new role to assign
 
 Returns:
  int: Number of users successfully updated
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Create actionable tasks from the text ""Update server configurations"", fetch the ticket history for the ticket ""TICKET-004"", generate a report for these tasks, prioritize them, and calculate their due dates with a high urgency level.","var_1 = create_actionable_tasks_from_text(text=""Update server configurations"")
var_2 = fetch_ticket_history(ticket_id=""TICKET-004"")
var_3 = generate_work_report(work_ids=var_1)
var_4 = prioritize_objects(objects=var_1)
var_5 = calculate_due_dates(work_item_ids=var_1, urgency_level=""high"")","

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""

 
 def fetch_ticket_history(ticket_id, history_limit=10):
 """"""
 Fetches the history of changes to a given ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket for which the history is requested
  history_limit (int): Maximum number of history entries to retrieve. The default is '10'
 
 Returns:
  list: A list of history records for the ticket
 """"""
 ', '
 
 def generate_work_report(work_ids):
 """"""
 Generates a report for the given work items.
 
 Parameters:
  work_ids (list): A list of work item IDs for report generation
 
 Returns:
  str: The ID of the generated report
 """"""
 ', 'def calculate_due_dates(work_item_ids, urgency_level):
 """"""
 Calculates the due dates for given work items based on their urgency
 
 Parameters:
  work_item_ids (list): A list of work item IDs for which due dates are required
  urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'
 
 Returns:
  list: Due dates for the specified work items
 """"""
 ', '
 
 def batch_update_user_roles(user_ids, new_role):
 """"""
 Updates the roles for a batch of users to a new role
 
 Parameters:
  user_ids (list): List of user IDs whose roles should be updated
  new_role (str): The new role to assign
 
 Returns:
  int: Number of users successfully updated
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""


def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve work items owned by user ""QA_Lead"", fetch the ticket history for ticket ""TICKET-007"", generate a report for these items, prioritize them, and batch update the user roles of the QA team to ""Senior QA"".","var_1 = search_object_by_name(query=""QA_Lead"")
var_2 = works_list(owned_by=[var_1])
var_3 = fetch_ticket_history(ticket_id=""TICKET-007"")
var_4 = generate_work_report(work_ids=var_2)
var_5 = prioritize_objects(objects=var_2)
var_6 = batch_update_user_roles(user_ids=var_2, new_role=""Senior QA"")","
 
 def fetch_ticket_history(ticket_id, history_limit=10):
 """"""
 Fetches the history of changes to a given ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket for which the history is requested
  history_limit (int): Maximum number of history entries to retrieve. The default is '10'
 
 Returns:
  list: A list of history records for the ticket
 """"""
 ', '
 
 def generate_work_report(work_ids):
 """"""
 Generates a report for the given work items.
 
 Parameters:
  work_ids (list): A list of work item IDs for report generation
 
 Returns:
  str: The ID of the generated report
 """"""
 ', 'def calculate_due_dates(work_item_ids, urgency_level):
 """"""
 Calculates the due dates for given work items based on their urgency
 
 Parameters:
  work_item_ids (list): A list of work item IDs for which due dates are required
  urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'
 
 Returns:
  list: Due dates for the specified work items
 """"""
 ', '
 
 def batch_update_user_roles(user_ids, new_role):
 """"""
 Updates the roles for a batch of users to a new role
 
 Parameters:
  user_ids (list): List of user IDs whose roles should be updated
  new_role (str): The new role to assign
 
 Returns:
  int: Number of users successfully updated
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Get the ID of the current sprint, fetch the ticket history for ticket ""TICKET-008"", summarize the work items in this sprint, generate a report for the sprint work items, and calculate their due dates with a medium urgency level.","var_1 = get_sprint_id()
var_2 = fetch_ticket_history(ticket_id=""TICKET-008"")
var_3 = works_list(stage.name=[var_1])
var_4 = summarize_objects(objects=var_3)
var_5 = generate_work_report(work_ids=var_3)
var_6 = calculate_due_dates(work_item_ids=var_3, urgency_level=""medium"")","

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""

 
 def fetch_ticket_history(ticket_id, history_limit=10):
 """"""
 Fetches the history of changes to a given ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket for which the history is requested
  history_limit (int): Maximum number of history entries to retrieve. The default is '10'
 
 Returns:
  list: A list of history records for the ticket
 """"""
 ', '
 
 def generate_work_report(work_ids):
 """"""
 Generates a report for the given work items.
 
 Parameters:
  work_ids (list): A list of work item IDs for report generation
 
 Returns:
  str: The ID of the generated report
 """"""
 ', 'def calculate_due_dates(work_item_ids, urgency_level):
 """"""
 Calculates the due dates for given work items based on their urgency
 
 Parameters:
  work_item_ids (list): A list of work item IDs for which due dates are required
  urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'
 
 Returns:
  list: Due dates for the specified work items
 """"""
 ', '
 
 def batch_update_user_roles(user_ids, new_role):
 """"""
 Updates the roles for a batch of users to a new role
 
 Parameters:
  user_ids (list): List of user IDs whose roles should be updated
  new_role (str): The new role to assign
 
 Returns:
  int: Number of users successfully updated
 """"""
 

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"For user ""DesignerDan"", estimate their workload, convert all their tasks to tickets, prioritize these tickets, and generate a report by the tag ""Design"".","var_1 = calculate_user_workload(user_id=""DesignerDan"")
var_2 = works_list(owned_by=[""DesignerDan""], type=[""task""])
var_3 = convert_task_to_ticket(task_id=""task_id_from_var_2"") 
var_4 = works_list(owned_by=[""DesignerDan""], type=[""ticket""])
var_5 = prioritize_objects(objects=var_4)
var_6 = generate_report_by_tag(tag_id=""Design"", include_archived=False)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


 
 def calculate_user_workload(user_id):
 """"""
 Calculates the workload of a user based on assigned tasks
 
 Parameters:
  user_id (str): The ID of the user whose workload is to be calculated
 
 Returns:
  float: The calculated workload value
 """"""
 ', '
 
 def estimate_completion_time(task_id):
 """"""
 Estimates the completion time for a given task
 
 Parameters:
  task_id (str): The ID of the task for which to estimate completion time
 
 Returns:
  float: The estimated number of hours to complete the task
 """"""
 ', '
 
 def generate_report_by_tag(tag_id, include_archived=False):
 """"""
 Generates a report for all work items associated with the given tag
 
 Parameters:
  tag_id (str): The ID of the tag used to filter work items
  include_archived (bool): Include archived work items if set to True
 
 Returns:
  list: Work items associated with the tag
 """"""
 ', '
 
 def convert_task_to_ticket(task_id):
 """"""
 Converts a task into a ticket in the system
 
 Parameters:
  task_id (str): The ID of the task to be converted
 
 Returns:
  str: The ID of the newly created ticket
 """"""
 

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the workload for user ""SupportSam"", find all tickets they have created, estimate the completion time for these tickets, convert any open tasks to tickets, and summarize the tickets.","var_1 = calculate_user_workload(user_id=""SupportSam"")
var_2 = works_list(created_by=[""SupportSam""], type=[""ticket""])
var_3 = estimate_completion_time(task_id=""ticket_id_from_var_2"")
var_4 = works_list(created_by=[""SupportSam""], type=[""task""])
var_5 = convert_task_to_ticket(task_id=""task_id_from_var_4"") 
var_6 = summarize_objects(objects=var_2)","def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


 
 def calculate_user_workload(user_id):
 """"""
 Calculates the workload of a user based on assigned tasks
 
 Parameters:
  user_id (str): The ID of the user whose workload is to be calculated
 
 Returns:
  float: The calculated workload value
 """"""
 ', '
 
 def estimate_completion_time(task_id):
 """"""
 Estimates the completion time for a given task
 
 Parameters:
  task_id (str): The ID of the task for which to estimate completion time
 
 Returns:
  float: The estimated number of hours to complete the task
 """"""
 ', '
 
 def generate_report_by_tag(tag_id, include_archived=False):
 """"""
 Generates a report for all work items associated with the given tag
 
 Parameters:
  tag_id (str): The ID of the tag used to filter work items
  include_archived (bool): Include archived work items if set to True
 
 Returns:
  list: Work items associated with the tag
 """"""
 ', '
 
 def convert_task_to_ticket(task_id):
 """"""
 Converts a task into a ticket in the system
 
 Parameters:
  task_id (str): The ID of the task to be converted
 
 Returns:
  str: The ID of the newly created ticket
 """"""
 

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
"""""""
"For the current sprint, retrieve work items created by user ""User456"", summarize these items, generate a summary progress report for project ""PRJ-002"", list all tasks completed by ""User456"", reactivate the work item ""OBJ-789"" from the archive, and calculate the time until the deadline for ""TASK-012"".","var_1 = get_sprint_id()
var_2 = works_list(created_by=[""User456""], limit=50)
var_3 = summarize_objects(objects=var_2)
var_4 = generate_progress_report(project_id=""PRJ-002"", report_format=""summary"")
var_5 = list_completed_tasks_by_user(user_id=""User456"")
var_6 = remove_object_from_archive(object_id=""OBJ-789"")
var_7 = calculate_time_until_deadline(work_item_id=""TASK-012"")","

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


 
 def generate_progress_report(project_id, report_format=""summary""):
 """"""
 Generates a progress report for the specified project
 
 Parameters:
  project_id (str): The ID of the project for which the progress report is needed
  report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'
 
 Returns:
  str: The generated progress report
 """"""
 ', '
 
 def list_completed_tasks_by_user(user_id, project_id=None):
 """"""
 Lists all tasks completed by a given user, optionally filtered by project
 
 Parameters:
  user_id (str): The ID of the user
  project_id (str, optional): The ID of the project to filter tasks
 
 Returns:
  list: List of task IDs completed by the user
 """"""
 ', '
 
 def remove_object_from_archive(object_id):
 """"""
 Removes an object from the system archive, making it active again
 
 Parameters:
  object_id (str): The ID of the object to be removed from the archive
 
 Returns:
  bool: True if the object was successfully removed, False otherwise
 """"""
 ', '
 
 def calculate_time_until_deadline(work_item_id):
 """"""
 Calculates the amount of time remaining until the deadline of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item
 
 Returns:
  float: The number of hours until the deadline
 """"""
 


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""


def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Summarize and prioritize all tickets with severity ""high"" from the customer support department, add them to the current sprint, generate a summary progress report for project ""PRJ-003"", list all tasks completed by user ""SupportLead"" in this project, unarchive the object ""OBJ-101"", and calculate the remaining time for ""TASK-345"".","var_1 = search_object_by_name(query=""customer support department"")
var_2 = works_list(ticket.severity=[""high""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
var_7 = generate_progress_report(project_id=""PRJ-003"", report_format=""summary"")
var_8 = list_completed_tasks_by_user(user_id=""SupportLead"", project_id=""PRJ-003"")
var_9 = remove_object_from_archive(object_id=""OBJ-101"")
var_10 = calculate_time_until_deadline(work_item_id=""TASK-345"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


 
 def generate_progress_report(project_id, report_format=""summary""):
 """"""
 Generates a progress report for the specified project
 
 Parameters:
  project_id (str): The ID of the project for which the progress report is needed
  report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'
 
 Returns:
  str: The generated progress report
 """"""
 ', '
 
 def list_completed_tasks_by_user(user_id, project_id=None):
 """"""
 Lists all tasks completed by a given user, optionally filtered by project
 
 Parameters:
  user_id (str): The ID of the user
  project_id (str, optional): The ID of the project to filter tasks
 
 Returns:
  list: List of task IDs completed by the user
 """"""
 ', '
 
 def remove_object_from_archive(object_id):
 """"""
 Removes an object from the system archive, making it active again
 
 Parameters:
  object_id (str): The ID of the object to be removed from the archive
 
 Returns:
  bool: True if the object was successfully removed, False otherwise
 """"""
 ', '
 
 def calculate_time_until_deadline(work_item_id):
 """"""
 Calculates the amount of time remaining until the deadline of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item
 
 Returns:
  float: The number of hours until the deadline
 """"""
 
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Find all issues with priority ""p2"" related to the ""Backend"" stage, prioritize them, generate a detailed progress report for project ""PRJ-004"", list all tasks completed by user ""BackendDev"" with or without a project filter, remove ""OBJ-234"" from the archive, and determine the hours left until the deadline for ""TASK-567"".","var_1 = search_object_by_name(query=""Backend"")
var_2 = works_list(stage.name=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = generate_progress_report(project_id=""PRJ-004"", report_format=""detailed"")
var_5 = list_completed_tasks_by_user(user_id=""BackendDev"")
var_6 = remove_object_from_archive(object_id=""OBJ-234"")
var_7 = calculate_time_until_deadline(work_item_id=""TASK-567"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


 
 def generate_progress_report(project_id, report_format=""summary""):
 """"""
 Generates a progress report for the specified project
 
 Parameters:
  project_id (str): The ID of the project for which the progress report is needed
  report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'
 
 Returns:
  str: The generated progress report
 """"""
 ', '
 
 def list_completed_tasks_by_user(user_id, project_id=None):
 """"""
 Lists all tasks completed by a given user, optionally filtered by project
 
 Parameters:
  user_id (str): The ID of the user
  project_id (str, optional): The ID of the project to filter tasks
 
 Returns:
  list: List of task IDs completed by the user
 """"""
 ', '
 
 def remove_object_from_archive(object_id):
 """"""
 Removes an object from the system archive, making it active again
 
 Parameters:
  object_id (str): The ID of the object to be removed from the archive
 
 Returns:
  bool: True if the object was successfully removed, False otherwise
 """"""
 ', '
 
 def calculate_time_until_deadline(work_item_id):
 """"""
 Calculates the amount of time remaining until the deadline of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item
 
 Returns:
  float: The number of hours until the deadline
 """"""
 


def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Prioritize all tasks owned by user ""FrontEndLead"", add them to the current sprint, generate a summary progress report for project ""PRJ-006"", list all tasks completed by ""FrontEndLead"", remove ""OBJ-456"" from the archive, and calculate the time until the deadline for ""TASK-890"".","var_1 = who_am_i()
var_2 = works_list(owned_by=[""FrontEndLead""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
var_6 = generate_progress_report(project_id=""PRJ-006"", report_format=""summary"")
var_7 = list_completed_tasks_by_user(user_id=""FrontEndLead"")
var_8 = remove_object_from_archive(object_id=""OBJ-456"")
var_9 = calculate_time_until_deadline(work_item_id=""TASK-890"")","

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


 
 def generate_progress_report(project_id, report_format=""summary""):
 """"""
 Generates a progress report for the specified project
 
 Parameters:
  project_id (str): The ID of the project for which the progress report is needed
  report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'
 
 Returns:
  str: The generated progress report
 """"""
 ', '
 
 def list_completed_tasks_by_user(user_id, project_id=None):
 """"""
 Lists all tasks completed by a given user, optionally filtered by project
 
 Parameters:
  user_id (str): The ID of the user
  project_id (str, optional): The ID of the project to filter tasks
 
 Returns:
  list: List of task IDs completed by the user
 """"""
 ', '
 
 def remove_object_from_archive(object_id):
 """"""
 Removes an object from the system archive, making it active again
 
 Parameters:
  object_id (str): The ID of the object to be removed from the archive
 
 Returns:
  bool: True if the object was successfully removed, False otherwise
 """"""
 ', '
 
 def calculate_time_until_deadline(work_item_id):
 """"""
 Calculates the amount of time remaining until the deadline of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item
 
 Returns:
  float: The number of hours until the deadline
 """"""
 

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Summarize and prioritize all issues from the ""DevOps"" stage, add them to the current sprint, generate a summary progress report for project ""PRJ-008"", list all tasks completed by user ""DevOpsManager"", remove ""OBJ-678"" from the archive, and determine the hours left until the deadline for ""TASK-234"".","var_1 = search_object_by_name(query=""DevOps"")
var_2 = works_list(stage.name=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
var_7 = generate_progress_report(project_id=""PRJ-008"", report_format=""summary"")
var_8 = list_completed_tasks_by_user(user_id=""DevOpsManager"")
var_9 = remove_object_from_archive(object_id=""OBJ-678"")
var_10 = calculate_time_until_deadline(work_item_id=""TASK-234"")","

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


 
 def generate_progress_report(project_id, report_format=""summary""):
 """"""
 Generates a progress report for the specified project
 
 Parameters:
  project_id (str): The ID of the project for which the progress report is needed
  report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'
 
 Returns:
  str: The generated progress report
 """"""
 ', '
 
 def list_completed_tasks_by_user(user_id, project_id=None):
 """"""
 Lists all tasks completed by a given user, optionally filtered by project
 
 Parameters:
  user_id (str): The ID of the user
  project_id (str, optional): The ID of the project to filter tasks
 
 Returns:
  list: List of task IDs completed by the user
 """"""
 ', '
 
 def remove_object_from_archive(object_id):
 """"""
 Removes an object from the system archive, making it active again
 
 Parameters:
  object_id (str): The ID of the object to be removed from the archive
 
 Returns:
  bool: True if the object was successfully removed, False otherwise
 """"""
 ', '
 
 def calculate_time_until_deadline(work_item_id):
 """"""
 Calculates the amount of time remaining until the deadline of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item
 
 Returns:
  float: The number of hours until the deadline
 """"""
 


def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve work items with issue priority ""p0"" and created by ""CTO"", summarize these items, generate a summary progress report for project ""PRJ-010"", list all tasks completed by ""CTO"", unarchive the object ""OBJ-890"", and calculate the remaining time for ""TASK-456"".","var_1 = who_am_i()
var_2 = works_list(created_by=[""CTO""], issue.priority=[""p0""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = generate_progress_report(project_id=""PRJ-010"", report_format=""summary"")
var_5 = list_completed_tasks_by_user(user_id=""CTO"")
var_6 = remove_object_from_archive(object_id=""OBJ-890"")
var_7 = calculate_time_until_deadline(work_item_id=""TASK-456"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


 
 def generate_progress_report(project_id, report_format=""summary""):
 """"""
 Generates a progress report for the specified project
 
 Parameters:
  project_id (str): The ID of the project for which the progress report is needed
  report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'
 
 Returns:
  str: The generated progress report
 """"""
 ', '
 
 def list_completed_tasks_by_user(user_id, project_id=None):
 """"""
 Lists all tasks completed by a given user, optionally filtered by project
 
 Parameters:
  user_id (str): The ID of the user
  project_id (str, optional): The ID of the project to filter tasks
 
 Returns:
  list: List of task IDs completed by the user
 """"""
 ', '
 
 def remove_object_from_archive(object_id):
 """"""
 Removes an object from the system archive, making it active again
 
 Parameters:
  object_id (str): The ID of the object to be removed from the archive
 
 Returns:
  bool: True if the object was successfully removed, False otherwise
 """"""
 ', '
 
 def calculate_time_until_deadline(work_item_id):
 """"""
 Calculates the amount of time remaining until the deadline of a work item
 
 Parameters:
  work_item_id (str): The ID of the work item
 
 Returns:
  float: The number of hours until the deadline
 """"""
 

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve work items with a severity of ""high"" from the ""Development"" stage, summarize and prioritize them, validate if user ""DevManager"" has the required permissions to change their status, log the time ""DevManager"" spent on task ""TASK-789"", and archive the ones that are completed.","var_1 = works_list(stage.name=[""Development""], ticket.severity=[""high""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = validate_user_permissions(user_id=""DevManager"", required_permissions=[""change_status""])
var_5 = track_time_on_task(task_id=""TASK-789"", hours_spent=3.0)
var_6 = archive_completed_work(work_ids=var_1)","

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


 
 def validate_user_permissions(user_id, required_permissions):
 """"""
 Checks if the user has the specified permissions
 
 Parameters:
  user_id (str): The ID of the user whose permissions need to be checked
  required_permissions (list): A list of permissions to check against the user's permissions
 
 Returns:
  bool: True if the user has all the required permissions, False otherwise
 """"""
 ', '
 
 def track_time_on_task(task_id, hours_spent):
 """"""
 Tracks time spent on a task by logging the number of hours
 
 Parameters:
  task_id (str): The ID of the task on which time is spent
  hours_spent (float): The number of hours spent on the task
 
 Returns:
  bool: Status of the time tracking
 """"""
 ', '
 
 def archive_completed_work(work_ids):
 """"""
 Archives a list of completed work items
 
 Parameters:
  work_ids (list): A list of work item IDs that have been completed and need to be archived
 
 Returns:
  int: The number of work items successfully archived
 """"""
 ', '
 
 def calculate_estimated_completion(project_id):
 """"""
 Calculates the estimated completion date for a project based on current progress
 
 Parameters:
  project_id (str): The ID of the project to be analyzed
 
 Returns:
  str: Estimated date of completion
 """"""
 


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve work items owned by ""TeamLead42"", create actionable tasks from their descriptions, estimate the resolution time for each, merge related notes, validate the consistency, and log the system activity.","var_1 = works_list(owned_by=[""TeamLead42""])
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)
var_4 = estimate_ticket_resolution_time(ticket_id=var_1)
var_5 = merge_ticket_notes(ticket_id=var_1, note_ids=var_1, updated_by=""TeamLead42"")
var_6 = validate_data_consistency(data_id=var_1, schema_id=var_1)
var_7 = log_system_activity(activity_description=""Processed work items owned by TeamLead42"")","

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


 
 def log_system_activity(activity_description, user_id=None):
 """"""
 Logs a system activity with an optional user ID
 
 Parameters:
  activity_description (str): A brief description of the activity being logged
  user_id (str, optional): The ID of the user associated with the activity; defaults to None
 
 Returns:
  bool: True if the activity was logged successfully; otherwise False
 """"""
 ', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):
 """"""
 Merges multiple notes into a single ticket note
 
 Parameters:
  ticket_id (str): The ID of the ticket where the merged note will be added
  note_ids (list): List of note IDs that will be merged into the ticket
  updated_by (str): The ID of the user performing the merge
 
 Returns:
  str: ID of the updated ticket note
 """"""
 ', '
 
 def estimate_ticket_resolution_time(ticket_id):
 """"""
 Estimates the resolution time for a given ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket to estimate time for
 
 Returns:
  float: Estimated time in hours to resolve the ticket
 """"""
 ', '
 
 def validate_data_consistency(data_id, schema_id):
 """"""
 Validates if data conforms to a specified schema for consistency
 
 Parameters:
  data_id (str): The ID of the data to be validated
  schema_id (str): The ID of the schema to validate the data against
 
 Returns:
  bool: True if data is consistent, False otherwise
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Prioritize issues with priority ""p2"" that are associated with ""RevOrgA"", estimate the resolution time, merge related notes, validate the consistency of the prioritization data, and log the activity.","var_1 = search_object_by_name(query=""RevOrgA"")
var_2 = works_list(issue.priority=[""p2""], issue.rev_orgs=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = estimate_ticket_resolution_time(ticket_id=var_3)
var_5 = merge_ticket_notes(ticket_id=var_3, note_ids=var_3, updated_by=""System"")
var_6 = validate_data_consistency(data_id=var_3, schema_id=var_3)
var_7 = log_system_activity(activity_description=""Prioritized p2 issues associated with RevOrgA"")","

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


 
 def log_system_activity(activity_description, user_id=None):
 """"""
 Logs a system activity with an optional user ID
 
 Parameters:
  activity_description (str): A brief description of the activity being logged
  user_id (str, optional): The ID of the user associated with the activity; defaults to None
 
 Returns:
  bool: True if the activity was logged successfully; otherwise False
 """"""
 ', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):
 """"""
 Merges multiple notes into a single ticket note
 
 Parameters:
  ticket_id (str): The ID of the ticket where the merged note will be added
  note_ids (list): List of note IDs that will be merged into the ticket
  updated_by (str): The ID of the user performing the merge
 
 Returns:
  str: ID of the updated ticket note
 """"""
 ', '
 
 def estimate_ticket_resolution_time(ticket_id):
 """"""
 Estimates the resolution time for a given ticket
 
 Parameters:
  ticket_id (str): The ID of the ticket to estimate time for
 
 Returns:
  float: Estimated time in hours to resolve the ticket
 """"""
 ', '
 
 def validate_data_consistency(data_id, schema_id):
 """"""
 Validates if data conforms to a specified schema for consistency
 
 Parameters:
  data_id (str): The ID of the data to be validated
  schema_id (str): The ID of the schema to validate the data against
 
 Returns:
  bool: True if data is consistent, False otherwise
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Assign all P2 priority issues to ""LeadDev"", fetch work items created by ""LeadDev"", summarize and prioritize these issues, update their status to ""In Review"", archive completed tasks in ""ProjectC"" since ""2023-03-10"", and retrieve ""LeadDev""'s workload.","var_1 = search_object_by_name(query=""LeadDev"")
var_2 = works_list(issue.priority=[""p2""], type=[""issue""])
var_3 = assign_issues_to_user(issue_ids=var_2, user_id=var_1)
var_4 = fetch_user_created_work(user_id=var_1)
var_5 = summarize_objects(objects=var_4)
var_6 = prioritize_objects(objects=var_4)
var_7 = batch_update_task_status(task_ids=var_4, new_status=""In Review"")
var_8 = archive_completed_tasks(project_id=""ProjectC"", completed_since=""2023-03-10"")
var_9 = retrieve_user_workload(user_id=var_1)","def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def assign_issues_to_user(issue_ids, user_id):
 """"""
 Assigns a list of issues to the specified user
 
 Parameters:
  issue_ids (list): A list of issue IDs that need to be assigned
  user_id (str): The user ID to whom the issues will be assigned
 
 Returns:
  None
 """"""
 ', '
 
 def fetch_user_created_work(user_id, type=None):
 """"""
 Retrieves work items created by a specific user
 
 Parameters:
  user_id (str): The ID of the user whose work items are to be retrieved
  type (list): Filters for work of the provided types, e.g., ['issue', 'ticket''']
 
 Returns:
  list: Work items created by the user
 """"""
 ', '
 
 def batch_update_task_status(task_ids, new_status):
 """"""
 Updates the status of multiple tasks in a batch operation
 
 Parameters:
  task_ids (list): A list of task IDs whose status needs updating
  new_status (str): The new status to apply to the tasks
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ', '
 
 def archive_completed_tasks(project_id, completed_since):
 """"""
 Archives tasks that are completed within the given project since the specified time
 
 Parameters:
  project_id (str): The ID of the project containing the tasks
  completed_since (str): Archive tasks completed after this timestamp
 
 Returns:
  int: Number of tasks archived
 """"""
 ', '
 
 def retrieve_user_workload(user_id):
 """"""
 Retrieves the current workload for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose workload is to be retrieved
 
 Returns:
  list: A list containing workload details
 """"""
 

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Search for work items similar to ""TASK-789"", assign them to ""OperatorOli"", summarize the work items for a team meeting, batch update their status to ""On Hold"", archive completed tasks in ""ProjectF"" since ""2023-03-05"", and assess ""OperatorOli""'s workload for the week.","var_1 = get_similar_work_items(work_id=""TASK-789"")
var_2 = search_object_by_name(query=""OperatorOli"")
var_3 = assign_issues_to_user(issue_ids=var_1, user_id=var_2)
var_4 = summarize_objects(objects=var_1)
var_5 = batch_update_task_status(task_ids=var_1, new_status=""On Hold"")
var_6 = archive_completed_tasks(project_id=""ProjectF"", completed_since=""2023-03-05"")
var_7 = retrieve_user_workload(user_id=var_2)","

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""
def assign_issues_to_user(issue_ids, user_id):
 """"""
 Assigns a list of issues to the specified user
 
 Parameters:
  issue_ids (list): A list of issue IDs that need to be assigned
  user_id (str): The user ID to whom the issues will be assigned
 
 Returns:
  None
 """"""
 ', '
 
 def fetch_user_created_work(user_id, type=None):
 """"""
 Retrieves work items created by a specific user
 
 Parameters:
  user_id (str): The ID of the user whose work items are to be retrieved
  type (list): Filters for work of the provided types, e.g., ['issue', 'ticket''']
 
 Returns:
  list: Work items created by the user
 """"""
 ', '
 
 def batch_update_task_status(task_ids, new_status):
 """"""
 Updates the status of multiple tasks in a batch operation
 
 Parameters:
  task_ids (list): A list of task IDs whose status needs updating
  new_status (str): The new status to apply to the tasks
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ', '
 
 def archive_completed_tasks(project_id, completed_since):
 """"""
 Archives tasks that are completed within the given project since the specified time
 
 Parameters:
  project_id (str): The ID of the project containing the tasks
  completed_since (str): Archive tasks completed after this timestamp
 
 Returns:
  int: Number of tasks archived
 """"""
 ', '
 
 def retrieve_user_workload(user_id):
 """"""
 Retrieves the current workload for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose workload is to be retrieved
 
 Returns:
  list: A list containing workload details
 """"""
 

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Assign all tickets needing a response to ""ResponderRita"", fetch work items created by ""ResponderRita"", prioritize the tickets, update their status to ""Waiting on Customer"", archive completed tasks in ""ProjectG"" since ""2023-01-25"", and retrieve ""ResponderRita""'s workload to manage her queue.","var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = search_object_by_name(query=""ResponderRita"")
var_3 = assign_issues_to_user(issue_ids=var_1, user_id=var_2)
var_4 = fetch_user_created_work(user_id=var_2)
var_5 = prioritize_objects(objects=var_4)
var_6 = batch_update_task_status(task_ids=var_4, new_status=""Waiting on Customer"")
var_7 = archive_completed_tasks(project_id=""ProjectG"", completed_since=""2023-01-25"")
var_8 = retrieve_user_workload(user_id=var_2)","

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""
def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""
def assign_issues_to_user(issue_ids, user_id):
 """"""
 Assigns a list of issues to the specified user
 
 Parameters:
  issue_ids (list): A list of issue IDs that need to be assigned
  user_id (str): The user ID to whom the issues will be assigned
 
 Returns:
  None
 """"""
 ', '
 
 def fetch_user_created_work(user_id, type=None):
 """"""
 Retrieves work items created by a specific user
 
 Parameters:
  user_id (str): The ID of the user whose work items are to be retrieved
  type (list): Filters for work of the provided types, e.g., ['issue', 'ticket''']
 
 Returns:
  list: Work items created by the user
 """"""
 ', '
 
 def batch_update_task_status(task_ids, new_status):
 """"""
 Updates the status of multiple tasks in a batch operation
 
 Parameters:
  task_ids (list): A list of task IDs whose status needs updating
  new_status (str): The new status to apply to the tasks
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ', '
 
 def archive_completed_tasks(project_id, completed_since):
 """"""
 Archives tasks that are completed within the given project since the specified time
 
 Parameters:
  project_id (str): The ID of the project containing the tasks
  completed_since (str): Archive tasks completed after this timestamp
 
 Returns:
  int: Number of tasks archived
 """"""
 ', '
 
 def retrieve_user_workload(user_id):
 """"""
 Retrieves the current workload for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose workload is to be retrieved
 
 Returns:
  list: A list containing workload details
 """"""
 

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""
"
"Prioritize all tasks owned by user ""ManagerMike"", calculate their total cost, retrieve ""ManagerMike's"" permissions, summarize the tasks, and update their due dates before adding them to the current sprint.","var_1 = works_list(owned_by=[""ManagerMike""], type=[""task""])
var_2 = calculate_cost_of_tasks(task_ids=var_1)
var_3 = get_user_permissions(user_id=""ManagerMike"")
var_4 = summarize_objects(objects=var_1)
var_5 = prioritize_objects(objects=var_1)
var_6 = update_work_item_due_date(work_item_id=var_1[0], due_date=""2023-12-31"")
var_7 = get_sprint_id()
var_8 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_7)","def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""

 
 def calculate_expense_totals(expense_ids):
 """"""
 Calculates the total amount from a list of expense IDs
 
 Parameters:
  expense_ids (list): List of expense IDs to calculate the total amount
 
 Returns:
  float: The total amount of the expenses
 """"""
 ', '
 
 def get_user_permissions(user_id):
 """"""
 Returns a list of permissions for a specified user ID
 
 Parameters:
  user_id (str): The ID of the user whose permissions you want to retrieve
 
 Returns:
  list: User permissions
 """"""
 ', '
 
 def calculate_cost_of_tasks(task_ids):
 """"""
 Calculates the total cost for a list of task IDs
 
 Parameters:
  task_ids (list): A list of task IDs to calculate cost for
 
 Returns:
  float: Total cost of the tasks
 """"""
 ', '
 
 def update_work_item_due_date(work_item_id, due_date):
 """"""
 Updates the due date for the specified work item
 
 Parameters:
  work_item_id (str): The ID of the work item to be updated
  due_date (str): The new due date for the work item
 
 Returns:
  None: Indicates that the operation was executed without returning any value
 """"""
 ', '
 
 def retrieve_document_by_keyword(keyword):
 """"""
 Retrieves a document ID containing the specified keyword
 
 Parameters:
  keyword (str): The keyword to search for in the documents
 
 Returns:
  str: ID of the document containing the keyword
 """"""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Search for work items by the name ""BackendUpdate"", calculate their total expense, get the permissions of the user who created them, summarize the work items, prioritize them, and update their due dates.","var_1 = search_object_by_name(query=""BackendUpdate"")
var_2 = works_list(created_by=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = calculate_expense_totals(expense_ids=var_2)
var_4 = get_user_permissions(user_id=var_2[0][""created_by""])
var_5 = summarize_objects(objects=var_2)
var_6 = prioritize_objects(objects=var_2)
var_7 = update_work_item_due_date(work_item_id=var_2[0], due_date=""2023-12-31"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""


 
 def calculate_expense_totals(expense_ids):
 """"""
 Calculates the total amount from a list of expense IDs
 
 Parameters:
  expense_ids (list): List of expense IDs to calculate the total amount
 
 Returns:
  float: The total amount of the expenses
 """"""
 ', '
 
 def get_user_permissions(user_id):
 """"""
 Returns a list of permissions for a specified user ID
 
 Parameters:
  user_id (str): The ID of the user whose permissions you want to retrieve
 
 Returns:
  list: User permissions
 """"""
 ', '
 
 def calculate_cost_of_tasks(task_ids):
 """"""
 Calculates the total cost for a list of task IDs
 
 Parameters:
  task_ids (list): A list of task IDs to calculate cost for
 
 Returns:
  float: Total cost of the tasks
 """"""
 ', '
 
 def update_work_item_due_date(work_item_id, due_date):
 """"""
 Updates the due date for the specified work item
 
 Parameters:
  work_item_id (str): The ID of the work item to be updated
  due_date (str): The new due date for the work item
 
 Returns:
  None: Indicates that the operation was executed without returning any value
 """"""
 ', '
 
 def retrieve_document_by_keyword(keyword):
 """"""
 Retrieves a document ID containing the specified keyword
 
 Parameters:
  keyword (str): The keyword to search for in the documents
 
 Returns:
  str: ID of the document containing the keyword
 """"""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Search for an object by name ""CustomerXYZ"", use the ID to extract contact information, and get similar work items. Filter these work items by status ""completed"", prioritize them, and merge any duplicates before adding them to the current sprint. Retrieve the history of changes for the primary work item.","var_1 = search_object_by_name(query=""CustomerXYZ"")
var_2 = extract_contact_info(text_id=var_1, entity_type=""company"")
var_3 = get_similar_work_items(work_id=var_1)
var_4 = works_list(type=[""issue"", ""ticket"", ""task""], stage.name=[""completed""])
var_5 = prioritize_objects(objects=var_4)
var_6 = merge_duplicate_work_items(primary_work_id=var_5[0], duplicate_work_ids=var_5[1:])
var_7 = get_sprint_id()
var_8 = add_work_items_to_sprint(work_ids=[var_5[0]], sprint_id=var_7)
var_9 = get_work_item_history(work_id=var_5[0])","

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""
def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is 'active'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Use the ""who_am_i"" function to get the current user ID, list their permissions, and retrieve work items created by this user. Filter these work items by status ""on-hold"", extract contact information from related customer tickets, and get the work item history. Summarize the work items and prioritize them for the next team meeting.","var_1 = who_am_i()
var_2 = list_user_permissions(user_id=var_1)
var_3 = works_list(created_by=[var_1])
var_4 = works_list(type=[""issue"", ""ticket"", ""task""], stage.name=[""on-hold""])
var_5 = extract_contact_info(text_id=var_4, entity_type=""individual"")
var_6 = get_work_item_history(work_id=var_4)
var_7 = summarize_objects(objects=var_4)
var_8 = prioritize_objects(objects=var_4)","

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""
def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is 'active'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Create actionable tasks from the text of the latest team meeting, filter these tasks by status ""in-progress"", and extract contact information for any mentioned individuals. Prioritize the tasks, retrieve their history, and merge any duplicates. Add the primary task to the current sprint and list the permissions of the user who created the tasks.","var_1 = create_actionable_tasks_from_text(text=""latest team meeting"")
var_2 = works_list(type=[""task""], stage.name=[""in-progress""])
var_3 = extract_contact_info(text_id=var_2, entity_type=""individual"")
var_4 = prioritize_objects(objects=var_2)
var_5 = get_work_item_history(work_id=var_2)
var_6 = merge_duplicate_work_items(primary_work_id=var_4[0], duplicate_work_ids=var_4[1:])
var_7 = get_sprint_id()
var_8 = add_work_items_to_sprint(work_ids=[var_4[0]], sprint_id=var_7)
var_9 = list_user_permissions(user_id=var_1)","

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""
def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is 'active'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve work items owned by user ""LeadEngineer"", filter them by status ""review"", and extract contact information from the associated documentation. Get the work item history, summarize the items, and prioritize them. Merge any duplicates and add the primary work item to the current sprint. List the permissions of ""LeadEngineer"".","var_1 = search_object_by_name(query=""LeadEngineer"")
var_2 = works_list(owned_by=[var_1], stage.name=[""review""])
var_3 = extract_contact_info(text_id=var_2, entity_type=""individual"")
var_4 = get_work_item_history(work_id=var_2)
var_5 = summarize_objects(objects=var_2)
var_6 = prioritize_objects(objects=var_2)
var_7 = merge_duplicate_work_items(primary_work_id=var_6[0], duplicate_work_ids=var_6[1:])
var_8 = get_sprint_id()
var_9 = add_work_items_to_sprint(work_ids=[var_6[0]], sprint_id=var_8)
var_10 = list_user_permissions(user_id=var_1)","def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""


def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""
def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is 'active'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Get the ID of the current sprint and search for an object by name ""CriticalComponent"". Extract contact information from the associated vendor, filter related projects by status ""delayed"", and get the work item history. Summarize the work items, prioritize them, and merge any duplicates before adding them to the sprint.","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""CriticalComponent"")
var_3 = extract_contact_info(text_id=var_2, entity_type=""company"")
var_4 = filter_projects_by_status(project_ids=var_2, status=""delayed"")
var_5 = get_work_item_history(work_id=var_4)
var_6 = summarize_objects(objects=var_4)
var_7 = prioritize_objects(objects=var_4)
var_8 = merge_duplicate_work_items(primary_work_id=var_7[0], duplicate_work_ids=var_7[1:])
var_9 = add_work_items_to_sprint(work_ids=[var_7[0]], sprint_id=var_1)","

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is 'active'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Search for an object by name ""QuarterlyReport"", extract contact information from the report's references, and filter related work items by status ""archived"". Retrieve the history of changes for these work items, summarize them, and prioritize them. Merge any duplicates and add the primary work item to the current sprint. List the permissions of the user ""Analyst"".","var_1 = search_object_by_name(query=""QuarterlyReport"")
var_2 = extract_contact_info(text_id=var_1, entity_type=""company"")
var_3 = works_list(type=[""issue"", ""ticket"", ""task""], stage.name=[""archived""])
var_4 = get_work_item_history(work_id=var_3)
var_5 = summarize_objects(objects=var_3)
var_6 = prioritize_objects(objects=var_3)
var_7 = merge_duplicate_work_items(primary_work_id=var_6[0], duplicate_work_ids=var_6[1:])
var_8 = get_sprint_id()
var_9 = add_work_items_to_sprint(work_ids=[var_6[0]], sprint_id=var_8)
var_10 = list_user_permissions(user_id=""Analyst"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""
def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is 'active'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Identify the current user, list their permissions, and retrieve work items they are monitoring. Filter these work items by status ""active"", extract contact information from associated client profiles, and get the work item history. Summarize the work items, prioritize them, and merge any duplicates before adding them to the current sprint.","var_1 = who_am_i()
var_2 = list_user_permissions(user_id=var_1)
var_3 = works_list(owned_by=[var_1], stage.name=[""active""])
var_4 = extract_contact_info(text_id=var_3, entity_type=""individual"")
var_5 = get_work_item_history(work_id=var_3)
var_6 = summarize_objects(objects=var_3)
var_7 = prioritize_objects(objects=var_3)
var_8 = merge_duplicate_work_items(primary_work_id=var_7[0], duplicate_work_ids=var_7[1:])
var_9 = get_sprint_id()
var_10 = add_work_items_to_sprint(work_ids=[var_7[0]], sprint_id=var_9)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is 'active'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Create actionable tasks from the feedback text of ""ProductSurvey001"", filter these tasks by status ""new"", and extract contact information from survey respondents. Prioritize the tasks, retrieve their history, and list the permissions of the user ""FeedbackManager"". Merge any duplicates and add the primary task to the current sprint.","var_1 = create_actionable_tasks_from_text(text=""ProductSurvey001"")
var_2 = works_list(type=[""task""], stage.name=[""new""])
var_3 = extract_contact_info(text_id=var_2, entity_type=""individual"")
var_4 = prioritize_objects(objects=var_2)
var_5 = get_work_item_history(work_id=var_2)
var_6 = list_user_permissions(user_id=""FeedbackManager"")
var_7 = merge_duplicate_work_items(primary_work_id=var_4[0], duplicate_work_ids=var_4[1:])
var_8 = get_sprint_id()
var_9 = add_work_items_to_sprint(work_ids=[var_4[0]], sprint_id=var_8)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""
def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is 'active'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""
"
"Calculate the completion percentage of project ""PRJ-009"", find all tickets with the tag ""escalated"", filter for users in the ""Finance"" department, locate the user by email ""finance_director@company.com"", and add the work items they own to the current sprint for expedited handling.","var_1 = track_project_completion(project_id=""PRJ-009"")
var_2 = find_work_items_by_tag(type=""ticket"", tag=""escalated"")
var_3 = filter_users_by_department(department_id=""Finance"")
var_4 = find_user_by_email(email=""finance_director@company.com"")
var_5 = works_list(owned_by=[var_4])
var_6 = get_sprint_id()
var_7 = add_work_items_to_sprint(work_ids=var_5, sprint_id=var_6)","

def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


 
 def track_project_completion(project_id):
 """"""
 Tracks the completion percentage of a project based on completed tasks
 
 Parameters:
  project_id (str): The ID of the project to track
 
 Returns:
  float: Percentage of the project completed
 """"""
 ', '
 
 def find_work_items_by_tag(type, tag):
 """"""
 Finds work items of a certain type with a given tag
 
 Parameters:
  type (str): The type of the work items to filter by
  tag (str): The tag to filter the work items
 
 Returns:
  list: List of work items with the given tag
 """"""
 ', 'def filter_users_by_department(department_id=None, active_only=False):
 """"""
 Filters a list of users that belong to the specified department
 
 Parameters:
  department_id (str): The ID of the department to filter users
  active_only (bool): Filters for only active users if set to True
 
 Returns:
  list: Users in the specified department
 """"""
 ', '
 
 def find_user_by_email(email):
 """"""
 Finds a user in the system by their email address
 
 Parameters:
  email (str): The email address of the user to find
 
 Returns:
  str: ID of the user
 """"""
 ', '
 
 def list_recent_projects(user_id, days_back=30):
 """"""
 Lists all projects a user has worked on in the past number of days
 
 Parameters:
  user_id (str): The ID of the user
  days_back (int): The number of past days to look for projects. The default is '30'
 
 Returns:
  list: Project IDs that the user has worked on
 """"""
 

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Track the project completion for ""PRJ-010"", search for issues with the tag ""bug"", filter for active users in the ""IT"" department, find the user with the email ""it_support@company.com"", and prioritize the work items they have recently worked on for immediate action.","var_1 = track_project_completion(project_id=""PRJ-010"")
var_2 = find_work_items_by_tag(type=""issue"", tag=""bug"")
var_3 = filter_users_by_department(department_id=""IT"", active_only=True)
var_4 = find_user_by_email(email=""it_support@company.com"")
var_5 = list_recent_projects(user_id=var_4)
var_6 = prioritize_objects(objects=var_5)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


 
 def track_project_completion(project_id):
 """"""
 Tracks the completion percentage of a project based on completed tasks
 
 Parameters:
  project_id (str): The ID of the project to track
 
 Returns:
  float: Percentage of the project completed
 """"""
 ', '
 
 def find_work_items_by_tag(type, tag):
 """"""
 Finds work items of a certain type with a given tag
 
 Parameters:
  type (str): The type of the work items to filter by
  tag (str): The tag to filter the work items
 
 Returns:
  list: List of work items with the given tag
 """"""
 ', 'def filter_users_by_department(department_id=None, active_only=False):
 """"""
 Filters a list of users that belong to the specified department
 
 Parameters:
  department_id (str): The ID of the department to filter users
  active_only (bool): Filters for only active users if set to True
 
 Returns:
  list: Users in the specified department
 """"""
 ', '
 
 def find_user_by_email(email):
 """"""
 Finds a user in the system by their email address
 
 Parameters:
  email (str): The email address of the user to find
 
 Returns:
  str: ID of the user
 """"""
 ', '
 
 def list_recent_projects(user_id, days_back=30):
 """"""
 Lists all projects a user has worked on in the past number of days
 
 Parameters:
  user_id (str): The ID of the user
  days_back (int): The number of past days to look for projects. The default is '30'
 
 Returns:
  list: Project IDs that the user has worked on
 """"""
 

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Find the current sprint ID, then get all work items created by user ""DevLead"" that are in a status of ""In Progress"" or ""Under Review"", summarize these work items, and add them to the current sprint.","var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = search_object_by_name(query=""DevLead"")
var_4 = works_list(created_by=[var_3], stage.name=[""In Progress"", ""Under Review""])
var_5 = summarize_objects(objects=var_4)
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_2)","

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


 
 def validate_work_item_status(work_item_id, status_options):
 """"""
 Checks if the given work item has a status that is among the provided options
 
 Parameters:
  work_item_id (str): The ID of the work item to check
  status_options (list): A list of valid status options
 
 Returns:
  bool: True if status is valid, False otherwise
 """"""
 ', '
 
 def list_all_blocked_tickets():
 """"""
 Lists all tickets that are currently blocked
 
 Returns:
  list: Ticket IDs that are currently blocked
 """"""', '
 
 def get_user_contact_info(user_id):
 """"""
 Retrieves contact information for a user
 
 Parameters:
  user_id (str): The ID of the user whose contact information is requested
 
 Returns:
  str: The contact information of the user
 """"""
 ', '
 
 def calculate_progress(project_id):
 """"""
 Calculates the overall progress of a given project as a percentage
 
 Parameters:
  project_id (str): The ID of the project for which progress is being calculated
 
 Returns:
  float: The progress percentage of the project
 """"""
 ', '
 
 def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
 """"""
 Filters a list of ticket IDs based on a date range
 
 Parameters:
  ticket_ids (list): A list of ticket IDs to filter
  start_date (str): The start date for the range
  end_date (str, optional): The end date for the range, defaults to None
 
 Returns:
  list: Filtered list of ticket IDs
 """"""
 


def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Validate the status of work item ""TASK-456"" to ensure it's either ""Open"" or ""Blocked"", list all blocked tickets, and then prioritize and summarize any common items between the two lists.","var_1 = validate_work_item_status(work_item_id=""TASK-456"", status_options=[""Open"", ""Blocked""])
var_2 = list_all_blocked_tickets()
var_3 = filter_tickets_by_date(ticket_ids=var_2, start_date=""start_of_current_sprint"", end_date=""end_of_current_sprint"")
var_4 = prioritize_objects(objects=var_3)
var_5 = summarize_objects(objects=var_4)","def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


 
 def validate_work_item_status(work_item_id, status_options):
 """"""
 Checks if the given work item has a status that is among the provided options
 
 Parameters:
  work_item_id (str): The ID of the work item to check
  status_options (list): A list of valid status options
 
 Returns:
  bool: True if status is valid, False otherwise
 """"""
 ', '
 
 def list_all_blocked_tickets():
 """"""
 Lists all tickets that are currently blocked
 
 Returns:
  list: Ticket IDs that are currently blocked
 """"""', '
 
 def get_user_contact_info(user_id):
 """"""
 Retrieves contact information for a user
 
 Parameters:
  user_id (str): The ID of the user whose contact information is requested
 
 Returns:
  str: The contact information of the user
 """"""
 ', '
 
 def calculate_progress(project_id):
 """"""
 Calculates the overall progress of a given project as a percentage
 
 Parameters:
  project_id (str): The ID of the project for which progress is being calculated
 
 Returns:
  float: The progress percentage of the project
 """"""
 ', '
 
 def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
 """"""
 Filters a list of ticket IDs based on a date range
 
 Parameters:
  ticket_ids (list): A list of ticket IDs to filter
  start_date (str): The start date for the range
  end_date (str, optional): The end date for the range, defaults to None
 
 Returns:
  list: Filtered list of ticket IDs
 """"""
 

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Acquire the list of team ""TeamTheta"" members, search for all issues with priority ""p2"" created by these members, summarize the issues, prioritize them, and reassign the owner of one of the issues to another team member.","var_1 = get_team_member_list(team_id=""TeamTheta"")
var_2 = works_list(type=[""issue""], created_by=var_1, issue.priority=[""p2""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = reassign_work_item_owner(work_id=var_4[0], new_owner_id=var_1[1])","

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


 
 def find_team_members(team_id):
 """"""
 Returns a list of user IDs that are members of the specified team
 
 Parameters:
  team_id (str): The ID of the team
 
 Returns:
  list: User IDs of the team members
 """"""
 ', '
 
 def get_team_member_list(team_id):
 """"""
 Retrieves a list of team members for the specified team
 
 Parameters:
  team_id (str): The ID of the team
 
 Returns:
  list: List of team member IDs
 """"""
 ', '
 
 def remove_work_item_from_sprint(work_id, sprint_id):
 """"""
 Removes the specified work item from a sprint
 
 Parameters:
  work_id (str): The ID of the work item to be removed
  sprint_id (str): The ID of the sprint from which to remove the work item
 
 Returns:
  bool: True if the removal was successful, False otherwise
 """"""
 ', '
 
 def reassign_work_item_owner(work_id, new_owner_id):
 """"""
 Reassigns the owner of a work item to a new user
 
 Parameters:
  work_id (str): The ID of the work item to be reassigned
  new_owner_id (str): The user ID of the new owner
 
 Returns:
  bool: True if reassignment is successful, False otherwise
 """"""
 ', '
 
 def list_work_attachments(work_id):
 """"""
 Lists all attachments associated with a work item.
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: Attachment file IDs
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
"""""""
" For team ""TeamKappa"", get the team member IDs, find all tickets with severity ""medium"" associated with these members, summarize the tickets, prioritize them, and add one of the prioritized tickets to the current sprint.","var_1 = find_team_members(team_id=""TeamKappa"")
var_2 = works_list(type=[""ticket""], owned_by=var_1, ticket.severity=[""medium""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=[var_4[0]], sprint_id=var_5)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


 
 def find_team_members(team_id):
 """"""
 Returns a list of user IDs that are members of the specified team
 
 Parameters:
  team_id (str): The ID of the team
 
 Returns:
  list: User IDs of the team members
 """"""
 ', '
 
 def get_team_member_list(team_id):
 """"""
 Retrieves a list of team members for the specified team
 
 Parameters:
  team_id (str): The ID of the team
 
 Returns:
  list: List of team member IDs
 """"""
 ', '
 
 def remove_work_item_from_sprint(work_id, sprint_id):
 """"""
 Removes the specified work item from a sprint
 
 Parameters:
  work_id (str): The ID of the work item to be removed
  sprint_id (str): The ID of the sprint from which to remove the work item
 
 Returns:
  bool: True if the removal was successful, False otherwise
 """"""
 ', '
 
 def reassign_work_item_owner(work_id, new_owner_id):
 """"""
 Reassigns the owner of a work item to a new user
 
 Parameters:
  work_id (str): The ID of the work item to be reassigned
  new_owner_id (str): The user ID of the new owner
 
 Returns:
  bool: True if reassignment is successful, False otherwise
 """"""
 ', '
 
 def list_work_attachments(work_id):
 """"""
 Lists all attachments associated with a work item.
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: Attachment file IDs
 """"""
 

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Locate all tickets from the ""Email"" source channel, assign them to ""AgentAlex"", summarize the tickets, batch update their status to ""Closed"", archive completed tasks in ""ProjectD"" since ""2023-01-15"", and retrieve ""AgentAlex""'s workload for planning.","var_1 = works_list(ticket.source_channel=[""Email""], type=[""ticket""])
var_2 = search_object_by_name(query=""AgentAlex"")
var_3 = assign_issues_to_user(issue_ids=var_1, user_id=var_2)
var_4 = summarize_objects(objects=var_1)
var_5 = batch_update_task_status(task_ids=var_1, new_status=""Closed"")
var_6 = archive_completed_tasks(project_id=""ProjectD"", completed_since=""2023-01-15"")
var_7 = retrieve_user_workload(user_id=var_2)","

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def assign_issues_to_user(issue_ids, user_id):
 """"""
 Assigns a list of issues to the specified user
 
 Parameters:
  issue_ids (list): A list of issue IDs that need to be assigned
  user_id (str): The user ID to whom the issues will be assigned
 
 Returns:
  None
 """"""
 ', '
 
 def fetch_user_created_work(user_id, type=None):
 """"""
 Retrieves work items created by a specific user
 
 Parameters:
  user_id (str): The ID of the user whose work items are to be retrieved
  type (list): Filters for work of the provided types, e.g., ['issue', 'ticket''']
 
 Returns:
  list: Work items created by the user
 """"""
 ', '
 
 def batch_update_task_status(task_ids, new_status):
 """"""
 Updates the status of multiple tasks in a batch operation
 
 Parameters:
  task_ids (list): A list of task IDs whose status needs updating
  new_status (str): The new status to apply to the tasks
 
 Returns:
  bool: True if the update was successful, False otherwise
 """"""
 ', '
 
 def archive_completed_tasks(project_id, completed_since):
 """"""
 Archives tasks that are completed within the given project since the specified time
 
 Parameters:
  project_id (str): The ID of the project containing the tasks
  completed_since (str): Archive tasks completed after this timestamp
 
 Returns:
  int: Number of tasks archived
 """"""
 ', '
 
 def retrieve_user_workload(user_id):
 """"""
 Retrieves the current workload for the specified user
 
 Parameters:
  user_id (str): The ID of the user whose workload is to be retrieved
 
 Returns:
  list: A list containing workload details
 """"""
 

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve similar work items to ""TASK-987"", filter these by status ""pending approval"", and extract contact information from the client's communication. Prioritize the work items, get their history, and list the permissions of the user assigned to these tasks. Merge any duplicates and add the primary work item to the current sprint.","var_1 = get_similar_work_items(work_id=""TASK-987"")
var_2 = works_list(type=[""task""], stage.name=[""pending approval""])
var_3 = extract_contact_info(text_id=var_2, entity_type=""individual"")
var_4 = prioritize_objects(objects=var_2)
var_5 = get_work_item_history(work_id=var_2)
var_6 = list_user_permissions(user_id=var_2)
var_7 = merge_duplicate_work_items(primary_work_id=var_4[0], duplicate_work_ids=var_4[1:])
var_8 = get_sprint_id()
var_9 = add_work_items_to_sprint(work_ids=[var_4[0]], sprint_id=var_8)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""
def filter_projects_by_status(project_ids, status=""active""):
 """"""
 Filters a list of project IDs by their status
 
 Parameters:
  project_ids (list): A list of project IDs to filter
  status (str): The status to filter by, default is 'active'
 
 Returns:
  list: Project IDs matching the status
 """"""
 ', '
 
 def extract_contact_info(text_id, entity_type):
 """"""
 Extracts contact information from a text source based on a given entity type
 
 Parameters:
  text_id (str): The ID of the text source from which to extract contact information
  entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'
 
 Returns:
  list: Extracted contact information
 """"""', '
 
 def get_work_item_history(work_id):
 """"""
 Retrieves the history of changes for a given work item
 
 Parameters:
  work_id (str): The ID of the work item
 
 Returns:
  list: A chronological list of changes made to the work item
 """"""
 ', '
 
 def list_user_permissions(user_id):
 """"""
 Lists all the permissions that a user has within the system
 
 Parameters:
  user_id (str): The ID of the user for whom permissions are being listed
 
 Returns:
  list: A list of permissions that the user possesses
 """"""
 ', '
 
 def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
 """"""
 Merges duplicate work items into the primary work item
 
 Parameters:
  primary_work_id (str): The ID of the primary work item
  duplicate_work_ids (list): List of IDs of duplicate work items to be merged
 
 Returns:
  bool: True if merge was successful, otherwise False
 """"""
 

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Archive all completed tasks in project ""PRJ-9801"" since ""2023-01-01"", then check if part ""PT-500"" is available in inventory with a minimum quantity of 20.","var_1 = archive_completed_tasks(project_id=""PRJ-9801"", completed_since=""2023-01-01"")
var_2 = check_inventory_availability(part_id=""PT-500"", minimum_quantity=20)","

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
 project_id (str): The ID of the project containing the tasks
 completed_since (str): Archive tasks completed after this timestamp

Returns:
 int: Number of tasks archived
""""""
', '

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
 part_id (str): The ID of the part to check in inventory
 minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
 bool: True if the minimum quantity is available; otherwise False
""""""
', '

def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
 contact_id (str): The ID of the contact to update
 new_email (str, optional): The new email address; defaults to None
 new_phone (str, optional): The new phone number; defaults to None

Returns:
 bool: True if the update was successful; otherwise False
""""""
', '

def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
 user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
 list: List of completed task IDs
""""""
', '

def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be calculated

Returns:
 float: The calculated workload value
""""""
', '

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
 task_id (str): The ID of the task to be converted

Returns:
 str: The ID of the newly created ticket
""""""
', '

def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
 object_ids (list): A list of object IDs to filter
 object_type (str): The type of objects to filter for

Returns:
 list: Filtered object IDs matching the specified type
""""""
', '
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
 user_id (str): The ID of the user whose status is to be updated
 status (str): The new status to apply to the user account

Returns:
 str: updated User Id
""""""
', '

def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
 data_id (str): The ID of the data to be validated
 schema_id (str): The ID of the schema to validate the data against

Returns:
 bool: True if data is consistent, False otherwise
""""""
', '

def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: List of team member IDs
""""""



def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
"""""""
"Archive tickets reported by user ""User123"" that are older than ""2022-01-01"", then estimate the duration for the task ""TASK-456"" with a complexity level of ""high"".","var_1 = search_object_by_name(query=""User123"")
var_2 = archive_old_tickets(older_than_date=""2022-01-01"", active_status=False)
var_3 = estimate_task_duration(task_id=""TASK-456"", complexity_level=""high"")","

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
 older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
 active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
 str: ID of tickets archived
""""""
', '

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task will be assigned

Returns:
 bool: True if assignment was successful, otherwise False
""""""
', '

def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
 title (str): The title of the new ticket
 description (str): A detailed description of the issue or request
 reported_by (str): The ID of the user reporting the ticket

Returns:
 str: The ID of the newly created ticket
""""""
', '

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
 event_type (str): The type of event to log
 description (str): A brief description of the event
 user_id (str): The ID of the user involved in the event, if applicable

Returns:
 str: The ID of the logged event
""""""
', '

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
 user_id (str): The ID of the user whose workload is to be retrieved

Returns:
 list: A list containing workload details
""""""
', '

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
 task_id (str): The ID of the task
 complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
 float: Estimated duration in hours
""""""
', '

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
 user_id (str): The ID of the user whose tasks are to be listed
 completed (bool): If True, only completed tasks are returned

Returns:
 list: A list of tasks assigned to the user
""""""
', '

def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
 str: The status of the ticket
""""""
', '

def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
 prefix (str): A prefix for the identifier
 use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
 str: The generated unique identifier
""""""

```', '

def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be determined

Returns:
 int: The number of tasks assigned to the user
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Archive tickets older than ""2021-01-01"" that are still active, and log the event with a description ""Archived active tickets from 2021 and earlier"".","var_1 = archive_old_tickets(older_than_date=""2021-01-01"", active_status=True)
var_2 = log_system_event(event_type=""archive"", description=""Archived active tickets from 2021 and earlier"", user_id=None)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
 older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
 active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
 str: ID of tickets archived
""""""
', 'def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
 issue_ids (list): A list of issue IDs to be linked to the project
 project_id (str): The ID of the project to which the issues should be linked

Returns:
 bool: Status of the linking action
""""""
', '

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
 object_id (str): The ID of the object to check

Returns:
 bool: True if the object exists, otherwise False
""""""
', '

def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: A chronological list of changes made to the work item
""""""
', '

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
 task_ids (list): A list of task IDs to filter
 due_date (str): The due date to filter tasks by

Returns:
 list: List of task IDs that have the specified due date
""""""
', '

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
 user_id (str): The ID of the user for whom to calculate the workload

Returns:
 int: The total number of open work items
""""""
', '

def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be determined

Returns:
 int: The number of tasks assigned to the user
""""""
', '

def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
 object_id (str): The ID of the object for which history is requested

Returns:
 list: A list of changes made to the object
""""""
', '

def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
 user_ids (list): A list of user IDs to be removed from the group
 group_id (str): The ID of the group from which the users should be removed

Returns:
 bool: Status of the removal
""""""
', '

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
 event_type (str): The type of event to log
 description (str): A brief description of the event
 user_id (str): The ID of the user involved in the event, if applicable

Returns:
 str: The ID of the logged event
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""


def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve all tickets reported by user ""User123"", assign them to employee ""Emp456"", and then create a report for the current sprint including these tickets.","
var_1 = fetch_user_created_work(user_id=""User123"", work_type=""ticket"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
var_4 = assign_tickets_to_user(ticket_ids=var_1, user_id=""Emp456"")
var_5 = create_report_for_sprint(sprint_id=var_2, report_type=""Ticket Report"")","

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""
', '

def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact information is requested

Returns:
 str: The contact information of the user
""""""
', '

def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
 user_id (str): The ID of the user to check for overdue tasks

Returns:
 None
""""""
', 'def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task is assigned

Returns:
 None
""""""
', '

def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: User IDs of the team members
""""""
', 'def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
 ticket_ids (list): A list of ticket IDs to be assigned
 user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
 None
""""""
', '

def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
 title (str): The title of the new ticket
 description (str): A detailed description of the issue or request
 reported_by (str): The ID of the user reporting the ticket

Returns:
 str: The ID of the newly created ticket
""""""
', '

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
 data_point_ids (list): List of data point IDs to validate

Returns:
 list: Validation results with status (True or False) for each data point
""""""
', '

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
 task_ids (list): A list of task IDs to filter
 due_date (str): The due date to filter tasks by

Returns:
 list: List of task IDs that have the specified due date
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""



def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check the inventory for part ""ENG-456"" and assign all tasks related to this part to user ""TechGuru"".","var_1 = check_inventory_availability(part_id=""ENG-456"")
var_2 = works_list(applies_to_part=[""ENG-456""], type=[""task""])
var_3 = find_user_by_email(email=""TechGuru"")
var_4 = assign_tasks_to_user(task_ids=var_2, user_id=var_3)","

def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
 task_ids (list): List of task IDs to be assigned
 user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""
', '

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
 part_id (str): The ID of the part to check in inventory
 minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
 bool: True if the minimum quantity is available; otherwise False
""""""
', '

def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
 task_id (str): The ID of the task to be marked as complete

Returns:
 bool: True if marked successfully, False otherwise
""""""
', 'def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task is assigned

Returns:
 None
""""""
', '

def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
 contact_id (str): The ID of the contact to update
 new_email (str, optional): The new email address; defaults to None
 new_phone (str, optional): The new phone number; defaults to None

Returns:
 bool: True if the update was successful; otherwise False
""""""
', 'def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
 issue_id (str): The ID of the issue to be updated
 new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
 start_date (str): The start date for the filter range (format: YYYY-MM-DD)
 end_date (str): The end date for the filter range (format: YYYY-MM-DD)
 work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
 list: Work items in the specified date range
""""""
', '

def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
 email (str): The email address of the user to find

Returns:
 str: ID of the user
""""""
', '

def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
 task_ids (list): A list of task IDs whose status needs updating
 new_status (str): The new status to apply to the tasks

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
 work_item_id (str): The ID of the work item

Returns:
 float: The number of hours until the deadline
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Assign all high-severity tickets to user ""TechGuru"" and calculate the estimated completion date for project ""ProjAlpha"".","
var_1 = search_object_by_name(query=""TechGuru"")
var_2 = works_list(type=[""ticket""], ticket.severity=[""high""])
var_3 = assign_tasks_to_user(task_ids=var_2, user_id=var_1)
var_4 = search_object_by_name(query=""ProjAlpha"")
var_5 = calculate_estimated_completion(project_id=var_4)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
 task_ids (list): A list of task IDs whose status needs updating
 new_status (str): The new status to apply to the tasks

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
 task_ids (list): List of task IDs to be assigned
 user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""
', '

def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
 project_id (str): The ID of the project to be analyzed

Returns:
 str: Estimated date of completion
""""""
', 'def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
 issue_ids (list): A list of issue IDs that need to be assigned
 user_id (str): The user ID to whom the issues will be assigned

Returns:
 None
""""""
', '

def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
 user_id (str): The ID of the user to be removed
 project_id (str): The ID of the project from which the user is to be removed

Returns:
 bool: True if the user is successfully removed, False otherwise
""""""', '

def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 new_status (str): The new status to set for the work item
""""""
', '

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
 expense_ids (list): List of expense IDs to calculate the total amount

Returns:
 float: The total amount of the expenses
""""""
', '

def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: A chronological list of changes made to the work item
""""""
', '

def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
 user_ids (list): List of user IDs whose roles should be updated
 new_role (str): The new role to assign

Returns:
 int: Number of users successfully updated
""""""
', '

def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
 text_id (str): The ID of the text source from which to extract contact information
 entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
 list: Extracted contact information
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the current workload for user ""EngineerEmma"", list all of her tasks that are not completed, and generate a report including a summary.","
var_1 = who_am_i()
var_2 = retrieve_user_workload(user_id=""EngineerEmma"")
var_3 = list_user_tasks(user_id=""EngineerEmma"", completed=False)
var_4 = generate_report(report_type=""workload"", subject_id=""EngineerEmma"", include_summary=True)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
 task_ids (list): A list of task IDs whose status needs updating
 new_status (str): The new status to apply to the tasks

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
 user_id (str): The ID of the user whose workload is to be retrieved

Returns:
 list: A list containing workload details
""""""
', '

def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
 archive_id (str): The ID of the archive from which to retrieve documents
 keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
 list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""', '

def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
 project_id (str): The ID of the project to validate

Returns:
 bool: True if completed, False otherwise
""""""
', '

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
 work_id (str): The ID of the work item to calculate the estimated time

Returns:
 float: Estimated completion time in hours
""""""
', '

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
 user_id (str): The ID of the user whose tasks are to be listed
 completed (bool): If True, only completed tasks are returned

Returns:
 list: A list of tasks assigned to the user
""""""
', '

def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
 report_type (str): The type of report to generate
 subject_id (str): The ID of the subject for the report
 include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
 str: The ID of the generated report
""""""
', '

def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
 dataset_id (str): The ID of the dataset from which to generate the report
 report_type (str): The type of report to generate, default is 'summary'

Returns:
 str: The ID of the generated report
""""""
', '

def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
 part_id (str): The ID of the part to check for availability

Returns:
 bool: True if the part is available, False otherwise
""""""
', '

def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
 object_ids (list): A list of object IDs to filter
 object_type (str): The type of objects to filter for

Returns:
 list: Filtered object IDs matching the specified type
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""
"
"Calculate the budget allocation for project ""PRJ-789"", then find and summarize all tasks within this project's budget limit.","var_1 = calculate_budget_allocation(project_id=""PRJ-789"", cost_limit=1000000.0)
var_2 = works_list(type=[""task""], limit=var_1)
var_3 = summarize_objects(objects=var_2)","def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
 project_id (str): The ID of the project for which the budget is calculated
 cost_limit (float): The cost limit for the project's budget

Returns:
 float: The amount allocated to the project budget
""""""
', '

def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
 user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
 str: URL of the user's avatar image
""""""
', '

def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
 task_id (str): The ID of the task on which time is spent
 hours_spent (float): The number of hours spent on the task

Returns:
 bool: Status of the time tracking
""""""
', '

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
 object_id (str): The ID of the object to be removed
 sprint_id (str): The ID of the project from which the object should be removed

Returns:
 list: Returns the updated list of sprint objects
""""""
', '

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
 task_id (str): The ID of the task for which to estimate completion time

Returns:
 float: The estimated number of hours to complete the task
""""""
', '

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', '

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
 ticket_id (str): The ID of the ticket that will be linked with related tickets
 related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
 bool: True if the linking is successful, False otherwise
""""""
', '

def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
 project_id (str): The ID of the project containing the tasks
 completed_since (str): Archive tasks completed after this timestamp

Returns:
 int: Number of tasks archived
""""""
', '

def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
 work_type (str): The type of the work items to filter by
 tag (str): The tag to filter the work items

Returns:
 list: List of work items with the given tag
""""""
', '

def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
 user_ids (list): List of user IDs whose roles should be updated
 new_role (str): The new role to assign

Returns:
 int: Number of users successfully updated
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the remaining budget for project ""PROJ-001"" and archive all completed tasks in that project since ""2023-01-01"".","var_1 = search_object_by_name(query=""PROJ-001"")
var_2 = calculate_budget_remaining(budget_id=var_1)
var_3 = archive_completed_tasks(project_id=var_1, completed_since=""2023-01-01"")","

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
 budget_id (str): The ID of the budget to calculate

Returns:
 float: The amount of remaining budget
""""""
', '

def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
 title (str): The title of the new ticket
 description (str): A detailed description of the issue or request
 reported_by (str): The ID of the user reporting the ticket

Returns:
 str: The ID of the newly created ticket
""""""
', '

def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
 object_id (str): The ID of the object for which history is requested

Returns:
 list: A list of changes made to the object
""""""
', '

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
 task_id (str): The ID of the task to be converted
 parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
 bool: True if the conversion was successful, False otherwise
""""""
', '

def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
 project_id (str): The ID of the project containing the tasks
 completed_since (str): Archive tasks completed after this timestamp

Returns:
 int: Number of tasks archived
""""""
', '

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
 object_id (str): The ID of the object to check

Returns:
 bool: True if the object exists, otherwise False
""""""
', '

def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
 primary_task_id (str): The ID of the primary task which remains after the merge
 duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
 None
""""""
', '

def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', '

def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
 contact_id (str): The ID of the contact to update
 new_email (str, optional): The new email address; defaults to None
 new_phone (str, optional): The new phone number; defaults to None

Returns:
 bool: True if the update was successful; otherwise False
""""""
', '

def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
 primary_record_id (str): The ID of the primary record to keep
 duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
 bool: True if the merge was successful; otherwise False
""""""



def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""
def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the remaining budget for budget ID ""BUDGET-456"", list all department members from department ""HR-789"", and summarize their work items.","
var_1 = calculate_budget_remaining(budget_id=""BUDGET-456"")
var_2 = list_department_members(department_id=""HR-789"")
var_3 = works_list(owned_by=var_2)
var_4 = summarize_objects(objects=var_3)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""



def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
 budget_id (str): The ID of the budget to calculate

Returns:
 float: The amount of remaining budget
""""""
', '

def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
 project_id (str): The ID of the project for which the timeline is requested

Returns:
 list: Key milestones and dates for the project timeline
""""""
', '

def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
 object_id (str): The ID of the primary object
 related_object_id (str): The ID of the object to relate to the primary

Returns:
 bool: True if the objects were successfully linked, False otherwise
""""""
', '

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
 department_id (str): The ID of the department to list members for

Returns:
 list: User IDs of all the members in the department
""""""
', '

def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
 ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
 bool: True if the ticket was marked as resolved, False otherwise
""""""
', '

def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
 user_id (str): The ID of the user to be removed
 project_id (str): The ID of the project from which the user is to be removed

Returns:
 bool: True if the user is successfully removed, False otherwise
""""""', '

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""
', '

def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
 project_id (str): The ID of the project to track

Returns:
 float: Percentage of the project completed
""""""
', '

def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
 list: Ticket IDs that are currently blocked
""""""', 'def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
 sprint_id (str): The ID of the sprint for workload calculation

Returns:
 float: Total workload in hours
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the estimated completion time for work items owned by ""TeamLead"" and generate a summary report for these items.","var_1 = works_list(owned_by=[""TeamLead""])
var_2 = calculate_estimate_completion_time(work_id=var_1)
var_3 = generate_summary_report(object_ids=var_1)","

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
 work_id (str): The ID of the work item to calculate the estimated time

Returns:
 float: Estimated completion time in hours
""""""
', '

def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
 object_ids (list): A list of object IDs

Returns:
 str: The ID of the generated report
""""""
', '

def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
 user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
 list: User permissions
""""""
', '

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
 text (str): The text from which keywords are to be extracted

Returns:
 list: A list of extracted keywords
""""""
', '

def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
 object_id (str): The ID of the object to be removed from the archive

Returns:
 bool: True if the object was successfully removed, False otherwise
""""""
', '

def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
 activity_description (str): A brief description of the activity being logged
 user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
 bool: True if the activity was logged successfully; otherwise False
""""""
', 'def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task is assigned

Returns:
 None
""""""
', '

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
 issue_id (str): The ID of the issue to be updated
 solution_text (str): The description of the solution to apply to the issue

Returns:
 None
""""""
', '
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
 user_id (str): The ID of the user whose status is to be updated
 status (str): The new status to apply to the user account

Returns:
 str: updated User Id
""""""
', '

def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
 list: Ticket IDs that are currently blocked
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""


def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the project completion rate for project ""PRJ-456"" and list all recent projects the user ""TeamLead"" has worked on in the past 45 days.","var_1 = calculate_project_completion_rate(project_id=""PRJ-456"")
var_2 = list_recent_projects(user_id=""TeamLead"", days_back=45)","

def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""
def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', '

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
 primary_work_id (str): The ID of the primary work item
 duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
 bool: True if merge was successful, otherwise False
""""""
', '

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
 object_id (str): The ID of the object to remove from inventory

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""
', '

def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
 work_id (str): The ID of the work item for which the estimation is to be made

Returns:
 float: Estimated hours required to complete the work item
""""""
', '

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 float: Estimated effort in hours
""""""
', '

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""
', '

def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
 user_id (str): The ID of the user to get activities for
 limit (int): The maximum number of activity log entries to return

Returns:
 list: Recent activity log entries
""""""
', '

def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
 user_ids (list): List of user IDs whose roles should be updated
 new_role (str): The new role to assign

Returns:
 int: Number of users successfully updated
""""""
', '

def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
 user_id (str): The ID of the user
 days_back (int): The number of past days to look for projects. The default is '30'

Returns:
 list: Project IDs that the user has worked on
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Fetch tasks assigned to user ""QAEngineer"" including completed ones, calculate the project completion rate for project ""PROJ-42"", and log a system event with the event type ""TaskFetch"" and a description ""Fetched tasks for QAEngineer including completed"".","var_1 = find_user_by_email(email=""QAEngineer"")
var_2 = fetch_user_tasks(user_id=var_1, include_completed=True)
var_3 = calculate_project_completion_rate(project_id=""PROJ-42"")
var_4 = log_system_event(event_type=""TaskFetch"", description=""Fetched tasks for QAEngineer including completed"")","

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""

def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""
', '

def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
 ticket_id (str): The ID of the ticket to be updated
 new_status (str): The new status to update the ticket with

Returns:
 bool: True if the update was successful, otherwise False
""""""
', '

def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
 user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
 str: URL of the user's avatar image
""""""
', 'def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
 issue_ids (list): A list of issue IDs that need to be assigned
 user_id (str): The user ID to whom the issues will be assigned

Returns:
 None
""""""
', '

def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
 ticket_ids (list): A list of ticket IDs to filter
 start_date (str): The start date for the range
 end_date (str, optional): The end date for the range, defaults to None

Returns:
 list: Filtered list of ticket IDs
""""""
', '

def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
 email (str): The email address of the user to find

Returns:
 str: ID of the user
""""""
', '

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
 event_type (str): The type of event to log
 description (str): A brief description of the event
 user_id (str): The ID of the user involved in the event, if applicable

Returns:
 str: The ID of the logged event
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""
', '

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
 work_id (str): The ID of the work item to check

Returns:
 bool: True if the work item is complete, False if it lacks information
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
"""""""
Calculate the time until the deadline for all high-severity tickets and update their due dates to the end of the current week if the time until the deadline is less than 48 hours.,"var_1 = works_list(type=[""ticket""], ticket.severity=[""high""])
var_2 = calculate_time_until_deadline(work_item_id=var_1)
var_3 = update_work_item_due_date(work_item_id=var_1, due_date=""end of the current week"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
 work_item_id (str): The ID of the work item

Returns:
 float: The number of hours until the deadline
""""""
', '

def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
 work_id (str): The ID of the work item for which duration is to be calculated

Returns:
 float: The total duration in hours
""""""
', '

def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
 user_id (str): The ID of the user to check for overdue tasks

Returns:
 None
""""""
', '

def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
 sprint_id (str): The ID of the sprint for which to generate the report

Returns:
 str: The ID of the generated report
""""""
', '

def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
 task_id (str): The ID of the task to be marked as complete

Returns:
 bool: True if marked successfully, False otherwise
""""""
', '

def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', '

def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
 user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
 list: List of completed task IDs
""""""
', '

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 due_date (str): The new due date for the work item

Returns:
 None: Indicates that the operation was executed without returning any value
""""""
', '

def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
 text_id (str): The ID of the text source from which to extract contact information
 entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
 list: Extracted contact information
""""""', '

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
 feature_id (str): The ID of the feature to toggle access
 user_id (str): The ID of the user whose access will be toggled
 enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
 bool: The resulting access status
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check the time until the deadline for work items owned by ""TeamLead"", summarize those work items, and log this activity for the user ""AdminUser"".","var_1 = who_am_i()
var_2 = works_list(owned_by=[""TeamLead""])
var_3 = calculate_time_until_deadline(work_item_id=var_2)
var_4 = summarize_objects(objects=var_2)
var_5 = search_object_by_name(query=""AdminUser"")
var_6 = log_user_activity(user_id=var_5, activity_description=""Checked deadline for work items and summarized them."")","

def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
 work_item_id (str): The ID of the work item

Returns:
 float: The number of hours until the deadline
""""""
', '

def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
 user_id (str): The ID of the user for whom permissions are being listed

Returns:
 list: A list of permissions that the user possesses
""""""
', '

def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
 user_id (str): The ID of the user whose activity is being logged
 activity_description (str): A description of the activity

Returns:
 bool: True if the logging was successful, False otherwise
""""""
', '

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
 ticket_id (str): The ID of the ticket that will be linked with related tickets
 related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
 bool: True if the linking is successful, False otherwise
""""""
', '

def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
 sprint_id (str): The ID of the ticket

Returns:
 list: A list of changes made to the sprint
""""""
', '

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
 group_id (str): The ID of the group

Returns:
 list: User IDs belonging to the group
""""""
', '

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
 object_id (str): The ID of the object to remove from inventory

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
 user_id (str): The ID of the user whose permissions need to be checked
 required_permissions (list): A list of permissions to check against the user's permissions

Returns:
 bool: True if the user has all the required permissions, False otherwise
""""""
', '

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
 report_type (str): The type of report to generate
 data_set_id (str): The ID of the data set to be used for the report

Returns:
 str: A report data string or ID depending on internal implementation
""""""
', '

def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
 object_id (str): The ID of the object for which history is requested

Returns:
 list: A list of changes made to the object
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the estimated effort for work items owned by user ""TeamLead42"", list their completed tasks, and generate a progress report for project ""PRJ-9087"".","var_1 = find_user_by_email(email=""TeamLead42"")
var_2 = works_list(owned_by=[var_1])
var_3 = calculate_estimated_effort(work_id=var_2[0])
var_4 = list_completed_tasks_by_user(user_id=var_1)
var_5 = generate_progress_report(project_id=""PRJ-9087"")","

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
 project_id (str): The ID of the project to calculate work for

Returns:
 float: Estimated hours of work left
""""""
', '

def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
 user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
 list: List of completed task IDs
""""""
', '

def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
 task_ids (list): A list of task IDs whose status needs updating
 new_status (str): The new status to apply to the tasks

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: List of team member IDs
""""""
', '

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
 group_id (str): The ID of the group

Returns:
 list: User IDs belonging to the group
""""""
', '

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 float: Estimated effort in hours
""""""
', '

def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
 project_id (str): The ID of the project to summarize

Returns:
 str: A summary report of the project
""""""
', '

def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
 email (str): The email address of the user to find

Returns:
 str: ID of the user
""""""
', '

def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
 str: The status of the ticket
""""""
', '

def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which to generate the report

Returns:
 str: A string summary of the project's progress report
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the estimated hours of work left for project ""PRJ-789"", generate a performance report for the current sprint, and summarize the work items that are of type ""task"" with a severity of ""high"".","var_1 = calculate_work_left(project_id=""PRJ-789"")
var_2 = get_sprint_id()
var_3 = generate_report_for_sprint(sprint_id=var_2)
var_4 = works_list(type=[""task""], ticket.severity=[""high""])
var_5 = summarize_objects(objects=var_4)","

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""


def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
 project_id (str): The ID of the project to calculate work for

Returns:
 float: Estimated hours of work left
""""""
', '

def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
 ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
 bool: True if the ticket was marked as resolved, False otherwise
""""""
', '

def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
 task_ids (list): A list of task IDs whose status needs updating
 new_status (str): The new status to apply to the tasks

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
 work_item_id (str): The ID of the work item to update
 new_stage (str): The new stage to which the work item should be moved

Returns:
 bool: True if the stage is successfully updated, False otherwise
""""""', '

def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
 user_id (str): The ID of the user for whom permissions are being listed

Returns:
 list: A list of permissions that the user possesses
""""""
', '

def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
 sprint_id (str): The ID of the sprint for which to generate the report

Returns:
 str: The ID of the generated report
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""
', '

def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be calculated

Returns:
 float: The calculated workload value
""""""
', '

def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
 report_template_id (str): The ID of the report template to use
 data_source_id (str): The ID of the data source

Returns:
 str: Generated report
""""""
', '

def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
 object_ids (list): A list of object IDs

Returns:
 str: The ID of the generated report
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check the availability of part ""ENG-456"" and schedule an urgent meeting with the user ""InventoryManager"" to discuss restocking.","var_1 = check_availability_of_part(part_id=""ENG-456"")
var_2 = search_object_by_name(query=""InventoryManager"")
var_3 = schedule_meeting_with_user(user_id=var_2, urgent=True)","

def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""


def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""


def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""


def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""


def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
 part_id (str): The ID of the part to check for availability

Returns:
 bool: True if the part is available, False otherwise
""""""
', '

def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
 user_id (str): The ID of the user with whom to schedule a meeting
 duration (int): Duration of the meeting in minutes, default is '30'
 urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
 str: The ID of the scheduled meeting
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""
', '

def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
 project_id (str): The ID of the project to be analyzed

Returns:
 str: Estimated date of completion
""""""
', '

def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
 work_item_id (str): The ID of the work item to update
 new_stage (str): The new stage to which the work item should be moved

Returns:
 bool: True if the stage is successfully updated, False otherwise
""""""', '

def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
 report_template_id (str): The ID of the report template to use
 data_source_id (str): The ID of the data source

Returns:
 str: Generated report
""""""
', '

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
 primary_work_id (str): The ID of the primary work item
 duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
 bool: True if merge was successful, otherwise False
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""
', '

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
 work_id (str): The ID of the work item to calculate the estimated time

Returns:
 float: Estimated completion time in hours
""""""
', '

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
 task_id (str): The ID of the task
 complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
 float: Estimated duration in hours
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check if inventory has at least 10 units of part ""ABC-123"", log the event, and return a list of work items related to that part if available.","var_1 = check_inventory_availability(part_id=""ABC-123"", minimum_quantity=10)
var_2 = log_system_event(event_type=""inventory_check"", description=""Checked inventory for part ABC-123, minimum quantity 10"", user_id=None)
var_3 = works_list(applies_to_part=[""ABC-123""])","

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
 part_id (str): The ID of the part to check in inventory
 minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
 bool: True if the minimum quantity is available; otherwise False
""""""
', '

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
 event_type (str): The type of event to log
 description (str): A brief description of the event
 user_id (str): The ID of the user involved in the event, if applicable

Returns:
 str: The ID of the logged event
""""""
', 'def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
 project_ids (list): A list of project IDs to filter
 status (str): The status to filter by, default is 'active'

Returns:
 list: Project IDs matching the status
""""""
', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""
', '

def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
 user_id (str): The ID of the user whose permissions need to be checked
 required_permissions (list): A list of permissions to check against the user's permissions

Returns:
 bool: True if the user has all the required permissions, False otherwise
""""""
', '

def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
 work_item_id (str): The ID of the work item to check
 status_options (list): A list of valid status options

Returns:
 bool: True if status is valid, False otherwise
""""""
', '

def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
 ticket_ids (list): A list of ticket IDs to filter
 start_date (str): The start date for the range
 end_date (str, optional): The end date for the range, defaults to None

Returns:
 list: Filtered list of ticket IDs
""""""
', '

def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
 object_ids (list): A list of object IDs to filter
 object_type (str): The type of objects to filter for

Returns:
 list: Filtered object IDs matching the specified type
""""""
', '

def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
 project_id (str): The ID of the project for which the timeline is requested

Returns:
 list: Key milestones and dates for the project timeline
""""""
', '

def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
 object_id (str): The ID of the object for which history is requested

Returns:
 list: A list of changes made to the object
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check the status of ticket ""TICKET-001"", then find and summarize any similar work items.","var_1 = check_ticket_status(ticket_id=""TICKET-001"")
var_2 = get_similar_work_items(work_id=""TICKET-001"")
var_3 = summarize_objects(objects=var_2)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
 str: The status of the ticket
""""""
', '

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
 data_point_ids (list): List of data point IDs to validate

Returns:
 list: Validation results with status (True or False) for each data point
""""""
', '

def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
 work_id (str): The ID of the work item for which duration is to be calculated

Returns:
 float: The total duration in hours
""""""
', '

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
 report_type (str): The type of report to generate
 data_set_id (str): The ID of the data set to be used for the report

Returns:
 str: A report data string or ID depending on internal implementation
""""""
', '

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
 project_id (str): The ID of the project to calculate work for

Returns:
 float: Estimated hours of work left
""""""
', '

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
 department_id (str): The ID of the department to list members for

Returns:
 list: User IDs of all the members in the department
""""""
', '

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
 task_id (str): The ID of the task for which to estimate completion time

Returns:
 float: The estimated number of hours to complete the task
""""""
', '

def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
 primary_ticket_id (str): The ID of the primary ticket that remains
 duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
 None
""""""
', 'def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
 sprint_id (str): The ID of the sprint for workload calculation

Returns:
 float: Total workload in hours
""""""
', '

def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
 user_id (str): The ID of the user whose completed items are being requested

Returns:
 list: Completed items by the user
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Generate a report for the current sprint including all high-severity tickets, then assign the prioritized list to the user with the email ""tech.lead@company.com"".","var_1 = get_sprint_id()
var_2 = works_list(type=[""ticket""], ticket.severity=[""high""], limit=50)
var_3 = create_report_for_sprint(sprint_id=var_1, report_type=""high-severity-tickets"")
var_4 = prioritize_objects(objects=var_2)
var_5 = find_user_by_email(email=""tech.lead@company.com"")
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_1)
var_7 = assign_task_to_user(task_id=var_3, user_id=var_5)","

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
 title (str): The title of the new ticket
 description (str): A detailed description of the issue or request
 reported_by (str): The ID of the user reporting the ticket

Returns:
 str: The ID of the newly created ticket
""""""
', 'def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task is assigned

Returns:
 None
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""
', '

def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', '

def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
 data_id (str): The ID of the data to be validated
 schema_id (str): The ID of the schema to validate the data against

Returns:
 bool: True if data is consistent, False otherwise
""""""
', '

def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
 task_ids (list): List of task IDs to filter
 completed (bool): The completion status to filter by. Default is 'True'

Returns:
 list: List of task IDs that match the completion status
""""""
', '

def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
 primary_object_id (str): The ID of the primary object
 duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
 bool: True if the merge was successful, False otherwise
""""""
', '

def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
 email (str): The email address of the user to find

Returns:
 str: ID of the user
""""""
', 'def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
 department_id (str): The ID of the department to filter users
 active_only (bool): Filters for only active users if set to True

Returns:
 list: Users in the specified department
""""""
', '

def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
 user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
 str: URL of the user's avatar image
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
"""""""
"Archive completed tasks for project ""PRJ-789"" since ""2023-01-01"", retrieve permissions for user ""QAEngineer"", and summarize the archived tasks.","var_1 = archive_completed_tasks(project_id=""PRJ-789"", completed_since=""2023-01-01"")
var_2 = retrieve_user_permissions(user_id=""QAEngineer"")
var_3 = list_completed_items_by_user(user_id=""QAEngineer"")
var_4 = summarize_objects(objects=var_3)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
 user_id (str): The ID of the user whose account is to be deactivated
 reason (str): The reason for deactivating the account

Returns:
 bool: True if the account was successfully deactivated; otherwise False
""""""
', '

def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
 object_ids (list): List of object IDs to delete

Returns:
 bool: True if objects were successfully deleted, False otherwise
""""""
', '

def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
 user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
 list: The list of permissions for the user
""""""
', '

def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which to generate the report

Returns:
 str: A string summary of the project's progress report
""""""
', '

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
 task_id (str): The ID of the task
 complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
 float: Estimated duration in hours
""""""
', '

def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
 project_id (str): The ID of the project containing the tasks
 completed_since (str): Archive tasks completed after this timestamp

Returns:
 int: Number of tasks archived
""""""
', '

def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
 user_id (str): The ID of the user whose completed items are being requested

Returns:
 list: Completed items by the user
""""""
', '

def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
 skill_name (str): The name of the skill to filter by
 minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
 list: A list of user IDs that match the criteria
""""""
', '

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
 work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
 int: The number of work items successfully archived
""""""
', '

def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
 primary_record_id (str): The ID of the primary record to keep
 duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
 bool: True if the merge was successful; otherwise False
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the history of changes for the fisrt work item with severity ""high"" and generate a report for them.","var_1 = works_list(ticket.severity=[""high""])
var_2 = get_work_item_history(work_id=var_1[0])
var_3 = generate_work_report(work_ids=var_1)","def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""


def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""

def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""
def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""



def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
 user_id (str): The ID of the user whose account is to be deactivated
 reason (str): The reason for deactivating the account

Returns:
 bool: True if the account was successfully deactivated; otherwise False
""""""
', '

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', '

def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: A chronological list of changes made to the work item
""""""
', '

def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
 activity_description (str): A brief description of the activity being logged
 user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
 bool: True if the activity was logged successfully; otherwise False
""""""
', '

def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
 project_id (str): The ID of the project for which the timeline is requested

Returns:
 list: Key milestones and dates for the project timeline
""""""
', '

def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
 project_id (str): The ID of the project to which resources are allocated
 resource_ids (list): A list of resource IDs to allocate to the project

Returns:
 bool: True if resources could be allocated, False otherwise
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""
', '

def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
 project_id (str): The ID of the project to track

Returns:
 float: Percentage of the project completed
""""""
', '

def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
 prefix (str): A prefix for the identifier
 use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
 str: The generated unique identifier
""""""

```', '

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
 primary_work_id (str): The ID of the primary work item
 duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
 bool: True if merge was successful, otherwise False
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Estimate the duration for task ""TASK-321"" with high complexity, then assign it to employee ""EMP234"" and calculate the project completion rate for project ""PRJ-456"".","var_1 = estimate_task_duration(task_id=""TASK-321"", complexity_level=""high"")
var_2 = assign_tasks_to_employee(task_ids=[""TASK-321""], employee_id=""EMP234"")
var_3 = calculate_project_completion_rate(project_id=""PRJ-456"")","

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
 task_id (str): The ID of the task
 complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
 float: Estimated duration in hours
""""""
', '

def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', '

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
 task_id (str): The ID of the task for which dependencies are requested

Returns:
 list: Dependency task IDs
""""""
', '

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""
', '

def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
 task_id (str): The ID of the task to be marked as complete

Returns:
 bool: True if marked successfully, False otherwise
""""""
', '

def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
 work_item_id (str): The ID of the work item to check
 status_options (list): A list of valid status options

Returns:
 bool: True if status is valid, False otherwise
""""""
', '

def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
 user_ids (list): List of user IDs whose roles should be updated
 new_role (str): The new role to assign

Returns:
 int: Number of users successfully updated
""""""
', '

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
 task_id (str): The ID of the task for which to estimate completion time

Returns:
 float: The estimated number of hours to complete the task
""""""
', '

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
 expense_ids (list): List of expense IDs to calculate the total amount

Returns:
 float: The total amount of the expenses
""""""
', 'def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
 issue_id (str): The ID of the issue to be updated
 new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
 bool: True if the update was successful, False otherwise
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Estimate time for task ""TASK-456"" with 3 hours, then retrieve and list the skills of the user ""User123"" who is assigned to it.","var_1 = estimate_time_for_task(task_id=""TASK-456"", estimation_hours=3.0)
var_2 = retrieve_user_contact_info(user_id=""User123"")
var_3 = list_user_skills(user_id=""User123"")","

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
 task_id (str): The ID of the task to be updated with an estimated time
 estimation_hours (float): The estimated time in hours to complete the task

Returns:
 None
""""""
', '

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact info is requested

Returns:
 str: Contact information of the user
""""""
', '

def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
 ticket_id (str): The ID of the ticket to be updated
 new_status (str): The new status to update the ticket with

Returns:
 bool: True if the update was successful, otherwise False
""""""
', '

def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
 contact_id (str): The ID of the contact to update
 new_phone (str): The new phone number for the contact, default is 'None'
 new_email (str): The new email address for the contact, default is 'None'

Returns:
 bool: Status of the update operation
""""""
', '

def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
 user_id (str): The ID of the user whose skills are being queried

Returns:
 list: The skills of the user
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""
', 'def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
 sprint_id (str): The ID of the sprint for workload calculation

Returns:
 float: Total workload in hours
""""""
', '

def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
 object_id (str): The ID of the primary object
 related_object_id (str): The ID of the object to relate to the primary

Returns:
 bool: True if the objects were successfully linked, False otherwise
""""""
', '

def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
 user_id (str): The ID of the user whose activities are to be listed
 limit (int): The maximum number of recent activities to return

Returns:
 list: Recent activities of the user
""""""
', 'def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
 issue_ids (list): A list of issue IDs that need to be assigned
 user_id (str): The user ID to whom the issues will be assigned

Returns:
 None
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
"""""""
"Calculate the workload for user ""User123"", generate a summary report for their tasks, and extend the current sprint end date to ""2023-05-15"".","var_1 = calculate_user_workload(user_id=""User123"")
var_2 = works_list(owned_by=[""User123""], type=[""task""])
var_3 = generate_summary_report(object_ids=var_2)
var_4 = get_sprint_id()
var_5 = extend_sprint_end_date(sprint_id=var_4, new_end_date=""2023-05-15"")","

def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
 sprint_id (str): The ID of the sprint to extend
 new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
 bool: True if the sprint end date was extended, False otherwise
""""""
', '

def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be calculated

Returns:
 float: The calculated workload value
""""""
', '

def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
 object_ids (list): A list of object IDs

Returns:
 str: The ID of the generated report
""""""
', '

def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
 object_ids (list): A list of object IDs to filter
 object_type (str): The type of objects to filter for

Returns:
 list: Filtered object IDs matching the specified type
""""""
', '

def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
 record_ids (list): List of record IDs to filter
 start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
 end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
 list: Filtered record IDs
""""""
', '

def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
 project_id (str): The ID of the project to validate

Returns:
 bool: True if completed, False otherwise
""""""
', '

def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
 project_id (str): The ID of the project to summarize

Returns:
 str: A summary report of the project
""""""
', '

def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
 ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
 bool: True if the ticket was marked as resolved, False otherwise
""""""
', 'def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
 ticket_id (str): The ID of the ticket to be assigned
 user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""
', '

def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: List of team member IDs
""""""



def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""


def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Extract keywords from the comments on ticket ""TICKET-456"", then search for work items related to these keywords and summarize the findings.","var_1 = get_ticket_comments(ticket_id=""TICKET-456"")
var_2 = extract_keywords_from_text(text=var_1)
var_3 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=var_2)
var_4 = summarize_objects(objects=var_3)","

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
 text (str): The text from which keywords are to be extracted

Returns:
 list: A list of extracted keywords
""""""
', '

def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact information is requested

Returns:
 str: The contact information of the user
""""""
', '

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
 list: Comments associated with the ticket
""""""
', '

def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
 project_id (str): The ID of the project to which resources are allocated
 resource_ids (list): A list of resource IDs to allocate to the project

Returns:
 bool: True if resources could be allocated, False otherwise
""""""
', '

def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
 ticket_id (str): The ID of the ticket to estimate time for

Returns:
 float: Estimated time in hours to resolve the ticket
""""""
', '
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
 user_id (str): The ID of the user whose status is to be updated
 status (str): The new status to apply to the user account

Returns:
 str: updated User Id
""""""
', '

def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
 object_id (str): The ID of the object to be removed from the archive

Returns:
 bool: True if the object was successfully removed, False otherwise
""""""
', '

def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
 user_id (str): The ID of the user whose account is to be deactivated
 reason (str): The reason for deactivating the account

Returns:
 bool: True if the account was successfully deactivated; otherwise False
""""""
', '

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
 work_id (str): The ID of the work item to estimate cost for
 cost_per_hour (float): The cost per hour. Default is '100'

Returns:
 float: Estimated cost
""""""', '

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
 feature_id (str): The ID of the feature to toggle access
 user_id (str): The ID of the user whose access will be toggled
 enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
 bool: The resulting access status
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Fetch the history of ticket ""TICKET-001"", calculate the project completion rate for project ""PRJ-90210"", and then summarize the related work items.","var_1 = fetch_ticket_history(ticket_id=""TICKET-001"")
var_2 = calculate_project_completion_rate(project_id=""PRJ-90210"")
var_3 = works_list(type=[""ticket""], ticket.rev_org=[var_1])
var_4 = summarize_objects(objects=var_3)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
 ticket_id (str): The ID of the ticket for which the history is requested
 history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
 list: A list of history records for the ticket
""""""
', '

def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', '

def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
 sprint_id (str): The ID of the sprint for which to generate the report

Returns:
 str: The ID of the generated report
""""""
', '

def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
 user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
 list: User permissions
""""""
', '

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
 user_id (str): The ID of the user whose tasks are to be listed
 completed (bool): If True, only completed tasks are returned

Returns:
 list: A list of tasks assigned to the user
""""""
', '

def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
 activity_description (str): A brief description of the activity being logged
 user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
 bool: True if the activity was logged successfully; otherwise False
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""
', '

def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
 task_id (str): The ID of the task to be updated with an estimated time
 estimation_hours (float): The estimated time in hours to complete the task

Returns:
 None
""""""
', '

def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be calculated

Returns:
 float: The calculated workload value
""""""
', 'def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
 work_item_ids (list): A list of work item IDs for which due dates are required
 urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
 list: Due dates for the specified work items
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Fetch work items created by user with ID ""USR-789"", filter for those of type ""issue"", and check if the inventory has at least 10 parts ""PART-456"" available. If so, mark the first work item as a duplicate of ""ISSUE-999"".","var_1 = fetch_user_created_work(user_id=""USR-789"", work_type=[""issue""])
var_2 = check_inventory_availability(part_id=""PART-456"", minimum_quantity=10)
var_3 = mark_item_as_duplicated(work_item_id=var_1[0], duplicate_of_id=""ISSUE-999"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
 user_id (str): The ID of the user whose work items are to be retrieved
 work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket''']

Returns:
 list: Work items created by the user
""""""
', '

def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
 object_ids (list): List of object IDs to delete

Returns:
 bool: True if objects were successfully deleted, False otherwise
""""""
', '

def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
 organization_id (str): The ID of the organization to filter contacts
 active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
 list: Contacts associated with the organization
""""""
', '

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
 start_date (str): The start date for the filter range (format: YYYY-MM-DD)
 end_date (str): The end date for the filter range (format: YYYY-MM-DD)
 work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
 list: Work items in the specified date range
""""""
', '

def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
 work_item_id (str): The ID of the work item that is a duplicate
 duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
 bool: True if the item is successfully marked, False otherwise
""""""
', '

def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
 user_id (str): The ID of the user to be removed
 project_id (str): The ID of the project from which the user is to be removed

Returns:
 bool: True if the user is successfully removed, False otherwise
""""""', '

def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
 contact_id (str): The ID of the contact to update
 new_phone (str): The new phone number for the contact, default is 'None'
 new_email (str): The new email address for the contact, default is 'None'

Returns:
 bool: Status of the update operation
""""""
', '

def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact information is requested

Returns:
 str: The contact information of the user
""""""
', 'def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
 start_date (str): The start date of the desired date range
 end_date (str): The end date of the desired date range
 work_type (list): Optional filter for type of work

Returns:
 list: Work items within the specified date range
""""""
', '

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
 part_id (str): The ID of the part to check in inventory
 minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
 bool: True if the minimum quantity is available; otherwise False
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve a list of users skilled in ""Python"" with a proficiency of 4, assign them tasks related to the ""Backend"" project, and calculate the estimated completion date for the project.","var_1 = filter_users_by_skill(skill_name=""Python"", minimum_proficiency=4)
var_2 = search_object_by_name(query=""Backend"")
var_3 = works_list(type=[""task""], applies_to_part=[var_2])
var_4 = assign_tasks_to_user(task_ids=var_3, user_id=var_1)
var_5 = calculate_estimated_completion(project_id=var_2)","
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
 skill_name (str): The name of the skill to filter by
 minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
 list: A list of user IDs that match the criteria
""""""
', '

def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
 task_ids (list): List of task IDs to be assigned
 user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""
', '

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
 work_id (str): The ID of the work item to check

Returns:
 bool: True if the work item is complete, False if it lacks information
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""
', '

def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
 ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
 bool: True if the ticket was marked as resolved, False otherwise
""""""
', '

def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
 project_id (str): The ID of the project to be analyzed

Returns:
 str: Estimated date of completion
""""""
', '

def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
 primary_task_id (str): The ID of the primary task which remains after the merge
 duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
 None
""""""
', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""
', '

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
 project_id (str): The ID of the project to calculate work for

Returns:
 float: Estimated hours of work left
""""""
', '

def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: A chronological list of changes made to the work item
""""""
"
"Filter users by the skill ""Python Programming"" with a minimum proficiency of 4, fetch their contact information, and then retrieve and summarize all work items created by these users.","var_1 = filter_users_by_skill(skill_name=""Python Programming"", minimum_proficiency=4)
var_2 = get_user_contact_info(user_id=var_1[0])
var_3 = works_list(created_by=var_1)
var_4 = summarize_objects(objects=var_3)","def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""


def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
 skill_name (str): The name of the skill to filter by
 minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
 list: A list of user IDs that match the criteria
""""""
', '

def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
 object_id (str): The ID of the object to remove

Returns:
 None
""""""
', '

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
 project_id (str): The ID of the project to calculate work for

Returns:
 float: Estimated hours of work left
""""""
', '

def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact information is requested

Returns:
 str: The contact information of the user
""""""
', '

def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
 primary_task_id (str): The ID of the primary task which remains after the merge
 duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
 None
""""""
', '

def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: A chronological list of changes made to the work item
""""""
', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""
', '

def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', '

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
 group_id (str): The ID of the group

Returns:
 list: User IDs belonging to the group
""""""
', '

def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
 str: The status of the ticket
""""""



def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Filter users by the skill ""Project Management"" and for those with proficiency level 4 or higher, retrieve their completed tasks and summarize them.","var_1 = filter_users_by_skill(skill_name=""Project Management"", minimum_proficiency=4)
var_2 = list_completed_tasks_by_user(user_id=var_1[0])
var_3 = summarize_objects(objects=var_2)","

def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: User IDs of the team members
""""""
', '

def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
 skill_name (str): The name of the skill to filter by
 minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
 list: A list of user IDs that match the criteria
""""""
', '

def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
 ticket_ids (list): A list of ticket IDs to filter
 start_date (str): The start date for the range
 end_date (str, optional): The end date for the range, defaults to None

Returns:
 list: Filtered list of ticket IDs
""""""
', '

def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
 object_id (str): The ID of the primary object
 related_object_id (str): The ID of the object to relate to the primary

Returns:
 bool: True if the objects were successfully linked, False otherwise
""""""
', '

def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
 user_id (str): The ID of the user to check for overdue tasks

Returns:
 None
""""""
', 'def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
 issue_id (str): The ID of the issue to be updated
 new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
 user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
 list: List of completed task IDs
""""""
', '

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
 project_id (str): The ID of the project to calculate work for

Returns:
 float: Estimated hours of work left
""""""
', '

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
 primary_work_id (str): The ID of the primary work item
 duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
 bool: True if merge was successful, otherwise False
""""""
', '

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
 task_id (str): The ID of the task for which to estimate completion time

Returns:
 float: The estimated number of hours to complete the task
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Find the user ID for ""TeamLead@example.com"", fetch their assigned tasks, including completed ones, and summarize the tasks for a progress report.","var_1 = find_user_by_email(email=""TeamLead@example.com"")
var_2 = fetch_user_tasks(user_id=var_1, include_completed=True)
var_3 = summarize_objects(objects=var_2)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""



def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
 email (str): The email address of the user to find

Returns:
 str: ID of the user
""""""
', '
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
 user_id (str): The ID of the user whose status is to be updated
 status (str): The new status to apply to the user account

Returns:
 str: updated User Id
""""""
', '

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
 object_id (str): The ID of the object to remove from inventory

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""
', '

def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
 primary_record_id (str): The ID of the primary record to keep
 duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
 bool: True if the merge was successful; otherwise False
""""""
', '

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
 work_id (str): The ID of the work item to check

Returns:
 bool: True if the work item is complete, False if it lacks information
""""""
', '

def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
 contact_id (str): The ID of the contact to update
 new_email (str, optional): The new email address; defaults to None
 new_phone (str, optional): The new phone number; defaults to None

Returns:
 bool: True if the update was successful; otherwise False
""""""
', '

def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: User IDs of the team members
""""""
', '

def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which to generate the report

Returns:
 str: A string summary of the project's progress report
""""""
', '

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task will be assigned

Returns:
 bool: True if assignment was successful, otherwise False
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
"""""""
"Retrieve all tasks assigned to user ""ERP"" that are completed, calculate their workload, and then summarize the tasks.","
var_1 = search_object_by_name(query=""ERP"")
var_2 = list_user_tasks(user_id=var_1, completed=True)
var_3 = calculate_user_workload(user_id=var_1)
var_4 = summarize_objects(objects=var_2)","

def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
 work_type (str): The type of the work items to filter by
 tag (str): The tag to filter the work items

Returns:
 list: List of work items with the given tag
""""""
', '

def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
 user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
 list: User permissions
""""""
', '

def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
 work_id (str): The ID of the work item to be removed
 sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
 user_id (str): The ID of the user whose tasks are to be listed
 completed (bool): If True, only completed tasks are returned

Returns:
 list: A list of tasks assigned to the user
""""""
', '

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""
', '

def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
 organization_id (str): The ID of the organization to filter contacts
 active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
 list: Contacts associated with the organization
""""""
', '

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 due_date (str): The new due date for the work item

Returns:
 None: Indicates that the operation was executed without returning any value
""""""
', '

def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be calculated

Returns:
 float: The calculated workload value
""""""
', '

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
 task_id (str): The ID of the task
 complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
 float: Estimated duration in hours
""""""
', '

def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
 user_id (str): The ID of the user
 days_back (int): The number of past days to look for projects. The default is '30'

Returns:
 list: Project IDs that the user has worked on
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Find all tickets with severity ""blocker"" that are in the ""Development"" stage, merge any duplicates, and then generate a summary report.","
var_1 = works_list(type=[""ticket""], ticket.severity=[""blocker""], stage.name=[""Development""])
var_2 = prioritize_objects(objects=var_1)
var_3 = merge_duplicate_work_items(primary_work_id=var_2[0], duplicate_work_ids=var_2[1:])
var_4 = summarize_objects(objects=[var_2[0]])","

def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
 work_type (str): The type of the work items to filter by
 tag (str): The tag to filter the work items

Returns:
 list: List of work items with the given tag
""""""
', '

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
 primary_work_id (str): The ID of the primary work item
 duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
 bool: True if merge was successful, otherwise False
""""""
', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
 ticket_id (str): The ID of the ticket where the merged note will be added
 note_ids (list): List of note IDs that will be merged into the ticket
 updated_by (str): The ID of the user performing the merge

Returns:
 str: ID of the updated ticket note
""""""
', '

def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
 record_ids (list): List of record IDs to filter
 start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
 end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
 list: Filtered record IDs
""""""
', '

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which the progress report is needed
 report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
 str: The generated progress report
""""""
', '

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
 work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
 int: The number of work items successfully archived
""""""
', '

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
 department_id (str): The ID of the department to list members for

Returns:
 list: User IDs of all the members in the department
""""""
', '

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
 work_id (str): The ID of the work item to be reassigned
 new_owner_id (str): The user ID of the new owner

Returns:
 bool: True if reassignment is successful, False otherwise
""""""
', '

def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
 object_ids (list): A list of object IDs to filter
 object_type (str): The type of objects to filter for

Returns:
 list: Filtered object IDs matching the specified type
""""""
', '

def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
 keyword (str): The keyword to search for in the documents

Returns:
 str: ID of the document containing the keyword
""""""
def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""


def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Generate a progress report for project ""PRJ-009"" by summarizing all high severity tickets linked to it and calculating the total cost of associated tasks.","
var_1 = works_list(type=[""ticket""], ticket.severity=[""high""], issue.rev_orgs=[""PRJ-009""])
var_2 = summarize_objects(objects=var_1)
var_3 = calculate_cost_of_tasks(task_ids=var_1)
var_4 = generate_progress_report(project_id=""PRJ-009"")","

def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which to generate the report

Returns:
 str: A string summary of the project's progress report
""""""
', '

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
 user_id (str): The ID of the user
 object_id (str): The ID of the object to check permission for

Returns:
 bool: True if the user has permission, False otherwise
""""""
', 'def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
 issue_ids (list): A list of issue IDs to be linked to the project
 project_id (str): The ID of the project to which the issues should be linked

Returns:
 bool: Status of the linking action
""""""
', '

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""
', '

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
 ticket_id (str): The ID of the ticket that will be linked with related tickets
 related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
 bool: True if the linking is successful, False otherwise
""""""
', '

def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
 keyword (str): The keyword to search for in the documents

Returns:
 str: ID of the document containing the keyword
""""""', '

def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
 task_ids (list): A list of task IDs whose status needs updating
 new_status (str): The new status to apply to the tasks

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
 text (str): The text from which keywords are to be extracted

Returns:
 list: A list of extracted keywords
""""""
', '

def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
 task_ids (list): A list of task IDs to calculate cost for

Returns:
 float: Total cost of the tasks
""""""
', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""



def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the work items created by user ""MAY"" that are marked as ""blocker"" severity, summarize these items, and validate their completeness.","var_1 = search_object_by_name(query=""MAY"")
var_2 = works_list(created_by=[var_1], ticket.severity=[""blocker""], type=[""ticket"", ""issue"", ""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = validate_work_item_completeness(work_id=var_2[0])","

def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which to generate the report

Returns:
 str: A string summary of the project's progress report
""""""
', '

def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
 user_id (str): The ID of the user whose work items are to be retrieved
 work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket''']

Returns:
 list: Work items created by the user
""""""
', '

def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
 work_item_id (str): The ID of the work item to check
 status_options (list): A list of valid status options

Returns:
 bool: True if status is valid, False otherwise
""""""
', '

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
 work_id (str): The ID of the work item to check

Returns:
 bool: True if the work item is complete, False if it lacks information
""""""
', '

def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
 contact_id (str): The ID of the contact to update
 new_phone (str): The new phone number for the contact, default is 'None'
 new_email (str): The new email address for the contact, default is 'None'

Returns:
 bool: Status of the update operation
""""""
', '

def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
 object_ids (list): A list of object IDs to filter
 object_type (str): The type of objects to filter for

Returns:
 list: Filtered object IDs matching the specified type
""""""
', '

def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: A chronological list of changes made to the work item
""""""
', '

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 float: Estimated effort in hours
""""""
', '

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
 object_id (str): The ID of the object to check

Returns:
 bool: True if the object exists, otherwise False
""""""
', '

def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
 data_id (str): The ID of the data to be validated
 schema_id (str): The ID of the schema to validate the data against

Returns:
 bool: True if data is consistent, False otherwise
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Generate a progress report for project ""PRJ-456"" and check if user ""AnalystAnna"" has permission to access it.","var_1 = generate_progress_report(project_id=""PRJ-456"")
var_2 = who_am_i()
var_3 = check_object_permission(user_id=""AnalystAnna"", object_id=var_1)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which to generate the report

Returns:
 str: A string summary of the project's progress report
""""""
', '

def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
 primary_object_id (str): The ID of the primary object
 duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
 bool: True if the merge was successful, False otherwise
""""""
', '

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
 user_id (str): The ID of the user
 object_id (str): The ID of the object to check permission for

Returns:
 bool: True if the user has permission, False otherwise
""""""
', '

def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
 ticket_id (str): The ID of the ticket to be marked for review
 reviewer_id (str): The ID of the user who should review the ticket

Returns:
 None
""""""
', '

def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: Attachment file IDs
""""""
', '

def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
 user_id (str): The ID of the user with whom to schedule a meeting
 duration (int): Duration of the meeting in minutes, default is '30'
 urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
 str: The ID of the scheduled meeting
""""""
', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""
', '

def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
 report_template_id (str): The ID of the report template to use
 data_source_id (str): The ID of the data source

Returns:
 str: Generated report
""""""
', '

def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 new_status (str): The new status to set for the work item
""""""
', '

def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
 user_id (str): The ID of the user whose account is to be deactivated
 reason (str): The reason for deactivating the account

Returns:
 bool: True if the account was successfully deactivated; otherwise False
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""


def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the comments from ticket ""TICKET-001"", generate a summary report for these comments, and then calculate the project completion rate for project ""PROJ-42"".","var_1 = get_ticket_comments(ticket_id=""TICKET-001"")
var_2 = generate_summary_report(object_ids=var_1)
var_3 = calculate_project_completion_rate(project_id=""PROJ-42"")","

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""
', '

def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
 user_id (str): The ID of the user whose account is to be deactivated
 reason (str): The reason for deactivating the account

Returns:
 bool: True if the account was successfully deactivated; otherwise False
""""""
', '

def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
 object_ids (list): A list of object IDs

Returns:
 str: The ID of the generated report
""""""
', '

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
 list: Comments associated with the ticket
""""""
', '

def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
 user_id (str): The ID of the user whose activity is being logged
 activity_description (str): A description of the activity

Returns:
 bool: True if the logging was successful, False otherwise
""""""
', '

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
 object_id (str): The ID of the object to be removed
 sprint_id (str): The ID of the project from which the object should be removed

Returns:
 list: Returns the updated list of sprint objects
""""""
', '

def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
 user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
 list: The list of permissions for the user
""""""
', '

def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', '

def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
 project_id (str): The ID of the project to validate

Returns:
 bool: True if completed, False otherwise
""""""
', '

def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be determined

Returns:
 int: The number of tasks assigned to the user
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Estimate the completion time for work items owned by user ""EngineerEmma"" and generate a progress report for the current sprint.","var_1 = who_am_i()
var_2 = works_list(owned_by=[""EngineerEmma""], type=[""issue"", ""ticket"", ""task""])
var_3 = get_sprint_id()
var_4 = generate_progress_report(project_id=var_3)
var_5 = estimate_completion_time(task_id=var_2[0]) # Assuming var_2[0] is a task ID from the list of work items. If var_2 contains multiple items, similar lines would be added for each.","def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""


def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
 dataset_id (str): The ID of the dataset from which to generate the report
 report_type (str): The type of report to generate, default is 'summary'

Returns:
 str: The ID of the generated report
""""""
', '

def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
 work_id (str): The ID of the work item for which duration is to be calculated

Returns:
 float: The total duration in hours
""""""
', '

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
 task_id (str): The ID of the task for which to estimate completion time

Returns:
 float: The estimated number of hours to complete the task
""""""
', '

def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
 user_id (str): The ID of the user whose activity is being logged
 activity_description (str): A description of the activity

Returns:
 bool: True if the logging was successful, False otherwise
""""""
', '

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
 work_id (str): The ID of the work item to estimate cost for
 cost_per_hour (float): The cost per hour. Default is '100'

Returns:
 float: Estimated cost
""""""', '

def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
 object_id (str): The ID of the object to remove

Returns:
 None
""""""
', '

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which the progress report is needed
 report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
 str: The generated progress report
""""""
', '

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""
', '

def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
 work_item_id (str): The ID of the work item to check
 status_options (list): A list of valid status options

Returns:
 bool: True if status is valid, False otherwise
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""


def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check the availability of part ""ENG-456"", validate the completion of project ""PRJ-789"", and then return a list of work items related to part ""ENG-456"" with the issue priority set to P2.","var_1 = check_availability_of_part(part_id=""ENG-456"")
var_2 = validate_project_completion(project_id=""PRJ-789"")
var_3 = works_list(applies_to_part=[""ENG-456""], issue.priority=[""p2""], type=[""issue""])","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
 report_template_id (str): The ID of the report template to use
 data_source_id (str): The ID of the data source

Returns:
 str: Generated report
""""""
', '

def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
 part_id (str): The ID of the part to check for availability

Returns:
 bool: True if the part is available, False otherwise
""""""
', '

def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
 project_id (str): The ID of the project to validate

Returns:
 bool: True if completed, False otherwise
""""""
', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
 ticket_id (str): The ID of the ticket where the merged note will be added
 note_ids (list): List of note IDs that will be merged into the ticket
 updated_by (str): The ID of the user performing the merge

Returns:
 str: ID of the updated ticket note
""""""
', 'def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
 ticket_ids (list): A list of ticket IDs to be assigned
 user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
 None
""""""
', '

def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
 work_item_id (str): The ID of the work item that is a duplicate
 duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
 bool: True if the item is successfully marked, False otherwise
""""""
', '

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
 list: Comments associated with the ticket
""""""
', 'def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task is assigned

Returns:
 None
""""""
', '

def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
 contact_id (str): The ID of the contact to update
 new_email (str, optional): The new email address; defaults to None
 new_phone (str, optional): The new phone number; defaults to None

Returns:
 bool: True if the update was successful; otherwise False
""""""
', '

def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
 user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
 list: The list of permissions for the user
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the ID of the current sprint, filter all high severity tickets within it, and calculate the total cost.","var_1 = get_sprint_id()
var_2 = works_list(type=[""ticket""], ticket.severity=[""high""], stage.name=[var_1])
var_3 = filter_objects_by_type(object_ids=var_2, object_type=""ticket"")
var_4 = calculate_cost_of_tasks(task_ids=var_3)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
 report_template_id (str): The ID of the report template to use
 data_source_id (str): The ID of the data source

Returns:
 str: Generated report
""""""
', '

def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
 object_ids (list): A list of object IDs to filter
 object_type (str): The type of objects to filter for

Returns:
 list: Filtered object IDs matching the specified type
""""""
', '

def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
 task_ids (list): List of task IDs to be assigned
 user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""
', '

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
 object_id (str): The ID of the object to be removed
 sprint_id (str): The ID of the project from which the object should be removed

Returns:
 list: Returns the updated list of sprint objects
""""""
', '

def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: User IDs of the team members
""""""
', '

def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
 task_ids (list): A list of task IDs to calculate cost for

Returns:
 float: Total cost of the tasks
""""""
', '

def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 new_status (str): The new status to set for the work item
""""""
', '

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
 report_type (str): The type of report to generate
 data_set_id (str): The ID of the data set to be used for the report

Returns:
 str: A report data string or ID depending on internal implementation
""""""
', '

def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
 contact_id (str): The ID of the contact to update
 new_email (str, optional): The new email address; defaults to None
 new_phone (str, optional): The new phone number; defaults to None

Returns:
 bool: True if the update was successful; otherwise False
""""""
', '

def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
 work_type (str): The type of the work items to filter by
 tag (str): The tag to filter the work items

Returns:
 list: List of work items with the given tag
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Generate a unique identifier for a new project, log this activity for user ""AdminUser"", and then archive all completed work items related to this project.","var_1 = generate_unique_identifier(prefix=""project"")
var_2 = who_am_i()
var_3 = log_user_activity(user_id=""AdminUser"", activity_description=""Generated unique identifier for new project: "" + var_1)
var_4 = search_object_by_name(query=var_1)
var_5 = works_list(type=[""issue"", ""ticket"", ""task""], owned_by=[var_4], stage.name=[""closed"", ""resolved"", ""done"", ""completed""])
var_6 = archive_completed_work(work_ids=var_5)","

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""


def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
 prefix (str): A prefix for the identifier
 use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
 str: The generated unique identifier
""""""

```', '

def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
 sprint_id (str): The ID of the ticket

Returns:
 list: A list of changes made to the sprint
""""""
', 'def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
 issue_id (str): The ID of the issue to be updated
 new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
 primary_task_id (str): The ID of the primary task which remains after the merge
 duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
 None
""""""
', '

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
 user_id (str): The ID of the user whose tasks are to be listed
 completed (bool): If True, only completed tasks are returned

Returns:
 list: A list of tasks assigned to the user
""""""
', '

def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
 user_id (str): The ID of the user whose activity is being logged
 activity_description (str): A description of the activity

Returns:
 bool: True if the logging was successful, False otherwise
""""""
', '

def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
 project_id (str): The ID of the project containing the tasks
 completed_since (str): Archive tasks completed after this timestamp

Returns:
 int: Number of tasks archived
""""""
', '

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
 expense_ids (list): List of expense IDs to calculate the total amount

Returns:
 float: The total amount of the expenses
""""""
', '

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
 work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
 int: The number of work items successfully archived
""""""
', '

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
 task_ids (list): A list of task IDs to filter
 due_date (str): The due date to filter tasks by

Returns:
 list: List of task IDs that have the specified due date
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""
"
"Retrieve the history of sprint ""SPRINT-42"", fetch all tasks assigned to user ""QAEngineer1"" including completed ones, and summarize the tasks for a report.","var_1 = get_sprint_history(sprint_id=""SPRINT-42"")
var_2 = fetch_user_tasks(user_id=""QAEngineer1"", include_completed=True)
var_3 = summarize_objects(objects=var_2)","

def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
 sprint_id (str): The ID of the ticket

Returns:
 list: A list of changes made to the sprint
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""
', 'def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
 project_ids (list): A list of project IDs to filter
 status (str): The status to filter by, default is 'active'

Returns:
 list: Project IDs matching the status
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""
', '

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""
', '

def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
 dataset_id (str): The ID of the dataset from which to generate the report
 report_type (str): The type of report to generate, default is 'summary'

Returns:
 str: The ID of the generated report
""""""
', '
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
 user_id (str): The ID of the user whose status is to be updated
 status (str): The new status to apply to the user account

Returns:
 str: updated User Id
""""""
', '

def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
 user_id (str): The ID of the user whose work items are to be retrieved
 work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket''']

Returns:
 list: Work items created by the user
""""""
', '

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 float: Estimated effort in hours
""""""
', '

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
 group_id (str): The ID of the group

Returns:
 list: User IDs belonging to the group
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Fetch user tasks for user ""TeamLead"", include completed tasks, and then summarize these tasks.","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = fetch_user_tasks(user_id=var_1, include_completed=True)
var_3 = summarize_objects(objects=var_2)","

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
 user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
 str: URL of the user's avatar image
""""""
', '

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
 department_id (str): The ID of the department to list members for

Returns:
 list: User IDs of all the members in the department
""""""
', 'def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
 department_id (str): The ID of the department to filter users
 active_only (bool): Filters for only active users if set to True

Returns:
 list: Users in the specified department
""""""
', '

def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
 task_id (str): The ID of the task on which time is spent
 hours_spent (float): The number of hours spent on the task

Returns:
 bool: Status of the time tracking
""""""
', '

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
 object_id (str): The ID of the object to be removed
 sprint_id (str): The ID of the project from which the object should be removed

Returns:
 list: Returns the updated list of sprint objects
""""""
', '

def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
 user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
 list: List of completed task IDs
""""""
', '

def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
 report_template_id (str): The ID of the report template to use
 data_source_id (str): The ID of the data source

Returns:
 str: Generated report
""""""
', '

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
 object_id (str): The ID of the object to remove from inventory

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""
', '

def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
 organization_id (str): The ID of the organization to filter contacts
 active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
 list: Contacts associated with the organization
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the contact information for user ""UXDesigner"" and schedule an urgent meeting with them to discuss the high severity tickets they own, then summarize those tickets.","var_1 = search_object_by_name(query=""UXDesigner"")
var_2 = get_user_contact_info(user_id=var_1)
var_3 = schedule_meeting_with_user(user_id=var_1, urgent=True)
var_4 = works_list(owned_by=[var_1], ticket.severity=[""high""], type=[""ticket""])
var_5 = summarize_objects(objects=var_4)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact information is requested

Returns:
 str: The contact information of the user
""""""
', '

def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: List of team member IDs
""""""
', '

def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
 user_id (str): The ID of the user with whom to schedule a meeting
 duration (int): Duration of the meeting in minutes, default is '30'
 urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
 str: The ID of the scheduled meeting
""""""
', '

def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
 skill_name (str): The name of the skill to filter by
 minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
 list: A list of user IDs that match the criteria
""""""
', 'def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
 issue_ids (list): A list of issue IDs to be linked to the project
 project_id (str): The ID of the project to which the issues should be linked

Returns:
 bool: Status of the linking action
""""""
', '

def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', '

def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
 user_id (str): The ID of the user whose completed items are being requested

Returns:
 list: Completed items by the user
""""""
', '

def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
 text_id (str): The ID of the text source from which to extract contact information
 entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
 list: Extracted contact information
""""""', '

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
 text (str): The text from which keywords are to be extracted

Returns:
 list: A list of extracted keywords
""""""
', '

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
 task_id (str): The ID of the task
 complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
 float: Estimated duration in hours
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Get the list of permissions for user ""TeamLead"" and list all completed items by this user, then summarize the completed items for a weekly review.","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = get_user_permissions(user_id=var_1)
var_3 = list_completed_items_by_user(user_id=var_1)
var_4 = summarize_objects(objects=var_3)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
 user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
 list: User permissions
""""""
', '

def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
 user_id (str): The ID of the user whose completed items are being requested

Returns:
 list: Completed items by the user
""""""
', '

def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
 record_ids (list): List of record IDs to filter
 start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
 end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
 list: Filtered record IDs
""""""
', '

def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: List of team member IDs
""""""
', '

def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
 work_type (str): The type of the work items to filter by
 tag (str): The tag to filter the work items

Returns:
 list: List of work items with the given tag
""""""
', '

def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
 contact_id (str): The ID of the contact to update
 new_phone (str): The new phone number for the contact, default is 'None'
 new_email (str): The new email address for the contact, default is 'None'

Returns:
 bool: Status of the update operation
""""""
', '

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
 object_id (str): The ID of the object to remove from inventory

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
 primary_object_id (str): The ID of the primary object
 duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
 bool: True if the merge was successful, False otherwise
""""""
', '

def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
 activity_description (str): A brief description of the activity being logged
 user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
 bool: True if the activity was logged successfully; otherwise False
""""""
', '

def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: User IDs of the team members
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the history of work items with a severity of ""high"" and check their completeness.","var_1 = works_list(ticket.severity=[""high""])
var_2 = get_work_item_history(work_id=var_1)
var_3 = validate_work_item_completeness(work_id=var_1)","

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""



def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: A chronological list of changes made to the work item
""""""
', '

def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
 report_type (str): The type of report to generate
 subject_id (str): The ID of the subject for the report
 include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
 str: The ID of the generated report
""""""
', '

def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
 user_id (str): The ID of the user whose account is to be deactivated
 reason (str): The reason for deactivating the account

Returns:
 bool: True if the account was successfully deactivated; otherwise False
""""""
', '

def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
 task_id (str): The ID of the task to be updated with an estimated time
 estimation_hours (float): The estimated time in hours to complete the task

Returns:
 None
""""""
', '

def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
 user_id (str): The ID of the user to set permissions for
 permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
 bool: True if the permission was set successfully, False otherwise
""""""
', '

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
 work_id (str): The ID of the work item to check

Returns:
 bool: True if the work item is complete, False if it lacks information
""""""
', '

def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
 task_id (str): The ID of the task on which time is spent
 hours_spent (float): The number of hours spent on the task

Returns:
 bool: Status of the time tracking
""""""
', '

def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
 project_id (str): The ID of the project for which the budget is calculated
 cost_limit (float): The cost limit for the project's budget

Returns:
 float: The amount allocated to the project budget
""""""
', '

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
 object_id (str): The ID of the object to check

Returns:
 bool: True if the object exists, otherwise False
""""""
', '

def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
 work_item_id (str): The ID of the work item

Returns:
 float: The number of hours until the deadline
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""
"
"Retrieve the list of completed tasks by user ""DesignerDan"" in the ""UI_Development"" project, extract keywords from the task descriptions, and assign those tasks to user ""ManagerMike"".","var_1 = search_object_by_name(query=""DesignerDan"")
var_2 = search_object_by_name(query=""UI_Development"")
var_3 = list_completed_tasks_by_user(user_id=var_1, project_id=var_2)
var_4 = summarize_objects(objects=var_3)
var_5 = extract_keywords_from_text(text=var_4)
var_6 = search_object_by_name(query=""ManagerMike"")
var_7 = assign_tasks_to_user(task_ids=var_3, user_id=var_6)","

def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""

def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""



def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
 user_id (str): The ID of the user
 project_id (str, optional): The ID of the project to filter tasks

Returns:
 list: List of task IDs completed by the user
""""""
', '

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', '

def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
 task_ids (list): List of task IDs to be assigned
 user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""
', '

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
 text (str): The text from which keywords are to be extracted

Returns:
 list: A list of extracted keywords
""""""
', '

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""
', '

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
 task_id (str): The ID of the task to be converted
 parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
 bool: True if the conversion was successful, False otherwise
""""""
', '

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
 feature_id (str): The ID of the feature to toggle access
 user_id (str): The ID of the user whose access will be toggled
 enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
 bool: The resulting access status
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""
', '

def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
 user_id (str): The ID of the user whose activity is being logged
 activity_description (str): A description of the activity

Returns:
 bool: True if the logging was successful, False otherwise
""""""
', '

def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
 primary_task_id (str): The ID of the primary task which remains after the merge
 duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
 None
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the list of recent activities for user ""TeamLead"" and filter their projects by status ""completed"".","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = list_recent_activities(user_id=var_1)
var_3 = filter_projects_by_status(project_ids=var_2, status=""completed"")","

def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
 user_id (str): The ID of the user whose activities are to be listed
 limit (int): The maximum number of recent activities to return

Returns:
 list: Recent activities of the user
""""""
', 'def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
 project_ids (list): A list of project IDs to filter
 status (str): The status to filter by, default is 'active'

Returns:
 list: Project IDs matching the status
""""""
', '

def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
 ticket_id (str): The ID of the ticket to be marked for review
 reviewer_id (str): The ID of the user who should review the ticket

Returns:
 None
""""""
', '

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
 task_id (str): The ID of the task for which to estimate completion time

Returns:
 float: The estimated number of hours to complete the task
""""""
', '

def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
 user_id (str): The ID of the user to get activities for
 limit (int): The maximum number of activity log entries to return

Returns:
 list: Recent activity log entries
""""""
', '

def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
 organization_id (str): The ID of the organization to filter contacts
 active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
 list: Contacts associated with the organization
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""
', '

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
 user_id (str): The ID of the user
 object_id (str): The ID of the object to check permission for

Returns:
 bool: True if the user has permission, False otherwise
""""""
', '

def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
 task_ids (list): List of task IDs to be assigned
 user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""
', '

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
 expense_ids (list): List of expense IDs to calculate the total amount

Returns:
 float: The total amount of the expenses
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the estimated completion time for work items owned by user ""BackendDev1"", then filter those that have a deadline within the next 48 hours.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1])
var_3 = [calculate_estimate_completion_time(work_id=item) for item in var_2]
var_4 = [calculate_time_until_deadline(work_item_id=item) for item in var_2]
var_5 = [item for item in var_2 if calculate_time_until_deadline(work_item_id=item) <= 48]","

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
 user_id (str): The ID of the user whose tasks are to be listed
 completed (bool): If True, only completed tasks are returned

Returns:
 list: A list of tasks assigned to the user
""""""
', 'def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
 project_ids (list): A list of project IDs to filter
 status (str): The status to filter by, default is 'active'

Returns:
 list: Project IDs matching the status
""""""
', '

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
 work_id (str): The ID of the work item to calculate the estimated time

Returns:
 float: Estimated completion time in hours
""""""
', '

def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
 work_item_id (str): The ID of the work item

Returns:
 float: The number of hours until the deadline
""""""
', '

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
 task_id (str): The ID of the task to be converted

Returns:
 str: The ID of the newly created ticket
""""""
', '

def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
 user_id (str): The ID of the user whose skills are being queried

Returns:
 list: The skills of the user
""""""
', '

def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
 task_ids (list): A list of task IDs to calculate cost for

Returns:
 float: Total cost of the tasks
""""""
', '

def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
 ticket_ids (list): A list of ticket IDs to filter
 start_date (str): The start date for the range
 end_date (str, optional): The end date for the range, defaults to None

Returns:
 list: Filtered list of ticket IDs
""""""
', '

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
 expense_ids (list): List of expense IDs to calculate the total amount

Returns:
 float: The total amount of the expenses
""""""
', '

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
 object_id (str): The ID of the object to remove from inventory

Returns:
 bool: True if the removal was successful, False otherwise
""""""



def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the remaining budget for budget ID ""BUD-2023"", log the activity, and retrieve the workload for user ""FinAnalyst"".","var_1 = calculate_budget_remaining(budget_id=""BUD-2023"")
var_2 = who_am_i()
var_3 = log_system_activity(activity_description=""Calculated remaining budget for BUD-2023"", user_id=var_2)
var_4 = get_user_workload(user_id=""FinAnalyst"")","

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
 activity_description (str): A brief description of the activity being logged
 user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
 bool: True if the activity was logged successfully; otherwise False
""""""
', '

def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
 budget_id (str): The ID of the budget to calculate

Returns:
 float: The amount of remaining budget
""""""
', '

def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be determined

Returns:
 int: The number of tasks assigned to the user
""""""
', 'def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
 department_id (str): The ID of the department to filter users
 active_only (bool): Filters for only active users if set to True

Returns:
 list: Users in the specified department
""""""
', '

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
 ticket_id (str): The ID of the ticket that will be linked with related tickets
 related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
 bool: True if the linking is successful, False otherwise
""""""
', 'def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
 sprint_id (str): The ID of the sprint for workload calculation

Returns:
 float: Total workload in hours
""""""
', '

def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
 prefix (str): A prefix for the identifier
 use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
 str: The generated unique identifier
""""""

```', '

def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: List of team member IDs
""""""
', '

def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
 work_id (str): The ID of the work item for which the estimation is to be made

Returns:
 float: Estimated hours required to complete the work item
""""""
', '

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
 task_id (str): The ID of the task for which dependencies are requested

Returns:
 list: Dependency task IDs
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the contact information for user ""User123"", then use it to create a new ticket describing a system issue they reported, and log the event in the system.","var_1 = find_user_by_email(email=""User123"")
var_2 = retrieve_user_contact_info(user_id=var_1)
var_3 = create_new_ticket(title=""System Issue Reported"", description=""A system issue has been reported by the user."", reported_by=var_1)
var_4 = log_system_event(event_type=""Ticket Creation"", description=""A new ticket was created for a system issue reported by the user."", user_id=var_1)","def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
 event_type (str): The type of event to log
 description (str): A brief description of the event
 user_id (str): The ID of the user involved in the event, if applicable

Returns:
 str: The ID of the logged event
""""""
', '

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact info is requested

Returns:
 str: Contact information of the user
""""""
', '

def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
 email (str): The email address of the user to find

Returns:
 str: ID of the user
""""""
', '

def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
 object_ids (list): A list of object IDs

Returns:
 str: The ID of the generated report
""""""
', '

def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
 archive_id (str): The ID of the archive from which to retrieve documents
 keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
 list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""', '

def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
 title (str): The title of the new ticket
 description (str): A detailed description of the issue or request
 reported_by (str): The ID of the user reporting the ticket

Returns:
 str: The ID of the newly created ticket
""""""
', '

def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
 ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
 bool: True if the ticket was marked as resolved, False otherwise
""""""
', '

def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
 primary_record_id (str): The ID of the primary record to keep
 duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
 bool: True if the merge was successful; otherwise False
""""""
', '

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 due_date (str): The new due date for the work item

Returns:
 None: Indicates that the operation was executed without returning any value
""""""
', '

def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
 user_id (str): The ID of the user to be removed
 project_id (str): The ID of the project from which the user is to be removed

Returns:
 bool: True if the user is successfully removed, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""
def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
"""""""
"Assign all tickets created by user ""User123"" to employee ""Emp456"", and log this activity with the description ""Assigned tickets to Emp456"".","var_1 = fetch_user_created_work(user_id=""User123"", work_type=[""ticket""])
var_2 = assign_tasks_to_employee(task_ids=var_1, employee_id=""Emp456"")
var_3 = log_user_activity(user_id=""User123"", activity_description=""Assigned tickets to Emp456"")","

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""



def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
 user_id (str): The ID of the user whose activity is being logged
 activity_description (str): A description of the activity

Returns:
 bool: True if the logging was successful, False otherwise
""""""
', '

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""
', '

def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
 user_id (str): The ID of the user whose work items are to be retrieved
 work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket''']

Returns:
 list: Work items created by the user
""""""
', '

def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
 ticket_ids (list): A list of ticket IDs to filter
 start_date (str): The start date for the range
 end_date (str, optional): The end date for the range, defaults to None

Returns:
 list: Filtered list of ticket IDs
""""""
', '

def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
 ticket_id (str): The ID of the ticket to be marked for review
 reviewer_id (str): The ID of the user who should review the ticket

Returns:
 None
""""""
', '

def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
 user_id (str): The ID of the user whose activities are to be listed
 limit (int): The maximum number of recent activities to return

Returns:
 list: Recent activities of the user
""""""
', 'def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
 department_id (str): The ID of the department to filter users
 active_only (bool): Filters for only active users if set to True

Returns:
 list: Users in the specified department
""""""
', '

def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact information is requested

Returns:
 str: The contact information of the user
""""""
', '

def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
 work_item_id (str): The ID of the work item that is a duplicate
 duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
 bool: True if the item is successfully marked, False otherwise
""""""
', '

def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
 contact_id (str): The ID of the contact to update
 new_phone (str): The new phone number for the contact, default is 'None'
 new_email (str): The new email address for the contact, default is 'None'

Returns:
 bool: Status of the update operation
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""


def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the list of work items owned by user ""TeamLead42"", mark them as completed, and then generate a report for these work items.","var_1 = search_object_by_name(query=""TeamLead42"")
var_2 = works_list(owned_by=[var_1])
var_3 = list(map(mark_task_as_completed, var_2))
var_4 = generate_work_report(work_ids=var_2)","

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
 task_id (str): The ID of the task to be marked as complete

Returns:
 bool: True if marked successfully, False otherwise
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""
', '

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
 department_id (str): The ID of the department to list members for

Returns:
 list: User IDs of all the members in the department
""""""
', '

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', '

def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
 project_id (str): The ID of the project for which to calculate progress

Returns:
 float: The percentage of project completion
""""""
', '

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
 user_id (str): The ID of the user whose tasks are to be listed
 completed (bool): If True, only completed tasks are returned

Returns:
 list: A list of tasks assigned to the user
""""""
', '

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
 work_id (str): The ID of the work item to check

Returns:
 bool: True if the work item is complete, False if it lacks information
""""""
', '

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
 task_id (str): The ID of the task to be converted

Returns:
 str: The ID of the newly created ticket
""""""
', '

def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: User IDs of the team members
""""""
', '

def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the effort for task ""TASK-456"", check its status, and if it's ""In Progress"", add it to the current sprint.","var_1 = calculate_effort_for_task(task_id=""TASK-456"")
var_2 = check_ticket_status(ticket_id=""TASK-456"")
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=[""TASK-456""], sprint_id=var_3)","

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
 ticket_id (str): The ID of the ticket to be marked for review
 reviewer_id (str): The ID of the user who should review the ticket

Returns:
 None
""""""
', '

def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
 task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
 float: Total effort spent on the task
""""""
', '

def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
 data_id (str): The ID of the data to be validated
 schema_id (str): The ID of the schema to validate the data against

Returns:
 bool: True if data is consistent, False otherwise
""""""
', '

def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
 str: The status of the ticket
""""""
', '

def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
 work_item_id (str): The ID of the work item to check
 status_options (list): A list of valid status options

Returns:
 bool: True if status is valid, False otherwise
""""""
', '

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 due_date (str): The new due date for the work item

Returns:
 None: Indicates that the operation was executed without returning any value
""""""
', '

def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
 record_ids (list): List of record IDs to filter
 start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
 end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
 list: Filtered record IDs
""""""
', '

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
 task_id (str): The ID of the task to be converted
 parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
 bool: True if the conversion was successful, False otherwise
""""""
', '

def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
 sprint_id (str): The ID of the sprint for which to generate the report

Returns:
 str: The ID of the generated report
""""""
', '

def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: User IDs of the team members
""""""



def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the total cost of tasks created by user ""BudgetMaster"" and merge any duplicate tasks to ensure accuracy in the cost report.","var_1 = search_object_by_name(query=""BudgetMaster"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = calculate_cost_of_tasks(task_ids=var_2)","

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""


def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
 primary_object_id (str): The ID of the primary object
 duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
 bool: True if the merge was successful, False otherwise
""""""
', '

def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
 project_id (str): The ID of the project to summarize

Returns:
 str: A summary report of the project
""""""
', '

def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
 task_ids (list): A list of task IDs to calculate cost for

Returns:
 float: Total cost of the tasks
""""""
', 'def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
 department_id (str): The ID of the department to filter users
 active_only (bool): Filters for only active users if set to True

Returns:
 list: Users in the specified department
""""""
', '

def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
 project_id (str): The ID of the project for which to calculate progress

Returns:
 float: The percentage of project completion
""""""
', '

def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
 data_id (str): The ID of the data to be validated
 schema_id (str): The ID of the schema to validate the data against

Returns:
 bool: True if data is consistent, False otherwise
""""""
', '

def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
 task_id (str): The ID of the task to be updated with an estimated time
 estimation_hours (float): The estimated time in hours to complete the task

Returns:
 None
""""""
', '
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
 user_id (str): The ID of the user whose status is to be updated
 status (str): The new status to apply to the user account

Returns:
 str: updated User Id
""""""
', '

def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: User IDs of the team members
""""""
', '

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
 task_id (str): The ID of the task for which to estimate completion time

Returns:
 float: The estimated number of hours to complete the task
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"List all completed tasks by user ""EngineerEmma,"" check if they have at least 3 inventory items related to part ""PART-456,"" and generate a report including a summary.","var_1 = search_object_by_name(query=""EngineerEmma"")
var_2 = list_completed_tasks_by_user(user_id=var_1)
var_3 = search_object_by_name(query=""PART-456"")
var_4 = check_inventory_availability(part_id=var_3, minimum_quantity=3)
var_5 = generate_report(report_type=""completed_tasks"", subject_id=var_1, include_summary=True)","

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
 primary_record_id (str): The ID of the primary record to keep
 duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
 bool: True if the merge was successful; otherwise False
""""""
', '

def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
 user_id (str): The ID of the user with whom to schedule a meeting
 duration (int): Duration of the meeting in minutes, default is '30'
 urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
 str: The ID of the scheduled meeting
""""""
', '

def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
 skill_name (str): The name of the skill to filter by
 minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
 list: A list of user IDs that match the criteria
""""""
', '

def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
 user_id (str): The ID of the user for whom permissions are being listed

Returns:
 list: A list of permissions that the user possesses
""""""
', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""
', '

def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
 project_id (str): The ID of the project for which the budget is calculated
 cost_limit (float): The cost limit for the project's budget

Returns:
 float: The amount allocated to the project budget
""""""
', '

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
 text (str): The text from which keywords are to be extracted

Returns:
 list: A list of extracted keywords
""""""
', '

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
 part_id (str): The ID of the part to check in inventory
 minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
 bool: True if the minimum quantity is available; otherwise False
""""""
', '

def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
 report_type (str): The type of report to generate
 subject_id (str): The ID of the subject for the report
 include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
 str: The ID of the generated report
""""""
', '

def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
 user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
 list: List of completed task IDs
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Merge all duplicate tickets related to the ""Network"" project into a primary ticket, then generate a report on the primary ticket including a summary.","var_1 = search_object_by_name(query=""Network"")
var_2 = list_all_blocked_tickets()
var_3 = works_list(type=[""ticket""], owned_by=[var_1])
var_4 = merge_duplicate_tickets(primary_ticket_id=var_3[0], duplicate_ticket_ids=var_3[1:])
var_5 = generate_report(report_type=""ticket"", subject_id=var_3[0], include_summary=True)","

def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
 primary_ticket_id (str): The ID of the primary ticket that remains
 duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
 None
""""""
', '

def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
 report_type (str): The type of report to generate
 subject_id (str): The ID of the subject for the report
 include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
 str: The ID of the generated report
""""""
', '

def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact information is requested

Returns:
 str: The contact information of the user
""""""
', '

def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
 user_id (str): The ID of the user with whom to schedule a meeting
 duration (int): Duration of the meeting in minutes, default is '30'
 urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
 str: The ID of the scheduled meeting
""""""
', '

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
 text (str): The text from which keywords are to be extracted

Returns:
 list: A list of extracted keywords
""""""
', '

def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
 list: Ticket IDs that are currently blocked
""""""', '

def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be determined

Returns:
 int: The number of tasks assigned to the user
""""""
', '

def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
 project_id (str): The ID of the project to be analyzed

Returns:
 str: Estimated date of completion
""""""
', 'def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
 issue_ids (list): A list of issue IDs to be linked to the project
 project_id (str): The ID of the project to which the issues should be linked

Returns:
 bool: Status of the linking action
""""""
', 'def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
 sprint_id (str): The ID of the sprint for workload calculation

Returns:
 float: Total workload in hours
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Find all work items with severity ""high"" that are overdue, notify user ""TechLead"" of these tasks, then reassign them to user ""SupportAgent"".","var_1 = works_list(ticket.severity=[""high""], ticket.needs_response=True)
var_2 = search_object_by_name(query=""TechLead"")
var_3 = notify_user_of_overdue_tasks(user_id=var_2)
var_4 = search_object_by_name(query=""SupportAgent"")
var_5 = reassign_work_item_owner(work_id=var_1, new_owner_id=var_4)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
 user_id (str): The ID of the user to check for overdue tasks

Returns:
 None
""""""
', '

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
 work_id (str): The ID of the work item to be reassigned
 new_owner_id (str): The user ID of the new owner

Returns:
 bool: True if reassignment is successful, False otherwise
""""""
', '

def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
 dataset_id (str): The ID of the dataset from which to generate the report
 report_type (str): The type of report to generate, default is 'summary'

Returns:
 str: The ID of the generated report
""""""
', '

def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
 object_ids (list): A list of object IDs to filter
 object_type (str): The type of objects to filter for

Returns:
 list: Filtered object IDs matching the specified type
""""""
', '

def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
 primary_ticket_id (str): The ID of the primary ticket that remains
 duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
 None
""""""
', '

def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
 project_id (str): The ID of the project to summarize

Returns:
 str: A summary report of the project
""""""
', '

def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
 project_id (str): The ID of the project containing the tasks
 completed_since (str): Archive tasks completed after this timestamp

Returns:
 int: Number of tasks archived
""""""
', '

def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
 project_id (str): The ID of the project to be analyzed

Returns:
 str: Estimated date of completion
""""""
', '

def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
 task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
 float: Total effort spent on the task
""""""
', '

def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
 ticket_id (str): The ID of the ticket to be marked for review
 reviewer_id (str): The ID of the user who should review the ticket

Returns:
 None
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check the inventory for part ""ENG-456"" and if available, link related issues to the ""ElectroDrive"" project.","var_1 = check_inventory_availability(part_id=""ENG-456"")
var_2 = search_object_by_name(query=""ElectroDrive"")
var_3 = works_list(applies_to_part=[""ENG-456""], type=[""issue""])
var_4 = link_issues_to_project(issue_ids=var_3, project_id=var_2)","

def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""


def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
 object_id (str): The ID of the object to remove

Returns:
 None
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""
', '

def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
 project_id (str): The ID of the project for which the timeline is requested

Returns:
 list: Key milestones and dates for the project timeline
""""""
', 'def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
 work_item_ids (list): A list of work item IDs for which due dates are required
 urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
 list: Due dates for the specified work items
""""""
', '

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""
', '

def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
 object_id (str): The ID of the object to be removed from the archive

Returns:
 bool: True if the object was successfully removed, False otherwise
""""""
', 'def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
 issue_ids (list): A list of issue IDs to be linked to the project
 project_id (str): The ID of the project to which the issues should be linked

Returns:
 bool: Status of the linking action
""""""
', '

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
 part_id (str): The ID of the part to check in inventory
 minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
 bool: True if the minimum quantity is available; otherwise False
""""""
', '

def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: User IDs of the team members
""""""
', '

def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
 user_id (str): The ID of the user whose activities are to be listed
 limit (int): The maximum number of recent activities to return

Returns:
 list: Recent activities of the user
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Estimate the cost for work items created by user ""ArchitectAnna"" with severity ""high,"" then assign those tasks to employee ""EmployeeEve.""","var_1 = search_object_by_name(query=""ArchitectAnna"")
var_2 = works_list(created_by=[var_1], ticket.severity=[""high""], type=[""task""])
var_3 = estimate_cost_for_work(work_id=var_2)
var_4 = assign_tasks_to_employee(task_ids=var_2, employee_id=""EmployeeEve"")","

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""


def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
 object_id (str): The ID of the object to be removed from the archive

Returns:
 bool: True if the object was successfully removed, False otherwise
""""""
', '

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""
', '

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
 work_id (str): The ID of the work item to estimate cost for
 cost_per_hour (float): The cost per hour. Default is '100'

Returns:
 float: Estimated cost
""""""', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""
', '

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
 user_id (str): The ID of the user for whom to calculate the workload

Returns:
 int: The total number of open work items
""""""
', '

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
 list: Comments associated with the ticket
""""""
', '

def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: List of team member IDs
""""""
', '

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task will be assigned

Returns:
 bool: True if assignment was successful, otherwise False
""""""
', '

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
 user_id (str): The ID of the user
 object_id (str): The ID of the object to check permission for

Returns:
 bool: True if the user has permission, False otherwise
""""""
', 'def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
 ticket_id (str): The ID of the ticket to be assigned
 user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Archive tickets older than ""2021-01-01"" that are active, then retrieve similar work items to those archived tickets and summarize them for a report.","var_1 = archive_old_tickets(older_than_date=""2021-01-01"", active_status=True)
var_2 = get_similar_work_items(work_id=var_1)
var_3 = summarize_objects(objects=var_2)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
 object_id (str): The ID of the object to remove from inventory

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', '

def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
 older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
 active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
 str: ID of tickets archived
""""""
', '

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
 task_id (str): The ID of the task for which to estimate completion time

Returns:
 float: The estimated number of hours to complete the task
""""""
', '

def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
 user_id (str): The ID of the user whose permissions need to be checked
 required_permissions (list): A list of permissions to check against the user's permissions

Returns:
 bool: True if the user has all the required permissions, False otherwise
""""""
', '

def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
 object_id (str): The ID of the primary object
 related_object_id (str): The ID of the object to relate to the primary

Returns:
 bool: True if the objects were successfully linked, False otherwise
""""""
', '

def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
 work_id (str): The ID of the work item for which the estimation is to be made

Returns:
 float: Estimated hours required to complete the work item
""""""
', '

def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
 archive_id (str): The ID of the archive from which to retrieve documents
 keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
 list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""', '

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
 task_id (str): The ID of the task to be converted
 parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
 bool: True if the conversion was successful, False otherwise
""""""
', '

def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
 user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
 list: List of completed task IDs
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Find all work items with severity ""high"" that are owned by ""TeamLead"", remove them from sprint ""S123"", and then fetch their attachment lists.","var_1 = works_list(owned_by=[""TeamLead""], ticket.severity=[""high""])
var_2 = get_sprint_id()
var_3 = remove_work_item_from_sprint(work_id=var_1, sprint_id=""S123"")
var_4 = list_work_attachments(work_id=var_1)","

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
 object_id (str): The ID of the object to remove from inventory

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: Attachment file IDs
""""""
', 'def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
 issue_id (str): The ID of the issue to be updated
 new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
 ticket_id (str): The ID of the ticket for which the history is requested
 history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
 list: A list of history records for the ticket
""""""
', '

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
 work_id (str): The ID of the work item to be reassigned
 new_owner_id (str): The user ID of the new owner

Returns:
 bool: True if reassignment is successful, False otherwise
""""""
', 'def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
 department_id (str): The ID of the department to filter users
 active_only (bool): Filters for only active users if set to True

Returns:
 list: Users in the specified department
""""""
', '

def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
 work_id (str): The ID of the work item to be removed
 sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
 work_item_id (str): The ID of the work item to check
 status_options (list): A list of valid status options

Returns:
 bool: True if status is valid, False otherwise
""""""
', '

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""
', '

def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
 prefix (str): A prefix for the identifier
 use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
 str: The generated unique identifier
""""""

```
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check the availability of part ""PART-987"", assign all high severity tickets related to it to user ""TechLead"", and generate a progress report for project ""PRJ-102"".","var_1 = check_availability_of_part(part_id=""PART-987"")
var_2 = works_list(applies_to_part=[""PART-987""], ticket.severity=[""high""], type=[""ticket""])
var_3 = who_am_i()
var_4 = assign_tickets_to_user(ticket_ids=var_2, user_id=""TechLead"")
var_5 = generate_progress_report(project_id=""PRJ-102"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
 user_id (str): The ID of the user to be removed
 project_id (str): The ID of the project from which the user is to be removed

Returns:
 bool: True if the user is successfully removed, False otherwise
""""""', '

def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
 part_id (str): The ID of the part to check for availability

Returns:
 bool: True if the part is available, False otherwise
""""""
', 'def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
 ticket_id (str): The ID of the ticket to be assigned
 user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""
', '

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
 list: Comments associated with the ticket
""""""
', 'def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
 sprint_id (str): The ID of the sprint for workload calculation

Returns:
 float: Total workload in hours
""""""
', '

def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
 ticket_id (str): The ID of the ticket to estimate time for

Returns:
 float: Estimated time in hours to resolve the ticket
""""""
', '

def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which to generate the report

Returns:
 str: A string summary of the project's progress report
""""""
', '

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', 'def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
 ticket_ids (list): A list of ticket IDs to be assigned
 user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
 None
""""""
', '

def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
 work_item_id (str): The ID of the work item to update
 new_stage (str): The new stage to which the work item should be moved

Returns:
 bool: True if the stage is successfully updated, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Estimate the time required for task ""TASK-456"", assign it to employee ""EMP234"", and then calculate the progress of project ""PRJ321"".","var_1 = estimate_time_for_task(task_id=""TASK-456"", estimation_hours=0)
var_2 = assign_tasks_to_employee(task_ids=[""TASK-456""], employee_id=""EMP234"")
var_3 = calculate_progress(project_id=""PRJ321"")","

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""


def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
 work_id (str): The ID of the work item to be removed
 sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
 task_id (str): The ID of the task to be updated with an estimated time
 estimation_hours (float): The estimated time in hours to complete the task

Returns:
 None
""""""
', '

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""
', '

def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
 project_id (str): The ID of the project to summarize

Returns:
 str: A summary report of the project
""""""
', 'def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
 ticket_id (str): The ID of the ticket to be assigned
 user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""
', '

def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
 object_ids (list): A list of object IDs to filter
 object_type (str): The type of objects to filter for

Returns:
 list: Filtered object IDs matching the specified type
""""""
', '

def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
 work_id (str): The ID of the work item for which the estimation is to be made

Returns:
 float: Estimated hours required to complete the work item
""""""
', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""
', 'def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
 sprint_id (str): The ID of the sprint for workload calculation

Returns:
 float: Total workload in hours
""""""
', '

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
 user_id (str): The ID of the user whose tasks are to be listed
 completed (bool): If True, only completed tasks are returned

Returns:
 list: A list of tasks assigned to the user
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""


def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
"""""""
"Retrieve all documents from archive ""ARCH123"" using the keyword ""safety"", assign the resulting documents to employee ""DocManager42"", and list the permissions of the user ""DocManager42"".","var_1 = retrieve_archived_documents(archive_id=""ARCH123"", keyword=""safety"")
var_2 = assign_tasks_to_employee(task_ids=var_1, employee_id=""DocManager42"")
var_3 = list_user_permissions(user_id=""DocManager42"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""


def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""



def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
 archive_id (str): The ID of the archive from which to retrieve documents
 keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
 list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""', '

def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
 user_id (str): The ID of the user
 project_id (str, optional): The ID of the project to filter tasks

Returns:
 list: List of task IDs completed by the user
""""""
', '

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""
', '

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
 feature_id (str): The ID of the feature to toggle access
 user_id (str): The ID of the user whose access will be toggled
 enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
 bool: The resulting access status
""""""
', '

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
 data_point_ids (list): List of data point IDs to validate

Returns:
 list: Validation results with status (True or False) for each data point
""""""
', '

def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
 ticket_ids (list): A list of ticket IDs to filter
 start_date (str): The start date for the range
 end_date (str, optional): The end date for the range, defaults to None

Returns:
 list: Filtered list of ticket IDs
""""""
', '

def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
 user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
 str: URL of the user's avatar image
""""""
', '

def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
 user_id (str): The ID of the user for whom permissions are being listed

Returns:
 list: A list of permissions that the user possesses
""""""
', '

def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
 task_ids (list): List of task IDs to be assigned
 user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""
', 'def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
 ticket_ids (list): A list of ticket IDs to be assigned
 user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
 None
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""


def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the workload for user ""EngineerEmma"" and list all high severity tickets they own, then schedule an urgent meeting with them to discuss.","var_1 = search_object_by_name(query=""EngineerEmma"")
var_2 = calculate_user_workload(user_id=var_1)
var_3 = works_list(created_by=[var_1], ticket.severity=[""high""], type=[""ticket""])
var_4 = schedule_meeting_with_user(user_id=var_1, urgent=True)","

def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
 keyword (str): The keyword to search for in the documents

Returns:
 str: ID of the document containing the keyword
""""""', '

def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be calculated

Returns:
 float: The calculated workload value
""""""
', '

def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
 text_id (str): The ID of the text source from which to extract contact information
 entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
 list: Extracted contact information
""""""', '

def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
 sprint_id (str): The ID of the sprint to extend
 new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
 bool: True if the sprint end date was extended, False otherwise
""""""
', '

def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
 user_id (str): The ID of the user whose completed items are being requested

Returns:
 list: Completed items by the user
""""""
', '

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
 feature_id (str): The ID of the feature to toggle access
 user_id (str): The ID of the user whose access will be toggled
 enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
 bool: The resulting access status
""""""
', '

def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
 project_id (str): The ID of the project for which to calculate progress

Returns:
 float: The percentage of project completion
""""""
', '

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
 object_id (str): The ID of the object to be removed
 sprint_id (str): The ID of the project from which the object should be removed

Returns:
 list: Returns the updated list of sprint objects
""""""
', '

def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
 user_id (str): The ID of the user with whom to schedule a meeting
 duration (int): Duration of the meeting in minutes, default is '30'
 urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
 str: The ID of the scheduled meeting
""""""
', '

def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
 work_item_id (str): The ID of the work item to update
 new_stage (str): The new stage to which the work item should be moved

Returns:
 bool: True if the stage is successfully updated, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the contact information for user ""User123"", filter their active projects by category ""CAT-789"", and summarize those projects.","var_1 = search_object_by_name(query=""User123"")
var_2 = retrieve_user_contact_info(user_id=var_1)
var_3 = filter_projects_by_category(category_id=""CAT-789"", active_only=True)
var_4 = summarize_objects(objects=var_3)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact info is requested

Returns:
 str: Contact information of the user
""""""
', '

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
 task_id (str): The ID of the task to be converted

Returns:
 str: The ID of the newly created ticket
""""""
', '
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
 user_id (str): The ID of the user whose status is to be updated
 status (str): The new status to apply to the user account

Returns:
 str: updated User Id
""""""
', '

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', '

def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
 user_id (str): The ID of the user to check for overdue tasks

Returns:
 None
""""""
', '

def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
 sprint_id (str): The ID of the ticket

Returns:
 list: A list of changes made to the sprint
""""""
', 'def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
 department_id (str): The ID of the department to filter users
 active_only (bool): Filters for only active users if set to True

Returns:
 list: Users in the specified department
""""""
', '

def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
 primary_task_id (str): The ID of the primary task which remains after the merge
 duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
 None
""""""
', '

def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
 sprint_id (str): The ID of the sprint to extend
 new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
 bool: True if the sprint end date was extended, False otherwise
""""""
', '

def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
 task_id (str): The ID of the task to be updated with an estimated time
 estimation_hours (float): The estimated time in hours to complete the task

Returns:
 None
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the workload for user ""EngineerEmma"", filter their work items for the current sprint, and generate a summarized report.","var_1 = who_am_i()
var_2 = retrieve_user_workload(user_id=""EngineerEmma"")
var_3 = get_sprint_id()
var_4 = filter_records_by_date(record_ids=var_2, start_date=var_3, end_date=var_3)
var_5 = summarize_objects(objects=var_4)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
 user_id (str): The ID of the user whose workload is to be retrieved

Returns:
 list: A list containing workload details
""""""
', '

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""
', '

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 float: Estimated effort in hours
""""""
', '

def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
 work_item_id (str): The ID of the work item that is a duplicate
 duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
 bool: True if the item is successfully marked, False otherwise
""""""
', 'def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
 work_item_ids (list): A list of work item IDs for which due dates are required
 urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
 list: Due dates for the specified work items
""""""
', 'def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
 sprint_id (str): The ID of the sprint for workload calculation

Returns:
 float: Total workload in hours
""""""
', '

def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: Attachment file IDs
""""""
', '

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
 text (str): The text from which keywords are to be extracted

Returns:
 list: A list of extracted keywords
""""""
', '

def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
 record_ids (list): List of record IDs to filter
 start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
 end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
 list: Filtered record IDs
""""""
', '

def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
 dataset_id (str): The ID of the dataset from which to generate the report
 report_type (str): The type of report to generate, default is 'summary'

Returns:
 str: The ID of the generated report
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""
"
"Check if part ""PART-456"" is available in inventory, list all work items related to it, and add those work items to the current sprint.","var_1 = check_availability_of_part(part_id=""PART-456"")
var_2 = works_list(applies_to_part=[""PART-456""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)","

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
 user_id (str): The ID of the user to set permissions for
 permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
 bool: True if the permission was set successfully, False otherwise
""""""
', '

def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
 part_id (str): The ID of the part to check for availability

Returns:
 bool: True if the part is available, False otherwise
""""""
', '

def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: List of team member IDs
""""""
', '

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
 user_id (str): The ID of the user whose tasks are to be listed
 completed (bool): If True, only completed tasks are returned

Returns:
 list: A list of tasks assigned to the user
""""""
', '

def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
 user_id (str): The ID of the user whose activities are to be listed
 limit (int): The maximum number of recent activities to return

Returns:
 list: Recent activities of the user
""""""
', '

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
 group_id (str): The ID of the group

Returns:
 list: User IDs belonging to the group
""""""
', '

def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
 older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
 active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
 str: ID of tickets archived
""""""
', '

def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
 user_id (str): The ID of the user whose completed items are being requested

Returns:
 list: Completed items by the user
""""""
', '

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
 task_id (str): The ID of the task for which dependencies are requested

Returns:
 list: Dependency task IDs
""""""
', '

def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
 user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
 list: List of completed task IDs
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Estimate the resolution time for tickets created by ""User123"", assign them to ""TechLead"", and then validate if the project ""Project456"" is completed.","var_1 = search_object_by_name(query=""User123"")
var_2 = works_list(created_by=[var_1], type=[""ticket""])
var_3 = estimate_ticket_resolution_time(ticket_id=var_2[0])
var_4 = search_object_by_name(query=""TechLead"")
var_5 = assign_tickets_to_user(ticket_ids=var_2, user_id=var_4)
var_6 = validate_project_completion(project_id=""Project456"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
 user_id (str): The ID of the user to set permissions for
 permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
 bool: True if the permission was set successfully, False otherwise
""""""
', '

def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
 ticket_id (str): The ID of the ticket to estimate time for

Returns:
 float: Estimated time in hours to resolve the ticket
""""""
', '

def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
 user_id (str): The ID of the user to be removed
 project_id (str): The ID of the project from which the user is to be removed

Returns:
 bool: True if the user is successfully removed, False otherwise
""""""', '

def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
 object_id (str): The ID of the object to remove

Returns:
 None
""""""
', '

def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
 user_id (str): The ID of the user with whom to schedule a meeting
 duration (int): Duration of the meeting in minutes, default is '30'
 urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
 str: The ID of the scheduled meeting
""""""
', '

def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
 primary_task_id (str): The ID of the primary task which remains after the merge
 duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
 None
""""""
', '

def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
 work_item_id (str): The ID of the work item to update
 new_stage (str): The new stage to which the work item should be moved

Returns:
 bool: True if the stage is successfully updated, False otherwise
""""""', '

def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
 work_id (str): The ID of the work item for which duration is to be calculated

Returns:
 float: The total duration in hours
""""""
', 'def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
 ticket_ids (list): A list of ticket IDs to be assigned
 user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
 None
""""""
', '

def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
 project_id (str): The ID of the project to validate

Returns:
 bool: True if completed, False otherwise
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"List all completed tasks by user ""BackendDev"", estimate the duration for each based on complexity level ""medium"", and generate a report for the current sprint.","var_1 = search_object_by_name(query=""BackendDev"")
var_2 = list_completed_tasks_by_user(user_id=var_1)
var_3 = get_sprint_id()
var_4 = generate_report_for_sprint(sprint_id=var_3)
var_5 = estimate_task_duration(task_id=var_2[0], complexity_level=""medium"")
var_6 = estimate_task_duration(task_id=var_2[1], complexity_level=""medium"")
var_7 = estimate_task_duration(task_id=var_2[2], complexity_level=""medium"")","

def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
 task_id (str): The ID of the task on which time is spent
 hours_spent (float): The number of hours spent on the task

Returns:
 bool: Status of the time tracking
""""""
', '

def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
 sprint_id (str): The ID of the sprint for which to generate the report

Returns:
 str: The ID of the generated report
""""""
', '

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
 task_id (str): The ID of the task
 complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
 float: Estimated duration in hours
""""""
', '

def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
 user_id (str): The ID of the user for whom permissions are being listed

Returns:
 list: A list of permissions that the user possesses
""""""
', '

def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
 ticket_id (str): The ID of the ticket to be marked for review
 reviewer_id (str): The ID of the user who should review the ticket

Returns:
 None
""""""
', 'def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
 start_date (str): The start date of the desired date range
 end_date (str): The end date of the desired date range
 work_type (list): Optional filter for type of work

Returns:
 list: Work items within the specified date range
""""""
', '

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
 ticket_id (str): The ID of the ticket that will be linked with related tickets
 related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
 bool: True if the linking is successful, False otherwise
""""""
', '

def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
 sprint_id (str): The ID of the ticket

Returns:
 list: A list of changes made to the sprint
""""""
', '

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
 list: Comments associated with the ticket
""""""
', '

def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
 user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
 list: List of completed task IDs
""""""



def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""


def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Fetch work items created by user ""User123"", assign them to user ""Agent007"", and then update their contact information with a new email ""agent007@spyagency.com"".","var_1 = who_am_i()
var_2 = fetch_user_created_work(user_id=""User123"")
var_3 = assign_tickets_to_user(ticket_ids=var_2, user_id=""Agent007"")
var_4 = search_object_by_name(query=""Agent007"")
var_5 = update_contact_info(contact_id=var_4, new_email=""agent007@spyagency.com"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
 contact_id (str): The ID of the contact to update
 new_email (str, optional): The new email address; defaults to None
 new_phone (str, optional): The new phone number; defaults to None

Returns:
 bool: True if the update was successful; otherwise False
""""""
', '

def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
 object_id (str): The ID of the object to remove

Returns:
 None
""""""
', '

def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
 task_id (str): The ID of the task to be updated with an estimated time
 estimation_hours (float): The estimated time in hours to complete the task

Returns:
 None
""""""
', '

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""
', '

def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
 dataset_id (str): The ID of the dataset from which to generate the report
 report_type (str): The type of report to generate, default is 'summary'

Returns:
 str: The ID of the generated report
""""""
', 'def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
 ticket_ids (list): A list of ticket IDs to be assigned
 user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
 None
""""""
', '

def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
 ticket_id (str): The ID of the ticket to be marked for review
 reviewer_id (str): The ID of the user who should review the ticket

Returns:
 None
""""""
', '

def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
 user_id (str): The ID of the user whose work items are to be retrieved
 work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket''']

Returns:
 list: Work items created by the user
""""""
', '

def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
 list: Ticket IDs that are currently blocked
""""""', '

def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
 user_id (str): The ID of the user whose permissions need to be checked
 required_permissions (list): A list of permissions to check against the user's permissions

Returns:
 bool: True if the user has all the required permissions, False otherwise
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Update contact information for user ""User123"", retrieve their updated contact info, and generate a report including a summary of all completed tasks by ""User123"".","var_1 = search_object_by_name(query=""User123"")
var_2 = update_contact_information(contact_id=var_1, new_phone=""123-456-7890"", new_email=""user123@example.com"")
var_3 = retrieve_user_contact_info(user_id=var_1)
var_4 = list_completed_tasks_by_user(user_id=var_1)
var_5 = summarize_objects(objects=var_4)
var_6 = generate_report(report_type=""completed_tasks"", subject_id=var_1, include_summary=True)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""



def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
 contact_id (str): The ID of the contact to update
 new_phone (str): The new phone number for the contact, default is 'None'
 new_email (str): The new email address for the contact, default is 'None'

Returns:
 bool: Status of the update operation
""""""
', 'def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
 ticket_ids (list): A list of ticket IDs to be assigned
 user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
 None
""""""
', 'def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task is assigned

Returns:
 None
""""""
', '

def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
 report_type (str): The type of report to generate
 subject_id (str): The ID of the subject for the report
 include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
 str: The ID of the generated report
""""""
', '

def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
 project_id (str): The ID of the project to be analyzed

Returns:
 str: Estimated date of completion
""""""
', '

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact info is requested

Returns:
 str: Contact information of the user
""""""
', '

def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
 project_id (str): The ID of the project containing the tasks
 completed_since (str): Archive tasks completed after this timestamp

Returns:
 int: Number of tasks archived
""""""
', '

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
 work_id (str): The ID of the work item to estimate cost for
 cost_per_hour (float): The cost per hour. Default is '100'

Returns:
 float: Estimated cost
""""""', '

def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
 doc_id (str): The ID of the document to which related documents should be linked
 related_doc_ids (list): A list of IDs for related documents

Returns:
 bool: True if the operation was successful, False otherwise
""""""
', '

def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
 user_id (str): The ID of the user
 project_id (str, optional): The ID of the project to filter tasks

Returns:
 list: List of task IDs completed by the user
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check the status of tickets created by user ""SupportAgent1"", update the status to ""Resolved"" for those that are still open, and notify the user of any overdue tasks.","var_1 = search_object_by_name(query=""SupportAgent1"")
var_2 = works_list(created_by=[var_1], type=[""ticket""])
var_3 = check_ticket_status(ticket_id=var_2)
var_4 = update_ticket_status(ticket_id=var_2, new_status=""Resolved"")
var_5 = notify_user_of_overdue_tasks(user_id=var_1)","def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""


def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
 issue_id (str): The ID of the issue to be updated
 solution_text (str): The description of the solution to apply to the issue

Returns:
 None
""""""
', '

def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
 ticket_id (str): The ID of the ticket to be updated
 new_status (str): The new status to update the ticket with

Returns:
 bool: True if the update was successful, otherwise False
""""""
', '

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
 text (str): The text from which keywords are to be extracted

Returns:
 list: A list of extracted keywords
""""""
', '

def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
 primary_task_id (str): The ID of the primary task which remains after the merge
 duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
 None
""""""
', '

def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
 str: The status of the ticket
""""""
', '

def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
 user_id (str): The ID of the user to check for overdue tasks

Returns:
 None
""""""
', '

def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
 organization_id (str): The ID of the organization to filter contacts
 active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
 list: Contacts associated with the organization
""""""
', '

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', 'def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
 project_ids (list): A list of project IDs to filter
 status (str): The status to filter by, default is 'active'

Returns:
 list: Project IDs matching the status
""""""
', '

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
 work_id (str): The ID of the work item to be reassigned
 new_owner_id (str): The user ID of the new owner

Returns:
 bool: True if reassignment is successful, False otherwise
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Fetch all tasks assigned to the user with ID ""User5678"", filter them by date from ""2023-01-01"" to ""2023-01-31"", and then prioritize the filtered tasks.","var_1 = fetch_user_tasks(user_id=""User5678"", include_completed=False)
var_2 = filter_records_by_date(record_ids=var_1, start_date=""2023-01-01"", end_date=""2023-01-31"")
var_3 = prioritize_objects(objects=var_2)","

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
 issue_id (str): The ID of the issue to be updated
 solution_text (str): The description of the solution to apply to the issue

Returns:
 None
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""
', '

def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
 object_id (str): The ID of the object to remove

Returns:
 None
""""""
', '

def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
 record_ids (list): List of record IDs to filter
 start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
 end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
 list: Filtered record IDs
""""""
', '

def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
 contact_id (str): The ID of the contact to update
 new_phone (str): The new phone number for the contact, default is 'None'
 new_email (str): The new email address for the contact, default is 'None'

Returns:
 bool: Status of the update operation
""""""
', 'def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task is assigned

Returns:
 None
""""""
', '

def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
 contact_id (str): The ID of the contact to update
 new_email (str, optional): The new email address; defaults to None
 new_phone (str, optional): The new phone number; defaults to None

Returns:
 bool: True if the update was successful; otherwise False
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""
', '

def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
 organization_id (str): The ID of the organization to filter contacts
 active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
 list: Contacts associated with the organization
""""""
', '

def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
 object_ids (list): List of object IDs to delete

Returns:
 bool: True if objects were successfully deleted, False otherwise
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the total expenses for work items created by ""FinanceTeam"" and archive these completed work items.","var_1 = works_list(created_by=[""FinanceTeam""])
var_2 = calculate_expense_totals(expense_ids=var_1)
var_3 = archive_completed_work(work_ids=var_1)","

def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""
', '

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
 task_id (str): The ID of the task for which to estimate completion time

Returns:
 float: The estimated number of hours to complete the task
""""""
', '

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
 expense_ids (list): List of expense IDs to calculate the total amount

Returns:
 float: The total amount of the expenses
""""""
', '

def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: Attachment file IDs
""""""
', '

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
 work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
 int: The number of work items successfully archived
""""""
', '

def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
 project_id (str): The ID of the project containing the tasks
 completed_since (str): Archive tasks completed after this timestamp

Returns:
 int: Number of tasks archived
""""""
', '

def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
 user_id (str): The ID of the user
 project_id (str, optional): The ID of the project to filter tasks

Returns:
 list: List of task IDs completed by the user
""""""
', '

def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
 user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
 list: The list of permissions for the user
""""""
', '

def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
 task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
 float: Total effort spent on the task
""""""
', '

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
 task_id (str): The ID of the task to be converted

Returns:
 str: The ID of the newly created ticket
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve all work items with severity ""high"" that are created by user ""TechLead"", update their status to ""In Progress"", and then calculate the remaining budget for budget ID ""BUD-4567"".","var_1 = works_list(created_by=[""TechLead""], ticket.severity=[""high""])
var_2 = who_am_i()
var_3 = update_object_status(object_id=var_1, new_status=""In Progress"", changed_by=var_2)
var_4 = calculate_budget_remaining(budget_id=""BUD-4567"")","

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""
', '

def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
 primary_ticket_id (str): The ID of the primary ticket that remains
 duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
 None
""""""
', '

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
 task_ids (list): A list of task IDs to filter
 due_date (str): The due date to filter tasks by

Returns:
 list: List of task IDs that have the specified due date
""""""
', '

def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
 ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
 bool: True if the ticket was marked as resolved, False otherwise
""""""
', '

def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
 part_id (str): The ID of the part to check for availability

Returns:
 bool: True if the part is available, False otherwise
""""""
', '

def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
 budget_id (str): The ID of the budget to calculate

Returns:
 float: The amount of remaining budget
""""""
', '

def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
 project_id (str): The ID of the project to track

Returns:
 float: Percentage of the project completed
""""""
', '

def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
 sprint_id (str): The ID of the ticket

Returns:
 list: A list of changes made to the sprint
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""



def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check the status of ticket ""TICKET-9123"" and if it's open, generate a summary report for the project associated with this ticket.","var_1 = check_ticket_status(ticket_id=""TICKET-9123"")
var_2 = search_object_by_name(query=""Project for TICKET-9123"")
var_3 = generate_project_summary(project_id=var_2)","

def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
 data_point_ids (list): List of data point IDs to validate

Returns:
 list: Validation results with status (True or False) for each data point
""""""
', '

def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
 str: The status of the ticket
""""""
', '

def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
 prefix (str): A prefix for the identifier
 use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
 str: The generated unique identifier
""""""

```', 'def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
 issue_id (str): The ID of the issue to be updated
 new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
 project_id (str): The ID of the project to summarize

Returns:
 str: A summary report of the project
""""""
', '

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
 task_id (str): The ID of the task for which to estimate completion time

Returns:
 float: The estimated number of hours to complete the task
""""""
', '

def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
 task_id (str): The ID of the task to be marked as complete

Returns:
 bool: True if marked successfully, False otherwise
""""""
', '

def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
 email (str): The email address of the user to find

Returns:
 str: ID of the user
""""""
', '

def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
 user_id (str): The ID of the user whose completed items are being requested

Returns:
 list: Completed items by the user
""""""
', '

def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
 object_id (str): The ID of the object for which history is requested

Returns:
 list: A list of changes made to the object
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check if user ""QAEngineerRV"" has the necessary permissions to access work items, then find and summarize all tickets with severity ""high"" that are owned by ""QAEngineerRV"".","var_1 = search_object_by_name(query=""QAEngineerRV"")
var_2 = validate_user_permissions(user_id=var_1, required_permissions=[""access_work_items""])
var_3 = works_list(created_by=[var_1], ticket.severity=[""high""], type=[""ticket""])
var_4 = summarize_objects(objects=var_3)","

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""


def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
 user_id (str): The ID of the user whose permissions need to be checked
 required_permissions (list): A list of permissions to check against the user's permissions

Returns:
 bool: True if the user has all the required permissions, False otherwise
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""
', '

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
 object_id (str): The ID of the object to be removed
 sprint_id (str): The ID of the project from which the object should be removed

Returns:
 list: Returns the updated list of sprint objects
""""""
', '

def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
 work_id (str): The ID of the work item for which the estimation is to be made

Returns:
 float: Estimated hours required to complete the work item
""""""
', '

def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
 work_item_id (str): The ID of the work item that is a duplicate
 duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
 bool: True if the item is successfully marked, False otherwise
""""""
', '

def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
 user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
 list: List of completed task IDs
""""""
', '

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
 group_id (str): The ID of the group

Returns:
 list: User IDs belonging to the group
""""""
', '

def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
 user_ids (list): A list of user IDs to be removed from the group
 group_id (str): The ID of the group from which the users should be removed

Returns:
 bool: Status of the removal
""""""
', '

def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
 object_ids (list): A list of object IDs

Returns:
 str: The ID of the generated report
""""""
', '

def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
 work_type (str): The type of the work items to filter by
 tag (str): The tag to filter the work items

Returns:
 list: List of work items with the given tag
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""


def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the latest sprint report for completed tasks in project ""PRJ-456"" and update the user ID ""usr_789"" to status ""active"".","var_1 = get_sprint_id()
var_2 = create_report_for_sprint(sprint_id=var_1, report_type=""completed_tasks"")
var_3 = search_object_by_name(query=""PRJ-456"")
var_4 = update_user_ID(user_id=""usr_789"", status=""active"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
 user_id (str): The ID of the user whose status is to be updated
 status (str): The new status to apply to the user account

Returns:
 str: updated User Id
""""""
', '

def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
 project_id (str): The ID of the project containing the tasks
 completed_since (str): Archive tasks completed after this timestamp

Returns:
 int: Number of tasks archived
""""""
', 'def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
 issue_ids (list): A list of issue IDs to be linked to the project
 project_id (str): The ID of the project to which the issues should be linked

Returns:
 bool: Status of the linking action
""""""
', '

def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
 project_id (str): The ID of the project to validate

Returns:
 bool: True if completed, False otherwise
""""""
', '

def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
 primary_record_id (str): The ID of the primary record to keep
 duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
 bool: True if the merge was successful; otherwise False
""""""
', '

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 float: Estimated effort in hours
""""""
', 'def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
 work_item_ids (list): A list of work item IDs for which due dates are required
 urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
 list: Due dates for the specified work items
""""""
', '

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
 task_id (str): The ID of the task
 complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
 float: Estimated duration in hours
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""
', '

def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
 task_id (str): The ID of the task to be marked as complete

Returns:
 bool: True if marked successfully, False otherwise
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Assign issues with severity ""blocker"" to user ""EngineerAbhinav"", then generate a detailed progress report for project ""PX-987"".","var_1 = works_list(type=[""issue""], ticket.severity=[""blocker""])
var_2 = search_object_by_name(query=""EngineerAbhinav"")
var_3 = assign_issues_to_user(issue_ids=var_1, user_id=var_2)
var_4 = search_object_by_name(query=""PX-987"")
var_5 = generate_progress_report(project_id=var_4, report_format=""detailed"")","

def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""
def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
 issue_ids (list): A list of issue IDs that need to be assigned
 user_id (str): The user ID to whom the issues will be assigned

Returns:
 None
""""""
', '

def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
 ticket_id (str): The ID of the ticket to be marked for review
 reviewer_id (str): The ID of the user who should review the ticket

Returns:
 None
""""""
', '

def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
 task_ids (list): List of task IDs to filter
 completed (bool): The completion status to filter by. Default is 'True'

Returns:
 list: List of task IDs that match the completion status
""""""
', '
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
 user_id (str): The ID of the user whose status is to be updated
 status (str): The new status to apply to the user account

Returns:
 str: updated User Id
""""""
', '

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which the progress report is needed
 report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
 str: The generated progress report
""""""
', '

def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
 user_id (str): The ID of the user to set permissions for
 permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
 bool: True if the permission was set successfully, False otherwise
""""""
', '

def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
 report_type (str): The type of report to generate
 subject_id (str): The ID of the subject for the report
 include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
 str: The ID of the generated report
""""""
', '

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
 task_id (str): The ID of the task to be converted

Returns:
 str: The ID of the newly created ticket
""""""
', 'def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
 ticket_ids (list): A list of ticket IDs to be assigned
 user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
 None
""""""
', '

def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
 doc_id (str): The ID of the document to which related documents should be linked
 related_doc_ids (list): A list of IDs for related documents

Returns:
 bool: True if the operation was successful, False otherwise
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Assign all tasks created by user ""TeamLead"" to user ""EmployeeA"", then calculate the progress percentage of the project ""ProjectX"".","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = search_object_by_name(query=""EmployeeA"")
var_3 = works_list(created_by=[var_1], type=[""task""])
var_4 = assign_tasks_to_employee(task_ids=var_3, employee_id=var_2)
var_5 = search_object_by_name(query=""ProjectX"")
var_6 = calculate_progress_percentage(project_id=var_5)","

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task is assigned

Returns:
 None
""""""
', '

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""
', '

def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
 project_id (str): The ID of the project for which to calculate progress

Returns:
 float: The percentage of project completion
""""""
', '

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
 task_ids (list): A list of task IDs to filter
 due_date (str): The due date to filter tasks by

Returns:
 list: List of task IDs that have the specified due date
""""""
', '

def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
 email (str): The email address of the user to find

Returns:
 str: ID of the user
""""""
', '

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
 work_id (str): The ID of the work item to calculate the estimated time

Returns:
 float: Estimated completion time in hours
""""""
', '

def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
 work_id (str): The ID of the work item for which the estimation is to be made

Returns:
 float: Estimated hours required to complete the work item
""""""
', '

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
 report_type (str): The type of report to generate
 data_set_id (str): The ID of the data set to be used for the report

Returns:
 str: A report data string or ID depending on internal implementation
""""""
', '

def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
 user_id (str): The ID of the user
 project_id (str, optional): The ID of the project to filter tasks

Returns:
 list: List of task IDs completed by the user
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Assign the task with ID ""TASK-456"" to user ""EmployeeParthvi"", then check if part ""PART-789"" is available in inventory.","var_1 = assign_task_to_user(task_id=""TASK-456"", user_id=""EmployeeParthvi"")
var_2 = check_availability_of_part(part_id=""PART-789"")","

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task is assigned

Returns:
 None
""""""
', '

def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
 project_id (str): The ID of the project to summarize

Returns:
 str: A summary report of the project
""""""
', '

def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
 ticket_id (str): The ID of the ticket to be updated
 new_status (str): The new status to update the ticket with

Returns:
 bool: True if the update was successful, otherwise False
""""""
', '

def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
 part_id (str): The ID of the part to check for availability

Returns:
 bool: True if the part is available, False otherwise
""""""
', '

def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
 project_id (str): The ID of the project to track

Returns:
 float: Percentage of the project completed
""""""
', '

def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
 work_type (str): The type of the work items to filter by
 tag (str): The tag to filter the work items

Returns:
 list: List of work items with the given tag
""""""
', '

def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
 budget_id (str): The ID of the budget to calculate

Returns:
 float: The amount of remaining budget
""""""
', '

def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
 user_id (str): The ID of the user whose activity is being logged
 activity_description (str): A description of the activity

Returns:
 bool: True if the logging was successful, False otherwise
""""""
', '

def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
 project_id (str): The ID of the project for which to calculate progress

Returns:
 float: The percentage of project completion
""""""
', '

def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
 object_ids (list): List of object IDs to delete

Returns:
 bool: True if objects were successfully deleted, False otherwise
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the ID of the current sprint, calculate the estimated completion time for work items owned by ""TeamLead"", and assign those tasks to user ""JuniorDev"".","var_1 = get_sprint_id()
var_2 = who_am_i()
var_3 = works_list(owned_by=[var_2], type=[""task""])
var_4 = calculate_estimate_completion_time(work_id=var_3)
var_5 = search_object_by_name(query=""JuniorDev"")
var_6 = assign_tasks_to_user(task_ids=var_3, user_id=var_5)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task is assigned

Returns:
 None
""""""
', '

def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
 user_id (str): The ID of the user to be removed
 project_id (str): The ID of the project from which the user is to be removed

Returns:
 bool: True if the user is successfully removed, False otherwise
""""""', '

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
 work_id (str): The ID of the work item to be reassigned
 new_owner_id (str): The user ID of the new owner

Returns:
 bool: True if reassignment is successful, False otherwise
""""""
', '

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
 group_id (str): The ID of the group

Returns:
 list: User IDs belonging to the group
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""
', '

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
 work_id (str): The ID of the work item to calculate the estimated time

Returns:
 float: Estimated completion time in hours
""""""
', '

def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
 budget_id (str): The ID of the budget to calculate

Returns:
 float: The amount of remaining budget
""""""
', '

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
 data_point_ids (list): List of data point IDs to validate

Returns:
 list: Validation results with status (True or False) for each data point
""""""
', '

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
 list: Comments associated with the ticket
""""""
', '

def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
 task_ids (list): List of task IDs to be assigned
 user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Assign high severity tickets to user ""TechLead"", check their permission for the tickets, and then summarize the tickets.","var_1 = search_object_by_name(query=""TechLead"")
var_2 = works_list(type=[""ticket""], ticket.severity=[""high""])
var_3 = assign_tasks_to_employee(task_ids=var_2, employee_id=var_1)
var_4 = check_object_permission(user_id=var_1, object_id=var_2)
var_5 = summarize_objects(objects=var_2)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""

def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
 ticket_id (str): The ID of the ticket to be assigned
 user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""
', '

def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: User IDs of the team members
""""""
', '

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""
', '

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
 report_type (str): The type of report to generate
 data_set_id (str): The ID of the data set to be used for the report

Returns:
 str: A report data string or ID depending on internal implementation
""""""
', '

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""
', '

def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
 sprint_id (str): The ID of the ticket

Returns:
 list: A list of changes made to the sprint
""""""
', '

def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
 object_id (str): The ID of the object to be removed from the archive

Returns:
 bool: True if the object was successfully removed, False otherwise
""""""
', '

def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
 ticket_id (str): The ID of the ticket to be marked for review
 reviewer_id (str): The ID of the user who should review the ticket

Returns:
 None
""""""
', '

def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
 object_id (str): The ID of the object to remove

Returns:
 None
""""""
', '

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
 user_id (str): The ID of the user
 object_id (str): The ID of the object to check permission for

Returns:
 bool: True if the user has permission, False otherwise
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the due dates for work items owned by user ""TeamLead"" with high urgency and notify the user of any overdue tasks.","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = works_list(owned_by=[var_1])
var_3 = calculate_due_dates(work_item_ids=var_2, urgency_level=""high"")
var_4 = notify_user_of_overdue_tasks(user_id=var_1)","

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""

def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
 work_item_ids (list): A list of work item IDs for which due dates are required
 urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
 list: Due dates for the specified work items
""""""
', '

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
 feature_id (str): The ID of the feature to toggle access
 user_id (str): The ID of the user whose access will be toggled
 enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
 bool: The resulting access status
""""""
', '

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
 object_id (str): The ID of the object to check

Returns:
 bool: True if the object exists, otherwise False
""""""
', '

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 due_date (str): The new due date for the work item

Returns:
 None: Indicates that the operation was executed without returning any value
""""""
', '

def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
 user_id (str): The ID of the user to check for overdue tasks

Returns:
 None
""""""
', '

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
 primary_work_id (str): The ID of the primary work item
 duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
 bool: True if merge was successful, otherwise False
""""""
', 'def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
 issue_ids (list): A list of issue IDs that need to be assigned
 user_id (str): The user ID to whom the issues will be assigned

Returns:
 None
""""""
', '

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
 work_id (str): The ID of the work item to be reassigned
 new_owner_id (str): The user ID of the new owner

Returns:
 bool: True if reassignment is successful, False otherwise
""""""
', '

def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
 title (str): The title of the new ticket
 description (str): A detailed description of the issue or request
 reported_by (str): The ID of the user reporting the ticket

Returns:
 str: The ID of the newly created ticket
""""""
', '

def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
 user_id (str): The ID of the user with whom to schedule a meeting
 duration (int): Duration of the meeting in minutes, default is '30'
 urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
 str: The ID of the scheduled meeting
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""



def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Fetch the ticket history for ticket ID ""TICK123"", summarize the history records, and then update the ticket's contact information with a new email ""user@example.com"".","var_1 = fetch_ticket_history(ticket_id=""TICK123"")
var_2 = summarize_objects(objects=var_1)
var_3 = search_object_by_name(query=""TICK123"")
var_4 = update_contact_information(contact_id=var_3, new_email=""user@example.com"")","

def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""

def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
 department_id (str): The ID of the department to filter users
 active_only (bool): Filters for only active users if set to True

Returns:
 list: Users in the specified department
""""""
', '

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
 user_id (str): The ID of the user whose workload is to be retrieved

Returns:
 list: A list containing workload details
""""""
', '

def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
 ticket_id (str): The ID of the ticket for which the history is requested
 history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
 list: A list of history records for the ticket
""""""
', '

def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
 keyword (str): The keyword to search for in the documents

Returns:
 str: ID of the document containing the keyword
""""""', '

def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
 contact_id (str): The ID of the contact to update
 new_phone (str): The new phone number for the contact, default is 'None'
 new_email (str): The new email address for the contact, default is 'None'

Returns:
 bool: Status of the update operation
""""""
', '

def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
 project_id (str): The ID of the project to be analyzed

Returns:
 str: Estimated date of completion
""""""
', '

def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
 user_ids (list): List of user IDs whose roles should be updated
 new_role (str): The new role to assign

Returns:
 int: Number of users successfully updated
""""""
', 'def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
 issue_ids (list): A list of issue IDs to be linked to the project
 project_id (str): The ID of the project to which the issues should be linked

Returns:
 bool: Status of the linking action
""""""
', '

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
 report_type (str): The type of report to generate
 data_set_id (str): The ID of the data set to be used for the report

Returns:
 str: A report data string or ID depending on internal implementation
""""""
', '

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""


def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve all work items with severity ""high"" within the date range ""2023-01-01"" to ""2023-01-31"", calculate the total expense of these items, and reassign their ownership to user ""NewOwner123"".","var_1 = filter_work_by_date_range(start_date=""2023-01-01"", end_date=""2023-01-31"", work_type=[""ticket""])
var_2 = works_list(ticket.severity=[""high""], type=[""ticket""])
var_3 = calculate_expense_totals(expense_ids=var_1)
var_4 = search_object_by_name(query=""NewOwner123"")
var_5 = reassign_work_item_owner(work_id=var_2, new_owner_id=var_4)","def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
 start_date (str): The start date of the desired date range
 end_date (str): The end date of the desired date range
 work_type (list): Optional filter for type of work

Returns:
 list: Work items within the specified date range
""""""
', '

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
 expense_ids (list): List of expense IDs to calculate the total amount

Returns:
 float: The total amount of the expenses
""""""
', '

def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
 project_id (str): The ID of the project for which the budget is calculated
 cost_limit (float): The cost limit for the project's budget

Returns:
 float: The amount allocated to the project budget
""""""
', '

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
 work_id (str): The ID of the work item to estimate cost for
 cost_per_hour (float): The cost per hour. Default is '100'

Returns:
 float: Estimated cost
""""""', '

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
 work_id (str): The ID of the work item to be reassigned
 new_owner_id (str): The user ID of the new owner

Returns:
 bool: True if reassignment is successful, False otherwise
""""""
', '

def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
 user_id (str): The ID of the user to check for overdue tasks

Returns:
 None
""""""
', '

def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
 report_template_id (str): The ID of the report template to use
 data_source_id (str): The ID of the data source

Returns:
 str: Generated report
""""""
', '

def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
 project_id (str): The ID of the project for which the timeline is requested

Returns:
 list: Key milestones and dates for the project timeline
""""""
', 'def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task is assigned

Returns:
 None
""""""
', '

def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
 primary_ticket_id (str): The ID of the primary ticket that remains
 duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
 None
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Merge notes from ticket ""TICKET-4321"", extract keywords from the merged note, and then find similar work items based on those keywords.","var_1 = merge_ticket_notes(ticket_id=""TICKET-4321"", note_ids=[""note1"", ""note2"", ""note3""], updated_by=""user123"")
var_2 = extract_keywords_from_text(text=var_1)
var_3 = search_object_by_name(query=var_2[0])
var_4 = get_similar_work_items(work_id=var_3)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
 ticket_id (str): The ID of the ticket where the merged note will be added
 note_ids (list): List of note IDs that will be merged into the ticket
 updated_by (str): The ID of the user performing the merge

Returns:
 str: ID of the updated ticket note
""""""
', '

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
 text (str): The text from which keywords are to be extracted

Returns:
 list: A list of extracted keywords
""""""
', '

def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
 primary_ticket_id (str): The ID of the primary ticket that remains
 duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
 None
""""""
', '

def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
 list: Ticket IDs that are currently blocked
""""""', '

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
 task_id (str): The ID of the task to be converted
 parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
 bool: True if the conversion was successful, False otherwise
""""""
', '

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
 event_type (str): The type of event to log
 description (str): A brief description of the event
 user_id (str): The ID of the user involved in the event, if applicable

Returns:
 str: The ID of the logged event
""""""
', '

def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
 user_id (str): The ID of the user whose completed items are being requested

Returns:
 list: Completed items by the user
""""""
', '

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
 task_id (str): The ID of the task for which dependencies are requested

Returns:
 list: Dependency task IDs
""""""
', '

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
 work_id (str): The ID of the work item to be reassigned
 new_owner_id (str): The user ID of the new owner

Returns:
 bool: True if reassignment is successful, False otherwise
""""""
', 'def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
 work_item_ids (list): A list of work item IDs for which due dates are required
 urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
 list: Due dates for the specified work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the list of tasks assigned to user ""EngineerPatwa"" that are marked for review by ""SeniorQANisarg"", summarize these tasks, and check if ""EngineerPatwa"" has permission to access the project timeline for project ""PRJ-456"".","var_1 = search_object_by_name(query=""EngineerPatwa"")
var_2 = search_object_by_name(query=""SeniorQANisarg"")
var_3 = works_list(created_by=[var_1], type=[""task""], owned_by=[var_2])
var_4 = summarize_objects(objects=var_3)
var_5 = search_object_by_name(query=""PRJ-456"")
var_6 = check_object_permission(user_id=var_1, object_id=var_5)","

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
 ticket_id (str): The ID of the ticket where the merged note will be added
 note_ids (list): List of note IDs that will be merged into the ticket
 updated_by (str): The ID of the user performing the merge

Returns:
 str: ID of the updated ticket note
""""""
', '

def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
 ticket_id (str): The ID of the ticket to be marked for review
 reviewer_id (str): The ID of the user who should review the ticket

Returns:
 None
""""""
', '

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
 user_id (str): The ID of the user
 object_id (str): The ID of the object to check permission for

Returns:
 bool: True if the user has permission, False otherwise
""""""
', '

def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
 user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
 list: The list of permissions for the user
""""""
', '

def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
 project_id (str): The ID of the project for which the timeline is requested

Returns:
 list: Key milestones and dates for the project timeline
""""""
', '

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
 user_id (str): The ID of the user whose tasks are to be listed
 completed (bool): If True, only completed tasks are returned

Returns:
 list: A list of tasks assigned to the user
""""""
', '

def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
 prefix (str): A prefix for the identifier
 use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
 str: The generated unique identifier
""""""

```', '

def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
 work_item_id (str): The ID of the work item to check
 status_options (list): A list of valid status options

Returns:
 bool: True if status is valid, False otherwise
""""""
', '

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
 object_id (str): The ID of the object to check

Returns:
 bool: True if the object exists, otherwise False
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the total workload for the current sprint, and then check if user ""QAEngineer"" has permission to extend the sprint end date.","var_1 = get_sprint_id()
var_2 = retrieve_sprint_workload(sprint_id=var_1)
var_3 = search_object_by_name(query=""QAEngineer"")
var_4 = check_object_permission(user_id=var_3, object_id=var_1)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
 sprint_id (str): The ID of the sprint for workload calculation

Returns:
 float: Total workload in hours
""""""
', 'def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
 issue_ids (list): A list of issue IDs to be linked to the project
 project_id (str): The ID of the project to which the issues should be linked

Returns:
 bool: Status of the linking action
""""""
', '

def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
 ticket_id (str): The ID of the ticket for which the history is requested
 history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
 list: A list of history records for the ticket
""""""
', '

def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: A chronological list of changes made to the work item
""""""
', '

def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
 sprint_id (str): The ID of the sprint to extend
 new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
 bool: True if the sprint end date was extended, False otherwise
""""""
', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""
', '

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
 user_id (str): The ID of the user
 object_id (str): The ID of the object to check permission for

Returns:
 bool: True if the user has permission, False otherwise
""""""
', 'def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
 issue_id (str): The ID of the issue to be updated
 new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
 list: Comments associated with the ticket
""""""
', '

def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be determined

Returns:
 int: The number of tasks assigned to the user
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Update the status of issue ""ISSUE-456"" to ""resolved"", validate its completeness, and if complete, log the event with the description ""Issue ISSUE-456 resolved and verified for completeness"".","var_1 = update_issue_status(issue_id=""ISSUE-456"", new_status=""resolved"")
var_2 = validate_work_item_completeness(work_id=""ISSUE-456"")
var_3 = log_system_event(event_type=""issue_update"", description=""Issue ISSUE-456 resolved and verified for completeness"", user_id=None)","def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
 issue_id (str): The ID of the issue to be updated
 new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
 project_id (str): The ID of the project for which the budget is calculated
 cost_limit (float): The cost limit for the project's budget

Returns:
 float: The amount allocated to the project budget
""""""
', '

def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
 user_ids (list): A list of user IDs to be removed from the group
 group_id (str): The ID of the group from which the users should be removed

Returns:
 bool: Status of the removal
""""""
', '

def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
 report_template_id (str): The ID of the report template to use
 data_source_id (str): The ID of the data source

Returns:
 str: Generated report
""""""
', 'def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
 project_ids (list): A list of project IDs to filter
 status (str): The status to filter by, default is 'active'

Returns:
 list: Project IDs matching the status
""""""
', '

def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
 project_id (str): The ID of the project to track

Returns:
 float: Percentage of the project completed
""""""
', '

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
 object_id (str): The ID of the object to be removed
 sprint_id (str): The ID of the project from which the object should be removed

Returns:
 list: Returns the updated list of sprint objects
""""""
', '

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
 event_type (str): The type of event to log
 description (str): A brief description of the event
 user_id (str): The ID of the user involved in the event, if applicable

Returns:
 str: The ID of the logged event
""""""
', '

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
 department_id (str): The ID of the department to list members for

Returns:
 list: User IDs of all the members in the department
""""""
', '

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
 work_id (str): The ID of the work item to check

Returns:
 bool: True if the work item is complete, False if it lacks information
""""""



def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""


def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the estimated effort for work items owned by ""TeamLead"" and update their status to ""in_progress"".","var_1 = who_am_i()
var_2 = works_list(owned_by=[""TeamLead""], type=[""issue"", ""ticket"", ""task""])
var_3 = calculate_estimated_effort(work_id=var_2[0])
var_4 = update_issue_status(issue_id=var_2[0], new_status=""in_progress"")","

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
 issue_id (str): The ID of the issue to be updated
 new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 float: Estimated effort in hours
""""""
', '

def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
 project_id (str): The ID of the project to which resources are allocated
 resource_ids (list): A list of resource IDs to allocate to the project

Returns:
 bool: True if resources could be allocated, False otherwise
""""""
', '

def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be determined

Returns:
 int: The number of tasks assigned to the user
""""""
', '

def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
 work_item_id (str): The ID of the work item

Returns:
 float: The number of hours until the deadline
""""""
', '

def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
 title (str): The title of the new ticket
 description (str): A detailed description of the issue or request
 reported_by (str): The ID of the user reporting the ticket

Returns:
 str: The ID of the newly created ticket
""""""
', 'def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
 sprint_id (str): The ID of the sprint for workload calculation

Returns:
 float: Total workload in hours
""""""
', '

def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
 primary_ticket_id (str): The ID of the primary ticket that remains
 duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
 None
""""""
', '

def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
 user_id (str): The ID of the user whose completed items are being requested

Returns:
 list: Completed items by the user
""""""
', '

def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
 object_ids (list): A list of object IDs

Returns:
 str: The ID of the generated report
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Archive all completed tickets created by ""SupportAgent"", then generate a report for those with the tag ""Resolved"".","var_1 = search_object_by_name(query=""SupportAgent"")
var_2 = works_list(created_by=[var_1], type=[""ticket""])
var_3 = archive_completed_work(work_ids=var_2)
var_4 = search_object_by_name(query=""Resolved"")
var_5 = generate_report_by_tag(tag_id=var_4, include_archived=True)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
 work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
 int: The number of work items successfully archived
""""""
', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
 ticket_id (str): The ID of the ticket where the merged note will be added
 note_ids (list): List of note IDs that will be merged into the ticket
 updated_by (str): The ID of the user performing the merge

Returns:
 str: ID of the updated ticket note
""""""
', '

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
 start_date (str): The start date for the filter range (format: YYYY-MM-DD)
 end_date (str): The end date for the filter range (format: YYYY-MM-DD)
 work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
 list: Work items in the specified date range
""""""
', '

def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
 work_id (str): The ID of the work item for which the estimation is to be made

Returns:
 float: Estimated hours required to complete the work item
""""""
', '

def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
 user_id (str): The ID of the user whose activity is being logged
 activity_description (str): A description of the activity

Returns:
 bool: True if the logging was successful, False otherwise
""""""
', '

def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
 user_id (str): The ID of the user whose account is to be deactivated
 reason (str): The reason for deactivating the account

Returns:
 bool: True if the account was successfully deactivated; otherwise False
""""""
', '

def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
 primary_record_id (str): The ID of the primary record to keep
 duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
 bool: True if the merge was successful; otherwise False
""""""
', '

def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
 object_id (str): The ID of the object to remove

Returns:
 None
""""""
', '

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""
', '

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
 primary_work_id (str): The ID of the primary work item
 duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
 bool: True if merge was successful, otherwise False
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Archive tickets older than ""2022-01-01"" that are still active, calculate the estimated effort for each, and summarize the archived tickets.","var_1 = archive_old_tickets(older_than_date=""2022-01-01"", active_status=True)
var_2 = calculate_estimated_effort(work_id=var_1)
var_3 = summarize_objects(objects=[var_1])","def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
 older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
 active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
 str: ID of tickets archived
""""""
', '

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 float: Estimated effort in hours
""""""
', '

def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
 doc_id (str): The ID of the document to which related documents should be linked
 related_doc_ids (list): A list of IDs for related documents

Returns:
 bool: True if the operation was successful, False otherwise
""""""
', 'def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
 work_item_ids (list): A list of work item IDs for which due dates are required
 urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
 list: Due dates for the specified work items
""""""
', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""
', '

def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
 project_id (str): The ID of the project to track

Returns:
 float: Percentage of the project completed
""""""
', '

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task will be assigned

Returns:
 bool: True if assignment was successful, otherwise False
""""""
', '

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
 work_id (str): The ID of the work item to calculate the estimated time

Returns:
 float: Estimated completion time in hours
""""""
', '

def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
 sprint_id (str): The ID of the sprint to extend
 new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
 bool: True if the sprint end date was extended, False otherwise
""""""
', '

def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
 user_id (str): The ID of the user to check for overdue tasks

Returns:
 None
""""""



def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""


def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""


def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Fetch work items created by user ""User123"", filter them for type ""ticket"", and assign them to user ""Agent007"".","var_1 = search_object_by_name(query=""User123"")
var_2 = fetch_user_created_work(user_id=var_1, work_type=[""ticket""])
var_3 = search_object_by_name(query=""Agent007"")
var_4 = assign_tickets_to_user(ticket_ids=var_2, user_id=var_3)","

def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
 task_ids (list): List of task IDs to be assigned
 user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""
', '

def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
 user_id (str): The ID of the user whose work items are to be retrieved
 work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket''']

Returns:
 list: Work items created by the user
""""""
', '

def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
 object_id (str): The ID of the primary object
 related_object_id (str): The ID of the object to relate to the primary

Returns:
 bool: True if the objects were successfully linked, False otherwise
""""""
', 'def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
 ticket_ids (list): A list of ticket IDs to be assigned
 user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
 None
""""""
', '

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
 department_id (str): The ID of the department to list members for

Returns:
 list: User IDs of all the members in the department
""""""
', '

def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
 ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
 bool: True if the ticket was marked as resolved, False otherwise
""""""
', '

def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
 work_item_id (str): The ID of the work item to check
 status_options (list): A list of valid status options

Returns:
 bool: True if status is valid, False otherwise
""""""
', '

def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
 object_id (str): The ID of the object to be removed from the archive

Returns:
 bool: True if the object was successfully removed, False otherwise
""""""
', 'def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
 start_date (str): The start date of the desired date range
 end_date (str): The end date of the desired date range
 work_type (list): Optional filter for type of work

Returns:
 list: Work items within the specified date range
""""""
', '

def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
 archive_id (str): The ID of the archive from which to retrieve documents
 keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
 list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""


def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the contact information for user ""AgentSmith"", check the availability of part ""RX-78"", and list all work items related to this part.","var_1 = search_object_by_name(query=""AgentSmith"")
var_2 = retrieve_user_contact_info(user_id=var_1)
var_3 = check_availability_of_part(part_id=""RX-78"")
var_4 = works_list(applies_to_part=[""RX-78""])","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
 task_ids (list): A list of task IDs whose status needs updating
 new_status (str): The new status to apply to the tasks

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
 part_id (str): The ID of the part to check for availability

Returns:
 bool: True if the part is available, False otherwise
""""""
', 'def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
 ticket_id (str): The ID of the ticket to be assigned
 user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""
', '

def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
 user_id (str): The ID of the user to be removed
 project_id (str): The ID of the project from which the user is to be removed

Returns:
 bool: True if the user is successfully removed, False otherwise
""""""', '

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
 user_id (str): The ID of the user for whom to calculate the workload

Returns:
 int: The total number of open work items
""""""
', '

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
 department_id (str): The ID of the department to list members for

Returns:
 list: User IDs of all the members in the department
""""""
', '

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
 part_id (str): The ID of the part to check in inventory
 minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
 bool: True if the minimum quantity is available; otherwise False
""""""
', '

def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
 user_id (str): The ID of the user whose activities are to be listed
 limit (int): The maximum number of recent activities to return

Returns:
 list: Recent activities of the user
""""""
', '

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact info is requested

Returns:
 str: Contact information of the user
""""""
', '

def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
 object_ids (list): A list of object IDs

Returns:
 str: The ID of the generated report
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Fetch users from group ""EngineeringTeam"", update their roles to ""Lead Engineer"", and then get a list of work items owned by these users to summarize and prioritize.","var_1 = fetch_users_from_group(group_id=""EngineeringTeam"")
var_2 = batch_update_user_roles(user_ids=var_1, new_role=""Lead Engineer"")
var_3 = works_list(owned_by=var_1)
var_4 = summarize_objects(objects=var_3)
var_5 = prioritize_objects(objects=var_3)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
 user_ids (list): List of user IDs whose roles should be updated
 new_role (str): The new role to assign

Returns:
 int: Number of users successfully updated
""""""
', '

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
 report_type (str): The type of report to generate
 data_set_id (str): The ID of the data set to be used for the report

Returns:
 str: A report data string or ID depending on internal implementation
""""""
', '

def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
 budget_id (str): The ID of the budget to calculate

Returns:
 float: The amount of remaining budget
""""""
', '

def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
 work_item_id (str): The ID of the work item

Returns:
 float: The number of hours until the deadline
""""""
', '
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
 user_id (str): The ID of the user whose status is to be updated
 status (str): The new status to apply to the user account

Returns:
 str: updated User Id
""""""
', '

def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
 task_ids (list): List of task IDs to filter
 completed (bool): The completion status to filter by. Default is 'True'

Returns:
 list: List of task IDs that match the completion status
""""""
', '

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
 group_id (str): The ID of the group

Returns:
 list: User IDs belonging to the group
""""""
', '

def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
 work_item_id (str): The ID of the work item that is a duplicate
 duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
 bool: True if the item is successfully marked, False otherwise
""""""
', '

def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
 contact_id (str): The ID of the contact to update
 new_phone (str): The new phone number for the contact, default is 'None'
 new_email (str): The new email address for the contact, default is 'None'

Returns:
 bool: Status of the update operation
""""""
', '

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
 user_id (str): The ID of the user
 object_id (str): The ID of the object to check permission for

Returns:
 bool: True if the user has permission, False otherwise
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Update the role of user ""AnalystAnne"" to ""Senior Analyst"" and generate a summary report of all work items they own.","var_1 = search_object_by_name(query=""AnalystAnne"")
var_2 = batch_update_user_roles(user_ids=[var_1], new_role=""Senior Analyst"")
var_3 = works_list(owned_by=[var_1])
var_4 = generate_summary_report(object_ids=var_3)","

def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
 user_ids (list): List of user IDs whose roles should be updated
 new_role (str): The new role to assign

Returns:
 int: Number of users successfully updated
""""""
', '

def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
 work_item_id (str): The ID of the work item to update
 new_stage (str): The new stage to which the work item should be moved

Returns:
 bool: True if the stage is successfully updated, False otherwise
""""""', '

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', '

def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
 task_ids (list): List of task IDs to filter
 completed (bool): The completion status to filter by. Default is 'True'

Returns:
 list: List of task IDs that match the completion status
""""""
', '

def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
 ticket_id (str): The ID of the ticket to be marked for review
 reviewer_id (str): The ID of the user who should review the ticket

Returns:
 None
""""""
', '

def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
 primary_object_id (str): The ID of the primary object
 duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
 bool: True if the merge was successful, False otherwise
""""""
', '

def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
 contact_id (str): The ID of the contact to update
 new_email (str, optional): The new email address; defaults to None
 new_phone (str, optional): The new phone number; defaults to None

Returns:
 bool: True if the update was successful; otherwise False
""""""
', '

def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
 object_ids (list): A list of object IDs

Returns:
 str: The ID of the generated report
""""""
', '

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
 primary_work_id (str): The ID of the primary work item
 duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
 bool: True if merge was successful, otherwise False
""""""
', '

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
 user_id (str): The ID of the user whose workload is to be retrieved

Returns:
 list: A list containing workload details
""""""



def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""


def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the avatar for user ""User123"", update their contact information with a new phone number ""555-0199"", and fetch all their tasks, including completed ones.","var_1 = get_user_avatar(user_id=""User123"")
var_2 = update_contact_info(contact_id=""User123"", new_phone=""555-0199"")
var_3 = fetch_user_tasks(user_id=""User123"", include_completed=True)","

def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
 user_ids (list): List of user IDs whose roles should be updated
 new_role (str): The new role to assign

Returns:
 int: Number of users successfully updated
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""
', '

def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
 contact_id (str): The ID of the contact to update
 new_email (str, optional): The new email address; defaults to None
 new_phone (str, optional): The new phone number; defaults to None

Returns:
 bool: True if the update was successful; otherwise False
""""""
', 'def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
 sprint_id (str): The ID of the sprint for workload calculation

Returns:
 float: Total workload in hours
""""""
', '

def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
 record_ids (list): List of record IDs to filter
 start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
 end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
 list: Filtered record IDs
""""""
', 'def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
 issue_id (str): The ID of the issue to be updated
 new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
 user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
 str: URL of the user's avatar image
""""""
', '

def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
 primary_object_id (str): The ID of the primary object
 duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
 bool: True if the merge was successful, False otherwise
""""""
', '

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""
', '

def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
 user_id (str): The ID of the user to set permissions for
 permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
 bool: True if the permission was set successfully, False otherwise
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""


def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""


def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the budget allocation for project ""PRJ-456"", then fetch and summarize all tasks owned by user ""BudgetMaster"" related to this project.","var_1 = calculate_budget_allocation(project_id=""PRJ-456"", cost_limit=50000)
var_2 = search_object_by_name(query=""BudgetMaster"")
var_3 = works_list(owned_by=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)","def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
 project_id (str): The ID of the project for which the budget is calculated
 cost_limit (float): The cost limit for the project's budget

Returns:
 float: The amount allocated to the project budget
""""""
', '

def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
 project_id (str): The ID of the project to be analyzed

Returns:
 str: Estimated date of completion
""""""
', '

def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
 user_id (str): The ID of the user to be removed
 project_id (str): The ID of the project from which the user is to be removed

Returns:
 bool: True if the user is successfully removed, False otherwise
""""""', '

def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
 older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
 active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
 str: ID of tickets archived
""""""
', '

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
 issue_id (str): The ID of the issue to be updated
 solution_text (str): The description of the solution to apply to the issue

Returns:
 None
""""""
', '

def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be calculated

Returns:
 float: The calculated workload value
""""""
', '

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 float: Estimated effort in hours
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""
', '

def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', '

def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
 user_id (str): The ID of the user whose work items are to be retrieved
 work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket''']

Returns:
 list: Work items created by the user
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the remaining budget using budget ID ""BUD-456"", then estimate the cost for work item ""WORK-789"" and check if the budget is sufficient.","var_1 = calculate_budget_remaining(budget_id=""BUD-456"")
var_2 = estimate_cost_for_work(work_id=""WORK-789"")","

def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
 budget_id (str): The ID of the budget to calculate

Returns:
 float: The amount of remaining budget
""""""
', '

def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
 object_id (str): The ID of the primary object
 related_object_id (str): The ID of the object to relate to the primary

Returns:
 bool: True if the objects were successfully linked, False otherwise
""""""
', 'def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
 work_item_ids (list): A list of work item IDs for which due dates are required
 urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
 list: Due dates for the specified work items
""""""
', '

def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
 primary_ticket_id (str): The ID of the primary ticket that remains
 duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
 None
""""""
', '

def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
 user_id (str): The ID of the user whose permissions need to be checked
 required_permissions (list): A list of permissions to check against the user's permissions

Returns:
 bool: True if the user has all the required permissions, False otherwise
""""""
', '

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
 task_id (str): The ID of the task
 complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
 float: Estimated duration in hours
""""""
', '

def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
 sprint_id (str): The ID of the sprint for which to generate the report

Returns:
 str: The ID of the generated report
""""""
', '

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
 task_id (str): The ID of the task to be converted

Returns:
 str: The ID of the newly created ticket
""""""
', '

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""
', '

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
 work_id (str): The ID of the work item to estimate cost for
 cost_per_hour (float): The cost per hour. Default is '100'

Returns:
 float: Estimated cost
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the remaining budget using budget ID ""BUD-456"", log the calculation event, and generate a summary report for the associated project.","var_1 = calculate_budget_remaining(budget_id=""BUD-456"")
var_2 = log_system_event(event_type=""budget_calculation"", description=""Calculated remaining budget for BUD-456"")
var_3 = generate_project_summary(project_id=""BUD-456"")","

def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
 budget_id (str): The ID of the budget to calculate

Returns:
 float: The amount of remaining budget
""""""
', '

def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
 task_id (str): The ID of the task to be marked as complete

Returns:
 bool: True if marked successfully, False otherwise
""""""
', '

def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
 project_id (str): The ID of the project to summarize

Returns:
 str: A summary report of the project
""""""
', '

def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
 user_id (str): The ID of the user whose activities are to be listed
 limit (int): The maximum number of recent activities to return

Returns:
 list: Recent activities of the user
""""""
', '

def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
 project_id (str): The ID of the project to which resources are allocated
 resource_ids (list): A list of resource IDs to allocate to the project

Returns:
 bool: True if resources could be allocated, False otherwise
""""""
', '

def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
 user_id (str): The ID of the user whose account is to be deactivated
 reason (str): The reason for deactivating the account

Returns:
 bool: True if the account was successfully deactivated; otherwise False
""""""
', '

def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
 user_ids (list): A list of user IDs to be removed from the group
 group_id (str): The ID of the group from which the users should be removed

Returns:
 bool: Status of the removal
""""""
', '

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
 event_type (str): The type of event to log
 description (str): A brief description of the event
 user_id (str): The ID of the user involved in the event, if applicable

Returns:
 str: The ID of the logged event
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""
', '

def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
 object_ids (list): List of object IDs to delete

Returns:
 bool: True if objects were successfully deleted, False otherwise
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve all tasks completed by user ""QAEngineer42"", summarize the completed tasks, and then create a report for the current sprint including these summaries.","var_1 = search_object_by_name(query=""QAEngineer42"")
var_2 = fetch_user_tasks(user_id=var_1, include_completed=True)
var_3 = filter_tasks_by_completion(task_ids=var_2, completed=True)
var_4 = summarize_objects(objects=var_3)
var_5 = get_sprint_id()
var_6 = create_report_for_sprint(sprint_id=var_5, report_type=var_4)","

def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
 task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
 float: Total effort spent on the task
""""""
', '

def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
 task_ids (list): List of task IDs to filter
 completed (bool): The completion status to filter by. Default is 'True'

Returns:
 list: List of task IDs that match the completion status
""""""
', '

def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
 user_id (str): The ID of the user with whom to schedule a meeting
 duration (int): Duration of the meeting in minutes, default is '30'
 urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
 str: The ID of the scheduled meeting
""""""
', '

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
 user_id (str): The ID of the user whose workload is to be retrieved

Returns:
 list: A list containing workload details
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""
', '
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
 user_id (str): The ID of the user whose status is to be updated
 status (str): The new status to apply to the user account

Returns:
 str: updated User Id
""""""
', '

def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
 task_id (str): The ID of the task to be marked as complete

Returns:
 bool: True if marked successfully, False otherwise
""""""
', '

def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
 part_id (str): The ID of the part to check for availability

Returns:
 bool: True if the part is available, False otherwise
""""""
', '

def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
 user_id (str): The ID of the user to set permissions for
 permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
 bool: True if the permission was set successfully, False otherwise
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the estimated completion date for project ""PROJ-42"", calculate its overall progress percentage, and summarize any high-severity tickets related to it.","var_1 = calculate_estimated_completion(project_id=""PROJ-42"")
var_2 = calculate_progress(project_id=""PROJ-42"")
var_3 = works_list(type=[""ticket""], ticket.severity=[""high""], applies_to_part=[""PROJ-42""])
var_4 = summarize_objects(objects=var_3)","

def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
 project_id (str): The ID of the project to be analyzed

Returns:
 str: Estimated date of completion
""""""
', '

def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
 user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
 list: The list of permissions for the user
""""""
', '

def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
 str: The status of the ticket
""""""
', 'def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
 issue_id (str): The ID of the issue to be updated
 new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
 object_id (str): The ID of the object to be removed
 sprint_id (str): The ID of the project from which the object should be removed

Returns:
 list: Returns the updated list of sprint objects
""""""
', '

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""
', '

def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
 task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
 float: Total effort spent on the task
""""""
', '

def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
 keyword (str): The keyword to search for in the documents

Returns:
 str: ID of the document containing the keyword
""""""', '

def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: A chronological list of changes made to the work item
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the estimated completion date for project ""PRJ-456"", and filter all active projects to include this project if it matches the status. Then, get a list of all work items associated with ""PRJ-456"" and summarize them for a status update meeting.","var_1 = calculate_estimated_completion(project_id=""PRJ-456"")
var_2 = filter_projects_by_status(project_ids=[var_1], status=""active"")
var_3 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[var_1])
var_4 = summarize_objects(objects=var_3)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
 project_id (str): The ID of the project to be analyzed

Returns:
 str: Estimated date of completion
""""""
', '

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""
', 'def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
 project_ids (list): A list of project IDs to filter
 status (str): The status to filter by, default is 'active'

Returns:
 list: Project IDs matching the status
""""""
', '

def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', '

def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
 project_id (str): The ID of the project containing the tasks
 completed_since (str): Archive tasks completed after this timestamp

Returns:
 int: Number of tasks archived
""""""
', '

def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
 user_id (str): The ID of the user whose account is to be deactivated
 reason (str): The reason for deactivating the account

Returns:
 bool: True if the account was successfully deactivated; otherwise False
""""""
', '

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
 user_id (str): The ID of the user
 object_id (str): The ID of the object to check permission for

Returns:
 bool: True if the user has permission, False otherwise
""""""
', '

def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
 user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
 list: User permissions
""""""
', '

def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
 user_id (str): The ID of the user whose completed items are being requested

Returns:
 list: Completed items by the user
""""""
', '

def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
 sprint_id (str): The ID of the ticket

Returns:
 list: A list of changes made to the sprint
""""""



def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the project completion rate for project ""PRJ-456"" and update the contact information for the project lead with a new email ""lead@project456.com"".","var_1 = calculate_project_completion_rate(project_id=""PRJ-456"")
var_2 = search_object_by_name(query=""project lead for PRJ-456"")
var_3 = update_contact_info(contact_id=var_2, new_email=""lead@project456.com"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""


def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', '

def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
 contact_id (str): The ID of the contact to update
 new_email (str, optional): The new email address; defaults to None
 new_phone (str, optional): The new phone number; defaults to None

Returns:
 bool: True if the update was successful; otherwise False
""""""
', '

def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
 user_id (str): The ID of the user whose activities are to be listed
 limit (int): The maximum number of recent activities to return

Returns:
 list: Recent activities of the user
""""""
', '

def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
 user_id (str): The ID of the user whose skills are being queried

Returns:
 list: The skills of the user
""""""
', '

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', '

def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
 sprint_id (str): The ID of the ticket

Returns:
 list: A list of changes made to the sprint
""""""
', '

def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
 task_id (str): The ID of the task to be marked as complete

Returns:
 bool: True if marked successfully, False otherwise
""""""
', 'def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
 issue_ids (list): A list of issue IDs to be linked to the project
 project_id (str): The ID of the project to which the issues should be linked

Returns:
 bool: Status of the linking action
""""""
', 'def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task is assigned

Returns:
 None
""""""
', '

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
 work_id (str): The ID of the work item to estimate cost for
 cost_per_hour (float): The cost per hour. Default is '100'

Returns:
 float: Estimated cost
"""""""
"Calculate the project completion rate for project ""PROJ-001"" and filter the tasks by completion status, then prioritize those tasks.","var_1 = calculate_project_completion_rate(project_id=""PROJ-001"")
var_2 = fetch_user_tasks(user_id=var_1, include_completed=False)
var_3 = filter_tasks_by_completion(task_ids=var_2, completed=True)
var_4 = prioritize_objects(objects=var_3)","

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""


def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""


def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', 'def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
 project_ids (list): A list of project IDs to filter
 status (str): The status to filter by, default is 'active'

Returns:
 list: Project IDs matching the status
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""
', '

def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
 task_ids (list): List of task IDs to filter
 completed (bool): The completion status to filter by. Default is 'True'

Returns:
 list: List of task IDs that match the completion status
""""""
', '

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact info is requested

Returns:
 str: Contact information of the user
""""""
', '

def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
 object_id (str): The ID of the object for which history is requested

Returns:
 list: A list of changes made to the object
""""""
', '

def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
 title (str): The title of the new ticket
 description (str): A detailed description of the issue or request
 reported_by (str): The ID of the user reporting the ticket

Returns:
 str: The ID of the newly created ticket
""""""
', '

def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
 keyword (str): The keyword to search for in the documents

Returns:
 str: ID of the document containing the keyword
""""""', '

def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
 primary_task_id (str): The ID of the primary task which remains after the merge
 duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
 None
""""""
', '

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
 work_id (str): The ID of the work item to be reassigned
 new_owner_id (str): The user ID of the new owner

Returns:
 bool: True if reassignment is successful, False otherwise
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the total workload for user ""TeamLead"" and fetch their recent activity log.","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = calculate_workload_for_user(user_id=var_1)
var_3 = get_recent_activity_log(user_id=var_1)","

def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
 user_id (str): The ID of the user for whom to calculate the workload

Returns:
 int: The total number of open work items
""""""
', '

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact info is requested

Returns:
 str: Contact information of the user
""""""
', '

def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
 archive_id (str): The ID of the archive from which to retrieve documents
 keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
 list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""', '

def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
 user_id (str): The ID of the user to get activities for
 limit (int): The maximum number of activity log entries to return

Returns:
 list: Recent activity log entries
""""""
', '

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
 task_id (str): The ID of the task for which dependencies are requested

Returns:
 list: Dependency task IDs
""""""
', '

def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
 budget_id (str): The ID of the budget to calculate

Returns:
 float: The amount of remaining budget
""""""
', '

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
 group_id (str): The ID of the group

Returns:
 list: User IDs belonging to the group
""""""
', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""
', 'def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task is assigned

Returns:
 None
""""""
', '
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
 user_id (str): The ID of the user whose status is to be updated
 status (str): The new status to apply to the user account

Returns:
 str: updated User Id
""""""



def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check the availability of part ""ENG-456"", and if it is available, add all work items related to this part to the current sprint.","var_1 = check_availability_of_part(part_id=""ENG-456"")
var_2 = get_sprint_id()
var_3 = works_list(applies_to_part=[""ENG-456""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""


def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""



def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
 part_id (str): The ID of the part to check for availability

Returns:
 bool: True if the part is available, False otherwise
""""""
', '

def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
 doc_id (str): The ID of the document to which related documents should be linked
 related_doc_ids (list): A list of IDs for related documents

Returns:
 bool: True if the operation was successful, False otherwise
""""""
', '

def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
 object_ids (list): A list of object IDs

Returns:
 str: The ID of the generated report
""""""
', '

def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
 ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
 bool: True if the ticket was marked as resolved, False otherwise
""""""
', '

def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
 report_type (str): The type of report to generate
 subject_id (str): The ID of the subject for the report
 include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
 str: The ID of the generated report
""""""
', '

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
 user_id (str): The ID of the user whose workload is to be retrieved

Returns:
 list: A list containing workload details
""""""
', '

def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
 user_id (str): The ID of the user whose activity is being logged
 activity_description (str): A description of the activity

Returns:
 bool: True if the logging was successful, False otherwise
""""""
', '

def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact information is requested

Returns:
 str: The contact information of the user
""""""
', '

def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
 task_ids (list): List of task IDs to be assigned
 user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""
', '

def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
 project_id (str): The ID of the project for which the budget is calculated
 cost_limit (float): The cost limit for the project's budget

Returns:
 float: The amount allocated to the project budget
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check the inventory availability for part ""ENG-456"" and if it is available, assign the task to estimate its restocking cost to employee ""Emp123"".","var_1 = check_inventory_availability(part_id=""ENG-456"")
var_2 = generate_unique_identifier(prefix=""TaskEstimate"")
var_3 = create_actionable_tasks_from_text(text=""Estimate restocking cost for part ENG-456"")
var_4 = assign_tasks_to_employee(task_ids=[var_3], employee_id=""Emp123"")","

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
 part_id (str): The ID of the part to check in inventory
 minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
 bool: True if the minimum quantity is available; otherwise False
""""""
', '

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
 work_id (str): The ID of the work item to estimate cost for
 cost_per_hour (float): The cost per hour. Default is '100'

Returns:
 float: Estimated cost
""""""', '

def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
 prefix (str): A prefix for the identifier
 use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
 str: The generated unique identifier
""""""

```', '

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""
', '

def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
 work_item_id (str): The ID of the work item

Returns:
 float: The number of hours until the deadline
""""""
', '

def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
 user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
 str: URL of the user's avatar image
""""""
', 'def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
 department_id (str): The ID of the department to filter users
 active_only (bool): Filters for only active users if set to True

Returns:
 list: Users in the specified department
""""""
', '

def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
 user_id (str): The ID of the user whose activity is being logged
 activity_description (str): A description of the activity

Returns:
 bool: True if the logging was successful, False otherwise
""""""
', 'def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
 issue_id (str): The ID of the issue to be updated
 new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
 user_id (str): The ID of the user whose tasks are to be listed
 completed (bool): If True, only completed tasks are returned

Returns:
 list: A list of tasks assigned to the user
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""


def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check if user ""QAAnalyst"" has permission to access ticket ""TICK-001"", fetch the ticket's history, and then assign it to user ""SupportLead"".","var_1 = search_object_by_name(query=""QAAnalyst"")
var_2 = check_object_permission(user_id=var_1, object_id=""TICK-001"")
var_3 = fetch_ticket_history(ticket_id=""TICK-001"")
var_4 = search_object_by_name(query=""SupportLead"")
var_5 = assign_ticket_to_user(ticket_id=""TICK-001"", user_id=var_4)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
 user_id (str): The ID of the user
 object_id (str): The ID of the object to check permission for

Returns:
 bool: True if the user has permission, False otherwise
""""""
', '

def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
 ticket_id (str): The ID of the ticket for which the history is requested
 history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
 list: A list of history records for the ticket
""""""
', 'def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
 ticket_id (str): The ID of the ticket to be assigned
 user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""
', 'def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
 issue_id (str): The ID of the issue to be updated
 new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
 user_id (str): The ID of the user to check for overdue tasks

Returns:
 None
""""""
', '

def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
 data_id (str): The ID of the data to be validated
 schema_id (str): The ID of the schema to validate the data against

Returns:
 bool: True if data is consistent, False otherwise
""""""
', '

def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
 sprint_id (str): The ID of the sprint for which to generate the report

Returns:
 str: The ID of the generated report
""""""
', '

def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
 project_id (str): The ID of the project for which the timeline is requested

Returns:
 list: Key milestones and dates for the project timeline
""""""
', '

def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
 project_id (str): The ID of the project for which to calculate progress

Returns:
 float: The percentage of project completion
""""""
', '

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
 task_id (str): The ID of the task to be converted

Returns:
 str: The ID of the newly created ticket
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check the status of ticket ""TICKET-001"", estimate the cost for the related work item ""WORK-123"", and list all completed tasks by the user who created ""TICKET-001"".","var_1 = check_ticket_status(ticket_id=""TICKET-001"")
var_2 = estimate_cost_for_work(work_id=""WORK-123"")
var_3 = works_list(type=[""ticket""])
var_4 = who_am_i()
var_5 = list_completed_tasks_by_user(user_id=var_4)","

def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
 str: The status of the ticket
""""""
', '

def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
 user_id (str): The ID of the user whose account is to be deactivated
 reason (str): The reason for deactivating the account

Returns:
 bool: True if the account was successfully deactivated; otherwise False
""""""
', '

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
 work_id (str): The ID of the work item to estimate cost for
 cost_per_hour (float): The cost per hour. Default is '100'

Returns:
 float: Estimated cost
""""""', '

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
 task_id (str): The ID of the task to be converted

Returns:
 str: The ID of the newly created ticket
""""""
', '

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""
', '

def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
 user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
 list: List of completed task IDs
""""""
', '

def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
 work_item_id (str): The ID of the work item to check
 status_options (list): A list of valid status options

Returns:
 bool: True if status is valid, False otherwise
""""""
', '

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task will be assigned

Returns:
 bool: True if assignment was successful, otherwise False
""""""
', '

def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
 user_id (str): The ID of the user whose activities are to be listed
 limit (int): The maximum number of recent activities to return

Returns:
 list: Recent activities of the user
""""""
', '

def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
 report_template_id (str): The ID of the report template to use
 data_source_id (str): The ID of the data source

Returns:
 str: Generated report
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check the status of ticket ""TICKET-001"", list all completed items by the user ""QAEngineer"", and summarize those items for a weekly review.","var_1 = check_ticket_status(ticket_id=""TICKET-001"")
var_2 = list_completed_items_by_user(user_id=""QAEngineer"")
var_3 = summarize_objects(objects=var_2)","

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
 str: The status of the ticket
""""""
', '

def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
 user_id (str): The ID of the user whose completed items are being requested

Returns:
 list: Completed items by the user
""""""
', '

def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
 user_id (str): The ID of the user to check for overdue tasks

Returns:
 None
""""""
', '

def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
 task_ids (list): A list of task IDs to calculate cost for

Returns:
 float: Total cost of the tasks
""""""
', '

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
 event_type (str): The type of event to log
 description (str): A brief description of the event
 user_id (str): The ID of the user involved in the event, if applicable

Returns:
 str: The ID of the logged event
""""""
', '

def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
 user_ids (list): List of user IDs whose roles should be updated
 new_role (str): The new role to assign

Returns:
 int: Number of users successfully updated
""""""
', '

def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
 skill_name (str): The name of the skill to filter by
 minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
 list: A list of user IDs that match the criteria
""""""
', '

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
 work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
 int: The number of work items successfully archived
""""""
', '

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact info is requested

Returns:
 str: Contact information of the user
""""""
', '

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
 department_id (str): The ID of the department to list members for

Returns:
 list: User IDs of all the members in the department
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Convert the task with ID ""TASK-456"" into a subtask of the parent task ""TASK-123"", then assign this newly created subtask to user ""EngineerEllie"".","var_1 = convert_task_to_subtask(task_id=""TASK-456"", parent_task_id=""TASK-123"")
var_2 = find_user_by_email(email=""EngineerEllie"")
var_3 = assign_issues_to_user(issue_ids=[""TASK-456""], user_id=var_2)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
 task_id (str): The ID of the task to be converted
 parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
 bool: True if the conversion was successful, False otherwise
""""""
', '

def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
 task_id (str): The ID of the task to be updated with an estimated time
 estimation_hours (float): The estimated time in hours to complete the task

Returns:
 None
""""""
', '

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
 ticket_id (str): The ID of the ticket that will be linked with related tickets
 related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
 bool: True if the linking is successful, False otherwise
""""""
', '

def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
 email (str): The email address of the user to find

Returns:
 str: ID of the user
""""""
', '

def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 new_status (str): The new status to set for the work item
""""""
', '

def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be calculated

Returns:
 float: The calculated workload value
""""""
', '

def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
 sprint_id (str): The ID of the sprint to extend
 new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
 bool: True if the sprint end date was extended, False otherwise
""""""
', 'def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
 issue_ids (list): A list of issue IDs that need to be assigned
 user_id (str): The user ID to whom the issues will be assigned

Returns:
 None
""""""
', '

def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
 title (str): The title of the new ticket
 description (str): A detailed description of the issue or request
 reported_by (str): The ID of the user reporting the ticket

Returns:
 str: The ID of the newly created ticket
""""""
', '

def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
 user_id (str): The ID of the user
 project_id (str, optional): The ID of the project to filter tasks

Returns:
 list: List of task IDs completed by the user
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""


def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""


def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
"""""""
"Archive tickets older than ""2022-01-01"" that are active, convert one of the archived tickets to a ticket, and then summarize the details of the newly created ticket.","var_1 = archive_old_tickets(older_than_date=""2022-01-01"", active_status=True)
var_2 = convert_task_to_ticket(task_id=var_1)
var_3 = works_list(type=[""ticket""])
var_4 = summarize_objects(objects=var_3)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""



def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
 task_id (str): The ID of the task to be converted

Returns:
 str: The ID of the newly created ticket
""""""
', '

def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: Attachment file IDs
""""""
', '

def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
 older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
 active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
 str: ID of tickets archived
""""""
', '

def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
 project_id (str): The ID of the project to summarize

Returns:
 str: A summary report of the project
""""""
', '

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', 'def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
 ticket_id (str): The ID of the ticket to be assigned
 user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""
', '

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
 work_id (str): The ID of the work item to estimate cost for
 cost_per_hour (float): The cost per hour. Default is '100'

Returns:
 float: Estimated cost
""""""', '

def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
 organization_id (str): The ID of the organization to filter contacts
 active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
 list: Contacts associated with the organization
""""""
', '

def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
 contact_id (str): The ID of the contact to update
 new_email (str, optional): The new email address; defaults to None
 new_phone (str, optional): The new phone number; defaults to None

Returns:
 bool: True if the update was successful; otherwise False
""""""
', '

def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
 work_id (str): The ID of the work item for which duration is to be calculated

Returns:
 float: The total duration in hours
""""""
"
"Deactivate the account of user ""User123"" due to ""Security breach"" and then fetch all work items they created related to ""network maintenance"".","var_1 = deactivate_user_account(user_id=""User123"", reason=""Security breach"")
var_2 = search_object_by_name(query=""network maintenance"")
var_3 = fetch_user_created_work(user_id=""User123"", work_type=[var_2])","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
 user_id (str): The ID of the user whose account is to be deactivated
 reason (str): The reason for deactivating the account

Returns:
 bool: True if the account was successfully deactivated; otherwise False
""""""
', '

def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
 user_id (str): The ID of the user whose work items are to be retrieved
 work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket''']

Returns:
 list: Work items created by the user
""""""
', '

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
 work_id (str): The ID of the work item to calculate the estimated time

Returns:
 float: Estimated completion time in hours
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""
', '

def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
 ticket_id (str): The ID of the ticket to be updated
 new_status (str): The new status to update the ticket with

Returns:
 bool: True if the update was successful, otherwise False
""""""
', '

def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
 user_id (str): The ID of the user to check for overdue tasks

Returns:
 None
""""""
', 'def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
 issue_ids (list): A list of issue IDs that need to be assigned
 user_id (str): The user ID to whom the issues will be assigned

Returns:
 None
""""""
', '

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
 report_type (str): The type of report to generate
 data_set_id (str): The ID of the data set to be used for the report

Returns:
 str: A report data string or ID depending on internal implementation
""""""
', '

def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
 project_id (str): The ID of the project for which to calculate progress

Returns:
 float: The percentage of project completion
""""""
', '

def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
 user_id (str): The ID of the user whose permissions need to be checked
 required_permissions (list): A list of permissions to check against the user's permissions

Returns:
 bool: True if the user has all the required permissions, False otherwise
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Estimate the duration for task ""TASK-321"" with high complexity, assign it to user ""EngineerSam"", and log the event with the description ""Task duration estimated and assigned"".","var_1 = estimate_task_duration(task_id=""TASK-321"", complexity_level=""high"")
var_2 = who_am_i()
var_3 = search_object_by_name(query=""EngineerSam"")
var_4 = assign_task_to_user(task_id=""TASK-321"", user_id=var_3)
var_5 = log_system_event(event_type=""task_assignment"", description=""Task duration estimated and assigned"", user_id=var_2)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
 object_ids (list): List of object IDs to delete

Returns:
 bool: True if objects were successfully deleted, False otherwise
""""""
', '

def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
 doc_id (str): The ID of the document to which related documents should be linked
 related_doc_ids (list): A list of IDs for related documents

Returns:
 bool: True if the operation was successful, False otherwise
""""""
', '

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""
', '

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
 task_id (str): The ID of the task
 complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
 float: Estimated duration in hours
""""""
', '

def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
 object_id (str): The ID of the object to remove

Returns:
 None
""""""
', 'def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task is assigned

Returns:
 None
""""""
', '

def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
 task_id (str): The ID of the task to be updated with an estimated time
 estimation_hours (float): The estimated time in hours to complete the task

Returns:
 None
""""""
', '

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
 user_id (str): The ID of the user whose tasks are to be listed
 completed (bool): If True, only completed tasks are returned

Returns:
 list: A list of tasks assigned to the user
""""""
', '

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
 event_type (str): The type of event to log
 description (str): A brief description of the event
 user_id (str): The ID of the user involved in the event, if applicable

Returns:
 str: The ID of the logged event
""""""
', '

def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which to generate the report

Returns:
 str: A string summary of the project's progress report
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Estimate the duration of task ""TASK-456"" with complexity level ""high"", update its status to ""in_progress"", and calculate the estimated effort required to complete it.","var_1 = estimate_task_duration(task_id=""TASK-456"", complexity_level=""high"")
var_2 = update_ticket_status(ticket_id=""TASK-456"", new_status=""in_progress"")
var_3 = calculate_estimated_effort(work_id=""TASK-456"")","

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""


def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
 task_id (str): The ID of the task
 complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
 float: Estimated duration in hours
""""""
', '

def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
 ticket_id (str): The ID of the ticket to be updated
 new_status (str): The new status to update the ticket with

Returns:
 bool: True if the update was successful, otherwise False
""""""
', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""
', '

def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
 project_id (str): The ID of the project to track

Returns:
 float: Percentage of the project completed
""""""
', '

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
 start_date (str): The start date for the filter range (format: YYYY-MM-DD)
 end_date (str): The end date for the filter range (format: YYYY-MM-DD)
 work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
 list: Work items in the specified date range
""""""
', '

def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
 dataset_id (str): The ID of the dataset from which to generate the report
 report_type (str): The type of report to generate, default is 'summary'

Returns:
 str: The ID of the generated report
""""""
', '

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
 data_point_ids (list): List of data point IDs to validate

Returns:
 list: Validation results with status (True or False) for each data point
""""""
', '

def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
 part_id (str): The ID of the part to check for availability

Returns:
 bool: True if the part is available, False otherwise
""""""
', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
 ticket_id (str): The ID of the ticket where the merged note will be added
 note_ids (list): List of note IDs that will be merged into the ticket
 updated_by (str): The ID of the user performing the merge

Returns:
 str: ID of the updated ticket note
""""""
', '

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 float: Estimated effort in hours
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""

def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve all completed work items owned by ""TeamLead"" and archive them, then update the status of each to ""Archived"".","var_1 = works_list(owned_by=[""TeamLead""], stage.name=[""Completed""])
var_2 = archive_completed_work(work_ids=var_1)
var_3 = batch_update_task_status(task_ids=var_1, new_status=""Archived"")","

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
 task_id (str): The ID of the task to be updated with an estimated time
 estimation_hours (float): The estimated time in hours to complete the task

Returns:
 None
""""""
', '

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
 work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
 int: The number of work items successfully archived
""""""
', '

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""
', '

def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
 task_ids (list): A list of task IDs whose status needs updating
 new_status (str): The new status to apply to the tasks

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
 primary_record_id (str): The ID of the primary record to keep
 duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
 bool: True if the merge was successful; otherwise False
""""""
', '

def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
 ticket_id (str): The ID of the ticket to be updated
 new_status (str): The new status to update the ticket with

Returns:
 bool: True if the update was successful, otherwise False
""""""
', '

def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
 project_id (str): The ID of the project to which resources are allocated
 resource_ids (list): A list of resource IDs to allocate to the project

Returns:
 bool: True if resources could be allocated, False otherwise
""""""
', '

def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
 ticket_ids (list): A list of ticket IDs to filter
 start_date (str): The start date for the range
 end_date (str, optional): The end date for the range, defaults to None

Returns:
 list: Filtered list of ticket IDs
""""""
', '

def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
 record_ids (list): List of record IDs to filter
 start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
 end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
 list: Filtered record IDs
""""""
', '

def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
 object_id (str): The ID of the object to be removed from the archive

Returns:
 bool: True if the object was successfully removed, False otherwise
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Estimate the hours required to complete work items owned by user ""EngineerSam"" and calculate the total expense of the associated tasks.","var_1 = search_object_by_name(query=""EngineerSam"")
var_2 = works_list(created_by=[var_1], type=[""task""])
var_3 = list(map(estimate_work_hours, var_2))
var_4 = calculate_expense_totals(expense_ids=var_2)","

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
 work_id (str): The ID of the work item for which the estimation is to be made

Returns:
 float: Estimated hours required to complete the work item
""""""
', '

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
 expense_ids (list): List of expense IDs to calculate the total amount

Returns:
 float: The total amount of the expenses
""""""
', '

def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
 task_ids (list): List of task IDs to filter
 completed (bool): The completion status to filter by. Default is 'True'

Returns:
 list: List of task IDs that match the completion status
""""""
', '

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""
', '

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
 department_id (str): The ID of the department to list members for

Returns:
 list: User IDs of all the members in the department
""""""
', 'def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
 ticket_ids (list): A list of ticket IDs to be assigned
 user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
 None
""""""
', '

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 float: Estimated effort in hours
""""""
', '

def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
 work_item_id (str): The ID of the work item

Returns:
 float: The number of hours until the deadline
""""""
', '

def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
 user_id (str): The ID of the user whose skills are being queried

Returns:
 list: The skills of the user
""""""
', 'def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
 sprint_id (str): The ID of the sprint for workload calculation

Returns:
 float: Total workload in hours
""""""



def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Estimate the hours required to complete work items owned by user ""ArchitectAnna"", filter these by severity ""high"", and generate a work report for them.","var_1 = search_object_by_name(query=""ArchitectAnna"")
var_2 = works_list(owned_by=[var_1], ticket.severity=[""high""], type=[""issue"", ""ticket"", ""task""])
var_3 = generate_work_report(work_ids=var_2)","

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
 work_id (str): The ID of the work item for which the estimation is to be made

Returns:
 float: Estimated hours required to complete the work item
""""""
', '

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', '

def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
 skill_name (str): The name of the skill to filter by
 minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
 list: A list of user IDs that match the criteria
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""
', '

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
 event_type (str): The type of event to log
 description (str): A brief description of the event
 user_id (str): The ID of the user involved in the event, if applicable

Returns:
 str: The ID of the logged event
""""""
', '

def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
 project_id (str): The ID of the project to track

Returns:
 float: Percentage of the project completed
""""""
', '

def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
 contact_id (str): The ID of the contact to update
 new_email (str, optional): The new email address; defaults to None
 new_phone (str, optional): The new phone number; defaults to None

Returns:
 bool: True if the update was successful; otherwise False
""""""
', '

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""
', '

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
 data_point_ids (list): List of data point IDs to validate

Returns:
 list: Validation results with status (True or False) for each data point
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Estimate the hours required to complete work item ""TASK-456"", filter similar tasks by due date ""2023-04-30"", and allocate resources to them based on the estimated hours.","var_1 = estimate_work_hours(work_id=""TASK-456"")
var_2 = get_similar_work_items(work_id=""TASK-456"")
var_3 = filter_tasks_by_due_date(task_ids=var_2, due_date=""2023-04-30"")
var_4 = allocate_resources_to_project(project_id=var_3, resource_ids=[var_1])","

def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
 work_id (str): The ID of the work item for which the estimation is to be made

Returns:
 float: Estimated hours required to complete the work item
""""""
', '

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
 start_date (str): The start date for the filter range (format: YYYY-MM-DD)
 end_date (str): The end date for the filter range (format: YYYY-MM-DD)
 work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
 list: Work items in the specified date range
""""""
', '

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
 task_id (str): The ID of the task for which to estimate completion time

Returns:
 float: The estimated number of hours to complete the task
""""""
', '

def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
 user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
 str: URL of the user's avatar image
""""""
', '

def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
 task_id (str): The ID of the task to be marked as complete

Returns:
 bool: True if marked successfully, False otherwise
""""""
', '

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""
', '

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
 task_ids (list): A list of task IDs to filter
 due_date (str): The due date to filter tasks by

Returns:
 list: List of task IDs that have the specified due date
""""""
', '

def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
 project_id (str): The ID of the project to which resources are allocated
 resource_ids (list): A list of resource IDs to allocate to the project

Returns:
 bool: True if resources could be allocated, False otherwise
""""""
', '

def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
 archive_id (str): The ID of the archive from which to retrieve documents
 keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
 list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""', '

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
 data_point_ids (list): List of data point IDs to validate

Returns:
 list: Validation results with status (True or False) for each data point
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Extract contact information for individuals from document ""DOC456"", calculate the remaining budget for budget ID ""BUD123"", and filter the contacts by organization ""ORG789"".","var_1 = retrieve_document_by_keyword(keyword=""DOC456"")
var_2 = extract_contact_info(text_id=var_1, entity_type=""individual"")
var_3 = calculate_budget_remaining(budget_id=""BUD123"")
var_4 = filter_contacts_by_organization(organization_id=""ORG789"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
 text_id (str): The ID of the text source from which to extract contact information
 entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
 list: Extracted contact information
""""""', '

def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
 budget_id (str): The ID of the budget to calculate

Returns:
 float: The amount of remaining budget
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""
', '

def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
 organization_id (str): The ID of the organization to filter contacts
 active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
 list: Contacts associated with the organization
""""""
', '

def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
 task_ids (list): List of task IDs to be assigned
 user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""
', '

def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
 keyword (str): The keyword to search for in the documents

Returns:
 str: ID of the document containing the keyword
""""""', '

def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
 object_ids (list): A list of object IDs to filter
 object_type (str): The type of objects to filter for

Returns:
 list: Filtered object IDs matching the specified type
""""""
', '

def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
 ticket_ids (list): A list of ticket IDs to filter
 start_date (str): The start date for the range
 end_date (str, optional): The end date for the range, defaults to None

Returns:
 list: Filtered list of ticket IDs
""""""
', 'def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
 ticket_ids (list): A list of ticket IDs to be assigned
 user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
 None
""""""
', '

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Extract the contact information for all individuals related to the ""TechSupport"" project and create a summary report for that project.","var_1 = search_object_by_name(query=""TechSupport"")
var_2 = extract_contact_info(text_id=var_1, entity_type=""individual"")
var_3 = generate_project_summary(project_id=var_1)","

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
 text_id (str): The ID of the text source from which to extract contact information
 entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
 list: Extracted contact information
""""""', '

def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
 sprint_id (str): The ID of the ticket

Returns:
 list: A list of changes made to the sprint
""""""
', '

def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
 project_id (str): The ID of the project to summarize

Returns:
 str: A summary report of the project
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""
', '

def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
 user_id (str): The ID of the user whose work items are to be retrieved
 work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket''']

Returns:
 list: Work items created by the user
""""""
', '

def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
 object_id (str): The ID of the object to be removed from the archive

Returns:
 bool: True if the object was successfully removed, False otherwise
""""""
', '

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 due_date (str): The new due date for the work item

Returns:
 None: Indicates that the operation was executed without returning any value
""""""
', '

def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 new_status (str): The new status to set for the work item
""""""
', '

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
 work_id (str): The ID of the work item to calculate the estimated time

Returns:
 float: Estimated completion time in hours
""""""
', '

def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
 work_item_id (str): The ID of the work item to update
 new_stage (str): The new stage to which the work item should be moved

Returns:
 bool: True if the stage is successfully updated, False otherwise
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Extract contact information for all individuals related to the current sprint and log this activity with the description ""Extracted individual contacts for Sprint Analysis"". Then, generate a summary report for the current sprint focusing on completed tasks.","var_1 = get_sprint_id()
var_2 = extract_contact_info(text_id=var_1, entity_type=""individual"")
var_3 = log_system_activity(activity_description=""Extracted individual contacts for Sprint Analysis"")
var_4 = filter_tasks_by_completion(task_ids=var_2, completed=True)
var_5 = create_report_for_sprint(sprint_id=var_1, report_type=""summary"")","

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""


def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
 text_id (str): The ID of the text source from which to extract contact information
 entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
 list: Extracted contact information
""""""', '

def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
 primary_task_id (str): The ID of the primary task which remains after the merge
 duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
 None
""""""
', '

def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
 task_ids (list): List of task IDs to filter
 completed (bool): The completion status to filter by. Default is 'True'

Returns:
 list: List of task IDs that match the completion status
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""
', '

def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
 user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
 list: User permissions
""""""
', '

def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
 activity_description (str): A brief description of the activity being logged
 user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
 bool: True if the activity was logged successfully; otherwise False
""""""
', '

def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
 contact_id (str): The ID of the contact to update
 new_phone (str): The new phone number for the contact, default is 'None'
 new_email (str): The new email address for the contact, default is 'None'

Returns:
 bool: Status of the update operation
""""""
', '

def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
 user_id (str): The ID of the user to be removed
 project_id (str): The ID of the project from which the user is to be removed

Returns:
 bool: True if the user is successfully removed, False otherwise
""""""', '

def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
 user_id (str): The ID of the user whose activity is being logged
 activity_description (str): A description of the activity

Returns:
 bool: True if the logging was successful, False otherwise
""""""
', '

def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
 dataset_id (str): The ID of the dataset from which to generate the report
 report_type (str): The type of report to generate, default is 'summary'

Returns:
 str: The ID of the generated report
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
"""""""
"Fetch all blocked tickets, remove them from the current sprint, and generate a progress report for the sprint.","var_1 = list_all_blocked_tickets()
var_2 = get_sprint_id()
var_3 = remove_object_from_sprint(object_id=var_1, sprint_id=var_2)
var_4 = generate_progress_report(project_id=var_2)","

def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
 user_id (str): The ID of the user whose work items are to be retrieved
 work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket''']

Returns:
 list: Work items created by the user
""""""
', '

def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which to generate the report

Returns:
 str: A string summary of the project's progress report
""""""
', 'def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
 issue_ids (list): A list of issue IDs that need to be assigned
 user_id (str): The user ID to whom the issues will be assigned

Returns:
 None
""""""
', '

def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
 list: Ticket IDs that are currently blocked
""""""', '

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
 object_id (str): The ID of the object to be removed
 sprint_id (str): The ID of the project from which the object should be removed

Returns:
 list: Returns the updated list of sprint objects
""""""
', '

def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
 contact_id (str): The ID of the contact to update
 new_email (str, optional): The new email address; defaults to None
 new_phone (str, optional): The new phone number; defaults to None

Returns:
 bool: True if the update was successful; otherwise False
""""""
', '

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
 issue_id (str): The ID of the issue to be updated
 solution_text (str): The description of the solution to apply to the issue

Returns:
 None
""""""
', '

def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
 task_id (str): The ID of the task on which time is spent
 hours_spent (float): The number of hours spent on the task

Returns:
 bool: Status of the time tracking
""""""
', '

def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be calculated

Returns:
 float: The calculated workload value
""""""
', '

def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
 task_ids (list): List of task IDs to filter
 completed (bool): The completion status to filter by. Default is 'True'

Returns:
 list: List of task IDs that match the completion status
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the project timeline for project ""PRJ-456"" and calculate the remaining workload for its current sprint.","var_1 = search_object_by_name(query=""PRJ-456"")
var_2 = get_project_timeline(project_id=var_1)
var_3 = get_sprint_id()
var_4 = retrieve_sprint_workload(sprint_id=var_3)","

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', 'def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
 sprint_id (str): The ID of the sprint for workload calculation

Returns:
 float: Total workload in hours
""""""
', '

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
 feature_id (str): The ID of the feature to toggle access
 user_id (str): The ID of the user whose access will be toggled
 enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
 bool: The resulting access status
""""""
', '

def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
 ticket_id (str): The ID of the ticket to be updated
 new_status (str): The new status to update the ticket with

Returns:
 bool: True if the update was successful, otherwise False
""""""
', '

def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
 work_item_id (str): The ID of the work item

Returns:
 float: The number of hours until the deadline
""""""
', '

def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
 user_id (str): The ID of the user to get activities for
 limit (int): The maximum number of activity log entries to return

Returns:
 list: Recent activity log entries
""""""
', '

def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
 project_id (str): The ID of the project for which to calculate progress

Returns:
 float: The percentage of project completion
""""""
', '

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
 primary_work_id (str): The ID of the primary work item
 duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
 bool: True if merge was successful, otherwise False
""""""
', '

def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
 project_id (str): The ID of the project for which the timeline is requested

Returns:
 list: Key milestones and dates for the project timeline
""""""
', '

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""



def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""


def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the work items of type ""task"" within the date range ""2023-01-01"" to ""2023-01-31"", update the status of user ""User123"" to ""active"", and generate a report for the current sprint.","var_1 = filter_work_by_date_range(start_date=""2023-01-01"", end_date=""2023-01-31"", work_type=[""task""])
var_2 = update_user_ID(user_id=""User123"", status=""active"")
var_3 = get_sprint_id()
var_4 = generate_report_for_sprint(sprint_id=var_3)","def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
 start_date (str): The start date for the filter range (format: YYYY-MM-DD)
 end_date (str): The end date for the filter range (format: YYYY-MM-DD)
 work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
 list: Work items in the specified date range
""""""
', '
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
 user_id (str): The ID of the user whose status is to be updated
 status (str): The new status to apply to the user account

Returns:
 str: updated User Id
""""""
', '

def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
 organization_id (str): The ID of the organization to filter contacts
 active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
 list: Contacts associated with the organization
""""""
', '

def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
 prefix (str): A prefix for the identifier
 use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
 str: The generated unique identifier
""""""

```', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
 ticket_id (str): The ID of the ticket where the merged note will be added
 note_ids (list): List of note IDs that will be merged into the ticket
 updated_by (str): The ID of the user performing the merge

Returns:
 str: ID of the updated ticket note
""""""
', '

def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
 primary_ticket_id (str): The ID of the primary ticket that remains
 duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
 None
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""
', '

def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
 sprint_id (str): The ID of the sprint for which to generate the report

Returns:
 str: The ID of the generated report
""""""
', '

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 float: Estimated effort in hours
""""""
', '

def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
 work_id (str): The ID of the work item for which the estimation is to be made

Returns:
 float: Estimated hours required to complete the work item
""""""
"
"Find the user ID for ""engineer@example.com"", retrieve their current workload, and create actionable tasks based on the summary of their workload.","var_1 = find_user_by_email(email=""engineer@example.com"")
var_2 = retrieve_user_workload(user_id=var_1)
var_3 = summarize_objects(objects=var_2)
var_4 = create_actionable_tasks_from_text(text=var_3)","

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
 email (str): The email address of the user to find

Returns:
 str: ID of the user
""""""
', '

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
 work_id (str): The ID of the work item to check

Returns:
 bool: True if the work item is complete, False if it lacks information
""""""
', '

def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
 report_template_id (str): The ID of the report template to use
 data_source_id (str): The ID of the data source

Returns:
 str: Generated report
""""""
', '

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
 group_id (str): The ID of the group

Returns:
 list: User IDs belonging to the group
""""""
', '

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
 event_type (str): The type of event to log
 description (str): A brief description of the event
 user_id (str): The ID of the user involved in the event, if applicable

Returns:
 str: The ID of the logged event
""""""
', '

def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
 primary_record_id (str): The ID of the primary record to keep
 duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
 bool: True if the merge was successful; otherwise False
""""""
', '

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
 user_id (str): The ID of the user whose workload is to be retrieved

Returns:
 list: A list containing workload details
""""""
', '

def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
 list: Ticket IDs that are currently blocked
""""""', '

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
 task_ids (list): A list of task IDs to filter
 due_date (str): The due date to filter tasks by

Returns:
 list: List of task IDs that have the specified due date
""""""
', '

def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
 work_type (str): The type of the work items to filter by
 tag (str): The tag to filter the work items

Returns:
 list: List of work items with the given tag
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Generate a detailed progress report for project ""PRJ-456"" and check the status of ticket ""TICK-789"".","var_1 = generate_progress_report(project_id=""PRJ-456"", report_format=""detailed"")
var_2 = check_ticket_status(ticket_id=""TICK-789"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which the progress report is needed
 report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
 str: The generated progress report
""""""
', '

def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
 sprint_id (str): The ID of the ticket

Returns:
 list: A list of changes made to the sprint
""""""
', '

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
 object_id (str): The ID of the object to be removed
 sprint_id (str): The ID of the project from which the object should be removed

Returns:
 list: Returns the updated list of sprint objects
""""""
', '

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
 task_id (str): The ID of the task for which to estimate completion time

Returns:
 float: The estimated number of hours to complete the task
""""""
', '

def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
 user_id (str): The ID of the user for whom permissions are being listed

Returns:
 list: A list of permissions that the user possesses
""""""
', '

def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
 str: The status of the ticket
""""""
', '

def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
 work_id (str): The ID of the work item for which duration is to be calculated

Returns:
 float: The total duration in hours
""""""
', '

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
 group_id (str): The ID of the group

Returns:
 list: User IDs belonging to the group
""""""
', '

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
 work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
 int: The number of work items successfully archived
""""""
', '

def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
 primary_record_id (str): The ID of the primary record to keep
 duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
 bool: True if the merge was successful; otherwise False
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Generate a progress report for project ""PRJ-986"", calculate its completion percentage, and list recent activities of the user ""LeadArchitect"".","var_1 = generate_progress_report(project_id=""PRJ-986"")
var_2 = calculate_progress_percentage(project_id=""PRJ-986"")
var_3 = search_object_by_name(query=""LeadArchitect"")
var_4 = get_recent_activity_log(user_id=var_3)","

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which to generate the report

Returns:
 str: A string summary of the project's progress report
""""""
', '

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
 report_type (str): The type of report to generate
 data_set_id (str): The ID of the data set to be used for the report

Returns:
 str: A report data string or ID depending on internal implementation
""""""
', '

def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
 work_id (str): The ID of the work item to be removed
 sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
 sprint_id (str): The ID of the sprint to extend
 new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
 bool: True if the sprint end date was extended, False otherwise
""""""
', '

def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
 project_id (str): The ID of the project for which to calculate progress

Returns:
 float: The percentage of project completion
""""""
', '

def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
 user_id (str): The ID of the user whose skills are being queried

Returns:
 list: The skills of the user
""""""
', '

def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
 primary_record_id (str): The ID of the primary record to keep
 duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
 bool: True if the merge was successful; otherwise False
""""""
', '

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
 user_id (str): The ID of the user whose workload is to be retrieved

Returns:
 list: A list containing workload details
""""""
', '

def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
 part_id (str): The ID of the part to check for availability

Returns:
 bool: True if the part is available, False otherwise
""""""
', '

def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
 user_id (str): The ID of the user to get activities for
 limit (int): The maximum number of activity log entries to return

Returns:
 list: Recent activity log entries
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""


def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Generate a progress report for project ""PRJ-009"" in detailed format and calculate the estimated completion date for the same project.","var_1 = generate_progress_report(project_id=""PRJ-009"", report_format=""detailed"")
var_2 = calculate_estimated_completion(project_id=""PRJ-009"")","

def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""


def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
 project_id (str): The ID of the project to summarize

Returns:
 str: A summary report of the project
""""""
', '

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which the progress report is needed
 report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
 str: The generated progress report
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""
', '

def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
 project_id (str): The ID of the project to be analyzed

Returns:
 str: Estimated date of completion
""""""
', 'def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
 issue_ids (list): A list of issue IDs that need to be assigned
 user_id (str): The user ID to whom the issues will be assigned

Returns:
 None
""""""
', '

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
 report_type (str): The type of report to generate
 data_set_id (str): The ID of the data set to be used for the report

Returns:
 str: A report data string or ID depending on internal implementation
""""""
', '

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
 work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
 int: The number of work items successfully archived
""""""
', '

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
 user_id (str): The ID of the user whose tasks are to be listed
 completed (bool): If True, only completed tasks are returned

Returns:
 list: A list of tasks assigned to the user
""""""
', '

def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
 task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
 float: Total effort spent on the task
""""""
', '

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Generate a progress report for project ""PRJ-456"" using the detailed format and archive all tasks completed since ""2023-01-01"" within the same project.","var_1 = generate_progress_report(project_id=""PRJ-456"", report_format=""detailed"")
var_2 = archive_completed_tasks(project_id=""PRJ-456"", completed_since=""2023-01-01"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
 dataset_id (str): The ID of the dataset from which to generate the report
 report_type (str): The type of report to generate, default is 'summary'

Returns:
 str: The ID of the generated report
""""""
', '

def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
 project_id (str): The ID of the project containing the tasks
 completed_since (str): Archive tasks completed after this timestamp

Returns:
 int: Number of tasks archived
""""""
', '

def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
 user_id (str): The ID of the user
 days_back (int): The number of past days to look for projects. The default is '30'

Returns:
 list: Project IDs that the user has worked on
""""""
', '

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which the progress report is needed
 report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
 str: The generated progress report
""""""
', '

def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
 object_ids (list): List of object IDs to delete

Returns:
 bool: True if objects were successfully deleted, False otherwise
""""""
', '

def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
 project_id (str): The ID of the project for which the budget is calculated
 cost_limit (float): The cost limit for the project's budget

Returns:
 float: The amount allocated to the project budget
""""""
', '

def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
 user_id (str): The ID of the user to get activities for
 limit (int): The maximum number of activity log entries to return

Returns:
 list: Recent activity log entries
""""""
', '

def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
 sprint_id (str): The ID of the sprint for which to generate the report

Returns:
 str: The ID of the generated report
""""""
', '

def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
 work_type (str): The type of the work items to filter by
 tag (str): The tag to filter the work items

Returns:
 list: List of work items with the given tag
""""""
', '

def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
 user_ids (list): List of user IDs whose roles should be updated
 new_role (str): The new role to assign

Returns:
 int: Number of users successfully updated
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Generate a report for all high-severity tickets related to ""RevTech"" organization, then check the workload of the user who created these tickets.","var_1 = search_object_by_name(query=""RevTech"")
var_2 = works_list(ticket.severity=[""high""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = generate_report_from_data(dataset_id=var_2, report_type=""summary"")
var_4 = get_user_workload(user_id=var_2[0][""created_by""])","def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""


def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""



def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
 dataset_id (str): The ID of the dataset from which to generate the report
 report_type (str): The type of report to generate, default is 'summary'

Returns:
 str: The ID of the generated report
""""""
', '

def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
 doc_id (str): The ID of the document to which related documents should be linked
 related_doc_ids (list): A list of IDs for related documents

Returns:
 bool: True if the operation was successful, False otherwise
""""""
', '

def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
 user_id (str): The ID of the user with whom to schedule a meeting
 duration (int): Duration of the meeting in minutes, default is '30'
 urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
 str: The ID of the scheduled meeting
""""""
', '

def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be determined

Returns:
 int: The number of tasks assigned to the user
""""""
', '

def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
 user_id (str): The ID of the user whose permissions need to be checked
 required_permissions (list): A list of permissions to check against the user's permissions

Returns:
 bool: True if the user has all the required permissions, False otherwise
""""""
', '

def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
 user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
 str: URL of the user's avatar image
""""""
', '

def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
 project_id (str): The ID of the project for which the timeline is requested

Returns:
 list: Key milestones and dates for the project timeline
""""""
', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""
', '

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""
', '

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
 project_id (str): The ID of the project to calculate work for

Returns:
 float: Estimated hours of work left
""""""
"
"Check the availability of part ""PART-789"", generate a report for it, and if it's available, retrieve and summarize work items related to this part.","var_1 = check_availability_of_part(part_id=""PART-789"")
var_2 = generate_report(report_type=""part"", subject_id=""PART-789"", include_summary=True)
var_3 = works_list(applies_to_part=[""PART-789""], limit=50)
var_4 = summarize_objects(objects=var_3)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
 report_type (str): The type of report to generate
 subject_id (str): The ID of the subject for the report
 include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
 str: The ID of the generated report
""""""
', '

def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
 ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
 bool: True if the ticket was marked as resolved, False otherwise
""""""
', '

def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
 str: The status of the ticket
""""""
', '

def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
 part_id (str): The ID of the part to check for availability

Returns:
 bool: True if the part is available, False otherwise
""""""
', '

def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
 user_id (str): The ID of the user whose workload is to be retrieved

Returns:
 list: A list containing workload details
""""""
', 'def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
 start_date (str): The start date of the desired date range
 end_date (str): The end date of the desired date range
 work_type (list): Optional filter for type of work

Returns:
 list: Work items within the specified date range
""""""
', '

def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
 object_ids (list): List of object IDs to delete

Returns:
 bool: True if objects were successfully deleted, False otherwise
""""""
', '

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
 object_id (str): The ID of the object to be removed
 sprint_id (str): The ID of the project from which the object should be removed

Returns:
 list: Returns the updated list of sprint objects
""""""
', '

def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
 work_id (str): The ID of the work item to be removed
 sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
 user_id (str): The ID of the user with whom to schedule a meeting
 duration (int): Duration of the meeting in minutes, default is '30'
 urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
 str: The ID of the scheduled meeting
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Filter completed tasks by user ""User123"" within the ""Project456"", summarize the tasks, and generate a summary report.","var_1 = list_completed_tasks_by_user(user_id=""User123"", project_id=""Project456"")
var_2 = summarize_objects(objects=var_1)
var_3 = generate_summary_report(object_ids=var_1)","

def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
 object_ids (list): A list of object IDs

Returns:
 str: The ID of the generated report
""""""
', '

def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
 record_ids (list): List of record IDs to filter
 start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
 end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
 list: Filtered record IDs
""""""
', '

def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
 user_id (str): The ID of the user
 project_id (str, optional): The ID of the project to filter tasks

Returns:
 list: List of task IDs completed by the user
""""""
', '

def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
 activity_description (str): A brief description of the activity being logged
 user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
 bool: True if the activity was logged successfully; otherwise False
""""""
', '

def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
 task_ids (list): A list of task IDs to filter
 due_date (str): The due date to filter tasks by

Returns:
 list: List of task IDs that have the specified due date
""""""
', '

def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
 user_id (str): The ID of the user to be removed
 project_id (str): The ID of the project from which the user is to be removed

Returns:
 bool: True if the user is successfully removed, False otherwise
""""""', '

def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: Attachment file IDs
""""""
', '

def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
 user_id (str): The ID of the user to set permissions for
 permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
 bool: True if the permission was set successfully, False otherwise
""""""
', '

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
 text (str): The text from which keywords are to be extracted

Returns:
 list: A list of extracted keywords
""""""
', '

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
 feature_id (str): The ID of the feature to toggle access
 user_id (str): The ID of the user whose access will be toggled
 enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
 bool: The resulting access status
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Generate a unique identifier for a new task related to part ""ENG-456"", validate its existence in the system, and then retrieve the contact information of the user who created it.","var_1 = generate_unique_identifier(prefix=""ENG-456"")
var_2 = validate_object_existence(object_id=var_1)
var_3 = works_list(applies_to_part=[""ENG-456""], created_by=[var_2])
var_4 = get_user_contact_info(user_id=var_3)","

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
 prefix (str): A prefix for the identifier
 use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
 str: The generated unique identifier
""""""

```', '

def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact information is requested

Returns:
 str: The contact information of the user
""""""
', '

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
 object_id (str): The ID of the object to check

Returns:
 bool: True if the object exists, otherwise False
""""""
', '

def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
 contact_id (str): The ID of the contact to update
 new_phone (str): The new phone number for the contact, default is 'None'
 new_email (str): The new email address for the contact, default is 'None'

Returns:
 bool: Status of the update operation
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""
', '

def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: Attachment file IDs
""""""
', '

def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
 user_id (str): The ID of the user whose skills are being queried

Returns:
 list: The skills of the user
""""""
', '

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""
', '

def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
 dataset_id (str): The ID of the dataset from which to generate the report
 report_type (str): The type of report to generate, default is 'summary'

Returns:
 str: The ID of the generated report
""""""
', 'def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
 sprint_id (str): The ID of the sprint for workload calculation

Returns:
 float: Total workload in hours
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the contact information for user ""User123"", list their recent activity log, and summarize any work items they have created.","var_1 = search_object_by_name(query=""User123"")
var_2 = retrieve_user_contact_info(user_id=var_1)
var_3 = get_recent_activity_log(user_id=var_1)
var_4 = works_list(created_by=[var_1])
var_5 = summarize_objects(objects=var_4)","

def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""


def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
 user_id (str): The ID of the user to get activities for
 limit (int): The maximum number of activity log entries to return

Returns:
 list: Recent activity log entries
""""""
', '

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
 primary_work_id (str): The ID of the primary work item
 duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
 bool: True if merge was successful, otherwise False
""""""
', '

def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
 object_id (str): The ID of the primary object
 related_object_id (str): The ID of the object to relate to the primary

Returns:
 bool: True if the objects were successfully linked, False otherwise
""""""
', '

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact info is requested

Returns:
 str: Contact information of the user
""""""
', '

def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
 project_id (str): The ID of the project to which resources are allocated
 resource_ids (list): A list of resource IDs to allocate to the project

Returns:
 bool: True if resources could be allocated, False otherwise
""""""
', '

def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: Attachment file IDs
""""""
', 'def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
 sprint_id (str): The ID of the sprint for workload calculation

Returns:
 float: Total workload in hours
""""""
', '

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
 text (str): The text from which keywords are to be extracted

Returns:
 list: A list of extracted keywords
""""""
', '

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', '

def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
 contact_id (str): The ID of the contact to update
 new_email (str, optional): The new email address; defaults to None
 new_phone (str, optional): The new phone number; defaults to None

Returns:
 bool: True if the update was successful; otherwise False
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""
def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
Retrieve the history of the current sprint and generate a detailed progress report for it.,"var_1 = get_sprint_id()
var_2 = get_sprint_history(sprint_id=var_1)
var_3 = generate_progress_report(project_id=var_1, report_format=""detailed"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""



def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
 sprint_id (str): The ID of the ticket

Returns:
 list: A list of changes made to the sprint
""""""
', '

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""
', '

def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
 task_id (str): The ID of the task to be updated with an estimated time
 estimation_hours (float): The estimated time in hours to complete the task

Returns:
 None
""""""
', '

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which the progress report is needed
 report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
 str: The generated progress report
""""""
', '

def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
 email (str): The email address of the user to find

Returns:
 str: ID of the user
""""""
', '

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
 object_id (str): The ID of the object to be removed
 sprint_id (str): The ID of the project from which the object should be removed

Returns:
 list: Returns the updated list of sprint objects
""""""
', '

def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
 user_id (str): The ID of the user whose skills are being queried

Returns:
 list: The skills of the user
""""""
', '

def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
 part_id (str): The ID of the part to check for availability

Returns:
 bool: True if the part is available, False otherwise
""""""
', '

def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
 text_id (str): The ID of the text source from which to extract contact information
 entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
 list: Extracted contact information
""""""', '

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
 user_id (str): The ID of the user for whom to calculate the workload

Returns:
 int: The total number of open work items
""""""
"
"Retrieve the dependencies of task ""TASK-456"", calculate the time until the deadline for each, and merge the history of changes into a summary report.","var_1 = get_task_dependencies(task_id=""TASK-456"")
var_2 = calculate_time_until_deadline(work_item_id=var_1[0])
var_3 = calculate_time_until_deadline(work_item_id=var_1[1])
var_4 = fetch_ticket_history(ticket_id=var_1[0])
var_5 = fetch_ticket_history(ticket_id=var_1[1])
var_6 = generate_summary_report(object_ids=[var_1[0], var_1[1]])","

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
 task_id (str): The ID of the task for which dependencies are requested

Returns:
 list: Dependency task IDs
""""""
', '

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 due_date (str): The new due date for the work item

Returns:
 None: Indicates that the operation was executed without returning any value
""""""
', '

def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
 work_id (str): The ID of the work item for which duration is to be calculated

Returns:
 float: The total duration in hours
""""""
', '

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
 primary_work_id (str): The ID of the primary work item
 duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
 bool: True if merge was successful, otherwise False
""""""
', '

def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
 task_id (str): The ID of the task to be updated with an estimated time
 estimation_hours (float): The estimated time in hours to complete the task

Returns:
 None
""""""
', '

def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
 work_item_id (str): The ID of the work item

Returns:
 float: The number of hours until the deadline
""""""
', '

def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
 user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
 str: URL of the user's avatar image
""""""
', '

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
 object_id (str): The ID of the object to remove from inventory

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
 object_ids (list): A list of object IDs

Returns:
 str: The ID of the generated report
""""""
', '

def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
 ticket_id (str): The ID of the ticket for which the history is requested
 history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
 list: A list of history records for the ticket
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""


def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""


def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check availability of part ""ENG-456"", fetch work items related to this part, and calculate the total expense of related expenses.","var_1 = check_availability_of_part(part_id=""ENG-456"")
var_2 = works_list(applies_to_part=[""ENG-456""])
var_3 = calculate_expense_totals(expense_ids=var_2)","

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: List of team member IDs
""""""
', '

def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
 part_id (str): The ID of the part to check for availability

Returns:
 bool: True if the part is available, False otherwise
""""""
', '

def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
 organization_id (str): The ID of the organization to filter contacts
 active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
 list: Contacts associated with the organization
""""""
', '

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
 expense_ids (list): List of expense IDs to calculate the total amount

Returns:
 float: The total amount of the expenses
""""""
', '

def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
 report_type (str): The type of report to generate
 subject_id (str): The ID of the subject for the report
 include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
 str: The ID of the generated report
""""""
', '

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
 work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
 int: The number of work items successfully archived
""""""
', '

def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
 user_id (str): The ID of the user to get activities for
 limit (int): The maximum number of activity log entries to return

Returns:
 list: Recent activity log entries
""""""
', '

def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
 user_id (str): The ID of the user whose work items are to be retrieved
 work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket''']

Returns:
 list: Work items created by the user
""""""
', '

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
 project_id (str): The ID of the project to calculate work for

Returns:
 float: Estimated hours of work left
""""""
', '

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the permissions for user ""QAAnalyst"" and list all their completed tasks, then generate a progress report for project ""ProjAlpha"".","var_1 = search_object_by_name(query=""QAAnalyst"")
var_2 = get_user_permissions(user_id=var_1)
var_3 = list_user_tasks(user_id=var_1, completed=True)
var_4 = search_object_by_name(query=""ProjAlpha"")
var_5 = generate_progress_report(project_id=var_4)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""
def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
 user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
 list: User permissions
""""""
', '

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
 user_id (str): The ID of the user whose tasks are to be listed
 completed (bool): If True, only completed tasks are returned

Returns:
 list: A list of tasks assigned to the user
""""""
', 'def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
 issue_ids (list): A list of issue IDs that need to be assigned
 user_id (str): The user ID to whom the issues will be assigned

Returns:
 None
""""""
', '

def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
 work_id (str): The ID of the work item for which the estimation is to be made

Returns:
 float: Estimated hours required to complete the work item
""""""
', 'def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
 ticket_ids (list): A list of ticket IDs to be assigned
 user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
 None
""""""
', '

def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
 user_id (str): The ID of the user whose permissions need to be checked
 required_permissions (list): A list of permissions to check against the user's permissions

Returns:
 bool: True if the user has all the required permissions, False otherwise
""""""
', '

def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which to generate the report

Returns:
 str: A string summary of the project's progress report
""""""
', '

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
 user_id (str): The ID of the user
 object_id (str): The ID of the object to check permission for

Returns:
 bool: True if the user has permission, False otherwise
""""""
', '

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""
', 'def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
 project_ids (list): A list of project IDs to filter
 status (str): The status to filter by, default is 'active'

Returns:
 list: Project IDs matching the status
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Filter work items by type ""ticket"" within the date range ""2023-01-01"" to ""2023-01-31"", generate a report for these items, and check the availability of part ""PART-42"" related to these tickets.","var_1 = filter_work_by_date_range(start_date=""2023-01-01"", end_date=""2023-01-31"", work_type=[""ticket""])
var_2 = generate_work_report(work_ids=var_1)
var_3 = check_availability_of_part(part_id=""PART-42"")","

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""


def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""



def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
 doc_id (str): The ID of the document to which related documents should be linked
 related_doc_ids (list): A list of IDs for related documents

Returns:
 bool: True if the operation was successful, False otherwise
""""""
', '

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
 start_date (str): The start date for the filter range (format: YYYY-MM-DD)
 end_date (str): The end date for the filter range (format: YYYY-MM-DD)
 work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
 list: Work items in the specified date range
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""
', '

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
 list: Comments associated with the ticket
""""""
', '

def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
 part_id (str): The ID of the part to check for availability

Returns:
 bool: True if the part is available, False otherwise
""""""
', '

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
 task_id (str): The ID of the task
 complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
 float: Estimated duration in hours
""""""
', '

def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
 work_item_id (str): The ID of the work item

Returns:
 float: The number of hours until the deadline
""""""
', '

def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
 object_id (str): The ID of the primary object
 related_object_id (str): The ID of the object to relate to the primary

Returns:
 bool: True if the objects were successfully linked, False otherwise
""""""
', '

def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
 activity_description (str): A brief description of the activity being logged
 user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
 bool: True if the activity was logged successfully; otherwise False
""""""
', '

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
 work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
 int: The number of work items successfully archived
""""""



def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
"""""""
"Retrieve the contact information for user ""User123"", list their completed tasks, and then summarize those tasks.","var_1 = search_object_by_name(query=""User123"")
var_2 = retrieve_user_contact_info(user_id=var_1)
var_3 = list_completed_tasks_by_user(user_id=var_1)
var_4 = summarize_objects(objects=var_3)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
 user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
 list: List of completed task IDs
""""""
', '

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact info is requested

Returns:
 str: Contact information of the user
""""""
', '

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
 text (str): The text from which keywords are to be extracted

Returns:
 list: A list of extracted keywords
""""""
', '

def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
 object_id (str): The ID of the object for which history is requested

Returns:
 list: A list of changes made to the object
""""""
', '

def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
 keyword (str): The keyword to search for in the documents

Returns:
 str: ID of the document containing the keyword
""""""', '

def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
 task_id (str): The ID of the task on which time is spent
 hours_spent (float): The number of hours spent on the task

Returns:
 bool: Status of the time tracking
""""""
', '

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""
', '

def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
 user_id (str): The ID of the user to get activities for
 limit (int): The maximum number of activity log entries to return

Returns:
 list: Recent activity log entries
""""""
', '

def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
 work_item_id (str): The ID of the work item to check
 status_options (list): A list of valid status options

Returns:
 bool: True if status is valid, False otherwise
""""""
', '

def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
 user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
 list: User permissions
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check the status of ticket ""TICK-001"", calculate the workload for the user ""Agent007"" who is assigned to this ticket, and then retrieve and summarize all work items owned by this user.","var_1 = check_ticket_status(ticket_id=""TICK-001"")
var_2 = search_object_by_name(query=""Agent007"")
var_3 = calculate_user_workload(user_id=var_2)
var_4 = works_list(owned_by=[var_2])
var_5 = summarize_objects(objects=var_4)","

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
 department_id (str): The ID of the department to list members for

Returns:
 list: User IDs of all the members in the department
""""""
', '

def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
 dataset_id (str): The ID of the dataset from which to generate the report
 report_type (str): The type of report to generate, default is 'summary'

Returns:
 str: The ID of the generated report
""""""
', '

def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
 project_id (str): The ID of the project to summarize

Returns:
 str: A summary report of the project
""""""
', '

def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
 contact_id (str): The ID of the contact to update
 new_phone (str): The new phone number for the contact, default is 'None'
 new_email (str): The new email address for the contact, default is 'None'

Returns:
 bool: Status of the update operation
""""""
', '

def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
 archive_id (str): The ID of the archive from which to retrieve documents
 keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
 list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""', '

def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
 str: The status of the ticket
""""""
', '

def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be calculated

Returns:
 float: The calculated workload value
""""""
', '

def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
 work_item_id (str): The ID of the work item that is a duplicate
 duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
 bool: True if the item is successfully marked, False otherwise
""""""
', '

def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
 project_id (str): The ID of the project to track

Returns:
 float: Percentage of the project completed
""""""
', '

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
 user_id (str): The ID of the user whose tasks are to be listed
 completed (bool): If True, only completed tasks are returned

Returns:
 list: A list of tasks assigned to the user
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the contact information for user ""User123"", list their recent activities, and then summarize all work items they have created.","var_1 = search_object_by_name(query=""User123"")
var_2 = retrieve_user_contact_info(user_id=var_1)
var_3 = list_recent_activities(user_id=var_1)
var_4 = works_list(created_by=[var_1])
var_5 = summarize_objects(objects=var_4)","

def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
 user_id (str): The ID of the user whose activities are to be listed
 limit (int): The maximum number of recent activities to return

Returns:
 list: Recent activities of the user
""""""
', '

def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
 user_id (str): The ID of the user whose contact info is requested

Returns:
 str: Contact information of the user
""""""
', '

def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
 project_id (str): The ID of the project containing the tasks
 completed_since (str): Archive tasks completed after this timestamp

Returns:
 int: Number of tasks archived
""""""
', '

def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
 project_id (str): The ID of the project for which the budget is calculated
 cost_limit (float): The cost limit for the project's budget

Returns:
 float: The amount allocated to the project budget
""""""
', '

def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
 primary_object_id (str): The ID of the primary object
 duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
 bool: True if the merge was successful, False otherwise
""""""
', '

def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
 older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
 active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
 str: ID of tickets archived
""""""
', '

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
 work_id (str): The ID of the work item to check

Returns:
 bool: True if the work item is complete, False if it lacks information
""""""
', '

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
 object_id (str): The ID of the object to check

Returns:
 bool: True if the object exists, otherwise False
""""""
', '

def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be calculated

Returns:
 float: The calculated workload value
""""""
', '

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the ID of the current sprint, add work items owned by user ""TeamLead"" to it, and then generate a progress report for that sprint.","var_1 = who_am_i()
var_2 = works_list(owned_by=[""TeamLead""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = generate_progress_report(project_id=var_3)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
 user_id (str): The ID of the user whose activities are to be listed
 limit (int): The maximum number of recent activities to return

Returns:
 list: Recent activities of the user
""""""
', '

def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
 user_id (str): The ID of the user whose permissions need to be checked
 required_permissions (list): A list of permissions to check against the user's permissions

Returns:
 bool: True if the user has all the required permissions, False otherwise
""""""
', '

def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
 project_id (str): The ID of the project to track

Returns:
 float: Percentage of the project completed
""""""
', '

def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which to generate the report

Returns:
 str: A string summary of the project's progress report
""""""
', '

def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
 task_ids (list): List of task IDs to filter
 completed (bool): The completion status to filter by. Default is 'True'

Returns:
 list: List of task IDs that match the completion status
""""""
', '

def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
 ticket_id (str): The ID of the ticket to be updated
 new_status (str): The new status to update the ticket with

Returns:
 bool: True if the update was successful, otherwise False
""""""
', '

def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
 user_id (str): The ID of the user whose activity is being logged
 activity_description (str): A description of the activity

Returns:
 bool: True if the logging was successful, False otherwise
""""""
', '

def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
 ticket_ids (list): A list of ticket IDs to filter
 start_date (str): The start date for the range
 end_date (str, optional): The end date for the range, defaults to None

Returns:
 list: Filtered list of ticket IDs
""""""
', 'def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
 issue_ids (list): A list of issue IDs to be linked to the project
 project_id (str): The ID of the project to which the issues should be linked

Returns:
 bool: Status of the linking action
""""""
', '

def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
 user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
 list: User permissions
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Log the activity of creating a new ticket with the title ""Database Overload"" and description ""The database is experiencing frequent overloads during peak hours"", reported by user ""DBAdmin"". Then, estimate the task duration for the newly created ticket assuming it has a high complexity level.","var_1 = who_am_i()
var_2 = create_new_ticket(title=""Database Overload"", description=""The database is experiencing frequent overloads during peak hours"", reported_by=""DBAdmin"")
var_3 = log_system_activity(activity_description=""Created a new ticket with the title 'Database Overload'"", user_id=var_1)
var_4 = estimate_task_duration(task_id=var_2, complexity_level=""high"")","

def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""
def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""


def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
 activity_description (str): A brief description of the activity being logged
 user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
 bool: True if the activity was logged successfully; otherwise False
""""""
', '

def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
 list: Ticket IDs that are currently blocked
""""""', '

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""
', '

def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
 title (str): The title of the new ticket
 description (str): A detailed description of the issue or request
 reported_by (str): The ID of the user reporting the ticket

Returns:
 str: The ID of the newly created ticket
""""""
', '

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
 task_id (str): The ID of the task
 complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
 float: Estimated duration in hours
""""""
', '

def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
 report_template_id (str): The ID of the report template to use
 data_source_id (str): The ID of the data source

Returns:
 str: Generated report
""""""
', '

def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
 project_id (str): The ID of the project for which the budget is calculated
 cost_limit (float): The cost limit for the project's budget

Returns:
 float: The amount allocated to the project budget
""""""
', 'def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
 start_date (str): The start date of the desired date range
 end_date (str): The end date of the desired date range
 work_type (list): Optional filter for type of work

Returns:
 list: Work items within the specified date range
""""""
', 'def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
 work_item_ids (list): A list of work item IDs for which due dates are required
 urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
 list: Due dates for the specified work items
""""""
', '

def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
 data_id (str): The ID of the data to be validated
 schema_id (str): The ID of the schema to validate the data against

Returns:
 bool: True if data is consistent, False otherwise
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check the inventory availability for part ""HD-3401"", log the event, and if available, generate a report for work items related to that part.","var_1 = check_inventory_availability(part_id=""HD-3401"")
var_2 = log_system_event(event_type=""Check Inventory"", description=""Checked inventory for part HD-3401"")
var_3 = works_list(applies_to_part=[""HD-3401""])
var_4 = generate_work_report(work_ids=var_3)","

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
 event_type (str): The type of event to log
 description (str): A brief description of the event
 user_id (str): The ID of the user involved in the event, if applicable

Returns:
 str: The ID of the logged event
""""""
', '

def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
 object_id (str): The ID of the object to be removed
 sprint_id (str): The ID of the project from which the object should be removed

Returns:
 list: Returns the updated list of sprint objects
""""""
', '

def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
 work_item_id (str): The ID of the work item to check
 status_options (list): A list of valid status options

Returns:
 bool: True if status is valid, False otherwise
""""""
', '

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
 task_id (str): The ID of the task for which to estimate completion time

Returns:
 float: The estimated number of hours to complete the task
""""""
', '

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
 text (str): The text from which keywords are to be extracted

Returns:
 list: A list of extracted keywords
""""""
', '

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
 object_id (str): The ID of the object to check

Returns:
 bool: True if the object exists, otherwise False
""""""
', '

def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
 task_ids (list): A list of task IDs whose status needs updating
 new_status (str): The new status to apply to the tasks

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""
', '

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
 part_id (str): The ID of the part to check in inventory
 minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
 bool: True if the minimum quantity is available; otherwise False
""""""
', '

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
 work_id (str): The ID of the work item to be reassigned
 new_owner_id (str): The user ID of the new owner

Returns:
 bool: True if reassignment is successful, False otherwise
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""


def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Archive tickets older than ""2022-01-01"" that are active, get the IDs, and generate a summary progress report for each archived ticket.","var_1 = archive_old_tickets(older_than_date=""2022-01-01"", active_status=True)
var_2 = generate_progress_report(project_id=var_1, report_format=""summary"")","

def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
 work_item_id (str): The ID of the work item that is a duplicate
 duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
 bool: True if the item is successfully marked, False otherwise
""""""
', '

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""
', '

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
 work_id (str): The ID of the work item to be reassigned
 new_owner_id (str): The user ID of the new owner

Returns:
 bool: True if reassignment is successful, False otherwise
""""""
', '

def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
 older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
 active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
 str: ID of tickets archived
""""""
', '

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which the progress report is needed
 report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
 str: The generated progress report
""""""
', '

def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
 user_id (str): The ID of the user whose skills are being queried

Returns:
 list: The skills of the user
""""""
', '

def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
 object_id (str): The ID of the object for which history is requested

Returns:
 list: A list of changes made to the object
""""""
', '

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
 work_id (str): The ID of the work item to calculate the estimated time

Returns:
 float: Estimated completion time in hours
""""""
', '

def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
 task_ids (list): A list of task IDs whose status needs updating
 new_status (str): The new status to apply to the tasks

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
 user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
 list: User permissions
""""""
"
"Merge duplicate issues with IDs ""ISSUE-001"" and ""ISSUE-002"" and then calculate the estimated effort for the primary issue ""ISSUE-001"".","var_1 = merge_duplicate_objects(primary_object_id=""ISSUE-001"", duplicate_object_id=""ISSUE-002"")
var_2 = calculate_estimated_effort(work_id=""ISSUE-001"")","

def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
 primary_object_id (str): The ID of the primary object
 duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
 bool: True if the merge was successful, False otherwise
""""""
', 'def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
 issue_ids (list): A list of issue IDs to be linked to the project
 project_id (str): The ID of the project to which the issues should be linked

Returns:
 bool: Status of the linking action
""""""
', '

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 float: Estimated effort in hours
""""""
', '

def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
 user_id (str): The ID of the user whose activity is being logged
 activity_description (str): A description of the activity

Returns:
 bool: True if the logging was successful, False otherwise
""""""
', '

def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
 contact_id (str): The ID of the contact to update
 new_phone (str): The new phone number for the contact, default is 'None'
 new_email (str): The new email address for the contact, default is 'None'

Returns:
 bool: Status of the update operation
""""""
', '

def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
 task_ids (list): A list of task IDs whose status needs updating
 new_status (str): The new status to apply to the tasks

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
 expense_ids (list): List of expense IDs to calculate the total amount

Returns:
 float: The total amount of the expenses
""""""
', '

def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""
', 'def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
 work_item_ids (list): A list of work item IDs for which due dates are required
 urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
 list: Due dates for the specified work items
""""""



def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check if a ticket with ID ""TICKET-001"" exists, and if it does, notify the user with ID ""USR-789"" of any overdue tasks they might have.","var_1 = validate_object_existence(object_id=""TICKET-001"")
var_2 = notify_user_of_overdue_tasks(user_id=""USR-789"")","

def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
 primary_task_id (str): The ID of the primary task which remains after the merge
 duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
 None
""""""
', '

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
 object_id (str): The ID of the object to check

Returns:
 bool: True if the object exists, otherwise False
""""""
', '

def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
 organization_id (str): The ID of the organization to filter contacts
 active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
 list: Contacts associated with the organization
""""""
', '

def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
 user_id (str): The ID of the user to check for overdue tasks

Returns:
 None
""""""
', '

def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
 record_ids (list): List of record IDs to filter
 start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
 end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
 list: Filtered record IDs
""""""
', 'def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
 work_item_ids (list): A list of work item IDs for which due dates are required
 urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
 list: Due dates for the specified work items
""""""
', '

def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
 title (str): The title of the new ticket
 description (str): A detailed description of the issue or request
 reported_by (str): The ID of the user reporting the ticket

Returns:
 str: The ID of the newly created ticket
""""""
', '

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
 object_id (str): The ID of the object to remove from inventory

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
 archive_id (str): The ID of the archive from which to retrieve documents
 keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
 list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""', '

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
 task_id (str): The ID of the task for which dependencies are requested

Returns:
 list: Dependency task IDs
""""""



def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""


def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Estimate the resolution time for ticket ""TICKET-321"", merge any duplicates, and then update the ticket's stage to ""Resolved"".","var_1 = estimate_ticket_resolution_time(ticket_id=""TICKET-321"")
var_2 = get_similar_work_items(work_id=""TICKET-321"")
var_3 = merge_duplicate_tickets(primary_ticket_id=""TICKET-321"", duplicate_ticket_ids=var_2)
var_4 = update_stage_of_work_item(work_item_id=""TICKET-321"", new_stage=""Resolved"")","

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""


def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
 primary_ticket_id (str): The ID of the primary ticket that remains
 duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
 None
""""""
', '

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
 work_id (str): The ID of the work item to calculate the estimated time

Returns:
 float: Estimated completion time in hours
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""
', '

def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
 user_ids (list): A list of user IDs to be removed from the group
 group_id (str): The ID of the group from which the users should be removed

Returns:
 bool: Status of the removal
""""""
', '

def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be determined

Returns:
 int: The number of tasks assigned to the user
""""""
', '

def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
 ticket_id (str): The ID of the ticket to estimate time for

Returns:
 float: Estimated time in hours to resolve the ticket
""""""
', '

def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which to generate the report

Returns:
 str: A string summary of the project's progress report
""""""
', '

def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
 user_id (str): The ID of the user whose activity is being logged
 activity_description (str): A description of the activity

Returns:
 bool: True if the logging was successful, False otherwise
""""""
', '

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
 part_id (str): The ID of the part to check in inventory
 minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
 bool: True if the minimum quantity is available; otherwise False
""""""
', '

def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
 work_item_id (str): The ID of the work item to update
 new_stage (str): The new stage to which the work item should be moved

Returns:
 bool: True if the stage is successfully updated, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check if user ""EngineerRanjan"" has permission to access object ""OBJ-9876"", then retrieve and summarize all tickets created by her.","
var_1 = search_object_by_name(query=""EngineerRanjan"")
var_2 = check_object_permission(user_id=var_1, object_id=""OBJ-9876"")
var_3 = works_list(created_by=[var_1], type=[""ticket""])
var_4 = summarize_objects(objects=var_3)","

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
 primary_ticket_id (str): The ID of the primary ticket that remains
 duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
 None
""""""
', '

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
 user_id (str): The ID of the user
 object_id (str): The ID of the object to check permission for

Returns:
 bool: True if the user has permission, False otherwise
""""""
', '

def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
 task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
 float: Total effort spent on the task
""""""
', '

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
 issue_id (str): The ID of the issue to be updated
 solution_text (str): The description of the solution to apply to the issue

Returns:
 None
""""""
', '

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
 expense_ids (list): List of expense IDs to calculate the total amount

Returns:
 float: The total amount of the expenses
""""""
', 'def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task is assigned

Returns:
 None
""""""
', '

def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
 str: The status of the ticket
""""""
', '

def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
 project_id (str): The ID of the project to which resources are allocated
 resource_ids (list): A list of resource IDs to allocate to the project

Returns:
 bool: True if resources could be allocated, False otherwise
""""""
', '

def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', '

def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
 user_id (str): The ID of the user whose account is to be deactivated
 reason (str): The reason for deactivating the account

Returns:
 bool: True if the account was successfully deactivated; otherwise False
""""""
"
"Calculate the workload for user ""QAAnalyst"" and list all recent projects they have worked on in the past 45 days.","
var_1 = search_object_by_name(query=""QAAnalyst"")
var_2 = calculate_workload_for_user(user_id=var_1)
var_3 = list_recent_projects(user_id=var_1, days_back=45)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
 primary_work_id (str): The ID of the primary work item
 duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
 bool: True if merge was successful, otherwise False
""""""
', '

def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
 ticket_id (str): The ID of the ticket that will be linked with related tickets
 related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
 bool: True if the linking is successful, False otherwise
""""""
', '

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
 user_id (str): The ID of the user for whom to calculate the workload

Returns:
 int: The total number of open work items
""""""
', '

def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
 user_id (str): The ID of the user
 days_back (int): The number of past days to look for projects. The default is '30'

Returns:
 list: Project IDs that the user has worked on
""""""
', '

def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
 user_id (str): The ID of the user to set permissions for
 permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
 bool: True if the permission was set successfully, False otherwise
""""""
', '

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
 start_date (str): The start date for the filter range (format: YYYY-MM-DD)
 end_date (str): The end date for the filter range (format: YYYY-MM-DD)
 work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
 list: Work items in the specified date range
""""""
', '

def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
 ticket_id (str): The ID of the ticket to be marked for review
 reviewer_id (str): The ID of the user who should review the ticket

Returns:
 None
""""""
', '

def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
 older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
 active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
 str: ID of tickets archived
""""""
', '

def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
 object_id (str): The ID of the object for which history is requested

Returns:
 list: A list of changes made to the object
""""""
', 'def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
 ticket_id (str): The ID of the ticket to be assigned
 user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Archive tickets older than ""2021-01-01"" that are active, then check if user ""AuditorAmy"" has permission to access the archived ticket with ID ""TICKET-456"".","var_1 = archive_old_tickets(older_than_date=""2021-01-01"", active_status=True)
var_2 = check_object_permission(user_id=""AuditorAmy"", object_id=""TICKET-456"")","

def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
 object_id (str): The ID of the object to remove from inventory

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
 user_id (str): The ID of the user
 object_id (str): The ID of the object to check permission for

Returns:
 bool: True if the user has permission, False otherwise
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""
', '

def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
 older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
 active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
 str: ID of tickets archived
""""""
', '

def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
 object_ids (list): List of object IDs to delete

Returns:
 bool: True if objects were successfully deleted, False otherwise
""""""
', '

def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
 primary_object_id (str): The ID of the primary object
 duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
 bool: True if the merge was successful, False otherwise
""""""
', '

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""
', '

def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
 title (str): The title of the new ticket
 description (str): A detailed description of the issue or request
 reported_by (str): The ID of the user reporting the ticket

Returns:
 str: The ID of the newly created ticket
""""""
', '

def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
 text_id (str): The ID of the text source from which to extract contact information
 entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
 list: Extracted contact information
""""""', '

def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
 list: Ticket IDs that are currently blocked
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Validate if the project with ID ""PROJ-42"" is completed and then summarize all the tasks within this project.","var_1 = validate_project_completion(project_id=""PROJ-42"")
var_2 = works_list(type=[""task""], applies_to_part=[""PROJ-42""])
var_3 = summarize_objects(objects=var_2)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
 object_id (str): The ID of the object to remove from inventory

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
 task_id (str): The ID of the task for which dependencies are requested

Returns:
 list: Dependency task IDs
""""""
', '

def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
 project_id (str): The ID of the project to validate

Returns:
 bool: True if completed, False otherwise
""""""
', '

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
 start_date (str): The start date for the filter range (format: YYYY-MM-DD)
 end_date (str): The end date for the filter range (format: YYYY-MM-DD)
 work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
 list: Work items in the specified date range
""""""
', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
 ticket_id (str): The ID of the ticket where the merged note will be added
 note_ids (list): List of note IDs that will be merged into the ticket
 updated_by (str): The ID of the user performing the merge

Returns:
 str: ID of the updated ticket note
""""""
', '

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
 task_id (str): The ID of the task to be converted
 parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
 bool: True if the conversion was successful, False otherwise
""""""
', '

def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
 user_id (str): The ID of the user whose skills are being queried

Returns:
 list: The skills of the user
""""""
', '

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
 task_id (str): The ID of the task for which to estimate completion time

Returns:
 float: The estimated number of hours to complete the task
""""""
', '

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
 department_id (str): The ID of the department to list members for

Returns:
 list: User IDs of all the members in the department
""""""
', '

def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
 organization_id (str): The ID of the organization to filter contacts
 active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
 list: Contacts associated with the organization
""""""



def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Extract contact information from text source ""DOC-789"" for individual entities, archive the completed work items related to these contacts, and summarize the archived items.","var_1 = extract_contact_info(text_id=""DOC-789"", entity_type=""individual"")
var_2 = archive_completed_work(work_ids=var_1)
var_3 = summarize_objects(objects=var_2)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
 object_id (str): The ID of the object to be removed
 sprint_id (str): The ID of the project from which the object should be removed

Returns:
 list: Returns the updated list of sprint objects
""""""
', '

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
 work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
 int: The number of work items successfully archived
""""""
', '

def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
 work_item_id (str): The ID of the work item that is a duplicate
 duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
 bool: True if the item is successfully marked, False otherwise
""""""
', '

def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
 sprint_id (str): The ID of the sprint
 report_type (str): The type of report to be generated

Returns:
 str: The ID of the generated report
""""""
', '

def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
 text_id (str): The ID of the text source from which to extract contact information
 entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
 list: Extracted contact information
""""""', '

def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
 email (str): The email address of the user to find

Returns:
 str: ID of the user
""""""
', '

def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
 user_id (str): The ID of the user whose completed items are being requested

Returns:
 list: Completed items by the user
""""""
', '

def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
 task_ids (list): A list of task IDs to be assigned
 employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
 bool: True if the assignment was successful, False otherwise
""""""
', '

def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
 list: Ticket IDs that are currently blocked
""""""', '

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
 list: Comments associated with the ticket
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check if user ""QAAnalyst42"" has the required permissions to access sensitive data, then list and summarize all high-severity tickets they created.","var_1 = search_object_by_name(query=""QAAnalyst42"")
var_2 = validate_user_permissions(user_id=var_1, required_permissions=[""access_sensitive_data""])
var_3 = works_list(created_by=[var_1], ticket.severity=[""high""], type=[""ticket""])
var_4 = summarize_objects(objects=var_3)","

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""


def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""



def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
 user_id (str): The ID of the user to be removed
 project_id (str): The ID of the project from which the user is to be removed

Returns:
 bool: True if the user is successfully removed, False otherwise
""""""', '

def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
 user_id (str): The ID of the user whose tasks are to be listed
 completed (bool): If True, only completed tasks are returned

Returns:
 list: A list of tasks assigned to the user
""""""
', '

def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
 user_id (str): The ID of the user whose permissions need to be checked
 required_permissions (list): A list of permissions to check against the user's permissions

Returns:
 bool: True if the user has all the required permissions, False otherwise
""""""
', '

def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
 task_id (str): The ID of the task
 complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
 float: Estimated duration in hours
""""""
', '

def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
 task_ids (list): List of task IDs to filter
 completed (bool): The completion status to filter by. Default is 'True'

Returns:
 list: List of task IDs that match the completion status
""""""
', '

def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
 object_id (str): The ID of the object for which history is requested

Returns:
 list: A list of changes made to the object
""""""
', '

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
 object_id (str): The ID of the object to check

Returns:
 bool: True if the object exists, otherwise False
""""""
', '

def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
 work_id (str): The ID of the work item for which the estimation is to be made

Returns:
 float: Estimated hours required to complete the work item
""""""
', '

def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
 user_id (str): The ID of the user
 days_back (int): The number of past days to look for projects. The default is '30'

Returns:
 list: Project IDs that the user has worked on
""""""
', '

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
 work_id (str): The ID of the work item to estimate cost for
 cost_per_hour (float): The cost per hour. Default is '100'

Returns:
 float: Estimated cost
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the document ID for the keyword ""SecurityProtocol"" using `retrieve_document_by_keyword`, then extract all keywords from the document's text with `extract_keywords_from_text`, and finally, generate a report using these keywords with `generate_report_data` using the report type ""KeywordAnalysis"".","var_1 = retrieve_document_by_keyword(keyword=""SecurityProtocol"")
var_2 = extract_keywords_from_text(text=var_1)
var_3 = generate_report_data(report_type=""KeywordAnalysis"", data_set_id=var_2)","

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
 keyword (str): The keyword to search for in the documents

Returns:
 str: ID of the document containing the keyword
""""""', '

def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
 project_id (str): The ID of the project containing the tasks
 completed_since (str): Archive tasks completed after this timestamp

Returns:
 int: Number of tasks archived
""""""
', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""
', '

def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
 object_id (str): The ID of the primary object
 related_object_id (str): The ID of the object to relate to the primary

Returns:
 bool: True if the objects were successfully linked, False otherwise
""""""
', '

def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
 doc_id (str): The ID of the document to which related documents should be linked
 related_doc_ids (list): A list of IDs for related documents

Returns:
 bool: True if the operation was successful, False otherwise
""""""
', '

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
 report_type (str): The type of report to generate
 data_set_id (str): The ID of the data set to be used for the report

Returns:
 str: A report data string or ID depending on internal implementation
""""""
', '

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
 text (str): The text from which keywords are to be extracted

Returns:
 list: A list of extracted keywords
""""""
', '

def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
 prefix (str): A prefix for the identifier
 use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
 str: The generated unique identifier
""""""

```', '

def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
 issue_id (str): The ID of the issue to be updated
 solution_text (str): The description of the solution to apply to the issue

Returns:
 None
""""""
', '

def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
 work_item_id (str): The ID of the work item to check
 status_options (list): A list of valid status options

Returns:
 bool: True if status is valid, False otherwise
""""""



def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""


def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve the workload for user ""Analyst42"", calculate the total cost of their tasks, and summarize the tasks for a weekly review.","var_1 = find_user_by_email(email=""Analyst42"")
var_2 = retrieve_user_workload(user_id=var_1)
var_3 = calculate_cost_of_tasks(task_ids=var_2)
var_4 = summarize_objects(objects=var_2)","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
 user_id (str): The ID of the user whose workload is to be retrieved

Returns:
 list: A list containing workload details
""""""
', '

def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
 project_id (str): The ID of the project for which the budget is calculated
 cost_limit (float): The cost limit for the project's budget

Returns:
 float: The amount allocated to the project budget
""""""
', '

def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
 email (str): The email address of the user to find

Returns:
 str: ID of the user
""""""
', 'def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task is assigned

Returns:
 None
""""""
', '

def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
 task_ids (list): A list of task IDs to calculate cost for

Returns:
 float: Total cost of the tasks
""""""
', '

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
 task_id (str): The ID of the task to be converted
 parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
 bool: True if the conversion was successful, False otherwise
""""""
', '

def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: List of team member IDs
""""""
', '

def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
 prefix (str): A prefix for the identifier
 use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
 str: The generated unique identifier
""""""

```', '

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
 feature_id (str): The ID of the feature to toggle access
 user_id (str): The ID of the user whose access will be toggled
 enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
 bool: The resulting access status
""""""
', '

def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
 primary_ticket_id (str): The ID of the primary ticket that remains
 duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
 None
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check the status of ticket ""TICKET-001"", then extract and summarize contact information for entity type ""company"" from the ticket's text source.","var_1 = check_ticket_status(ticket_id=""TICKET-001"")
var_2 = extract_contact_info(text_id=""TICKET-001"", entity_type=""company"")
var_3 = summarize_objects(objects=var_2)","

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
 feature_id (str): The ID of the feature to toggle access
 user_id (str): The ID of the user whose access will be toggled
 enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
 bool: The resulting access status
""""""
', '

def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
 user_id (str): The ID of the user whose activities are to be listed
 limit (int): The maximum number of recent activities to return

Returns:
 list: Recent activities of the user
""""""
', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
 ticket_id (str): The ID of the ticket where the merged note will be added
 note_ids (list): List of note IDs that will be merged into the ticket
 updated_by (str): The ID of the user performing the merge

Returns:
 str: ID of the updated ticket note
""""""
', '

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
 work_id (str): The ID of the work item to be reassigned
 new_owner_id (str): The user ID of the new owner

Returns:
 bool: True if reassignment is successful, False otherwise
""""""
', '

def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
 text_id (str): The ID of the text source from which to extract contact information
 entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
 list: Extracted contact information
""""""', '

def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
 work_id (str): The ID of the work item to be removed
 sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 float: Estimated effort in hours
""""""
', '

def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
 str: The status of the ticket
""""""
', '

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
 data_point_ids (list): List of data point IDs to validate

Returns:
 list: Validation results with status (True or False) for each data point
""""""
', '

def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
 user_id (str): The ID of the user to set permissions for
 permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
 bool: True if the permission was set successfully, False otherwise
""""""



def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""


def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
"""""""
"List all completed tasks by user ""TeamLead"", estimate the cost for each task, and then create a summarized report of these tasks.","var_1 = who_am_i()
var_2 = list_completed_tasks_by_user(user_id=""TeamLead"")
var_3 = estimate_cost_for_work(work_id=var_2[0])
var_4 = estimate_cost_for_work(work_id=var_2[1])
var_5 = summarize_objects(objects=var_2)","

def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
 issue_id (str): The ID of the issue to be updated
 solution_text (str): The description of the solution to apply to the issue

Returns:
 None
""""""
', '

def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
 title (str): The title of the new ticket
 description (str): A detailed description of the issue or request
 reported_by (str): The ID of the user reporting the ticket

Returns:
 str: The ID of the newly created ticket
""""""
', '

def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
 object_id (str): The ID of the primary object
 related_object_id (str): The ID of the object to relate to the primary

Returns:
 bool: True if the objects were successfully linked, False otherwise
""""""
', '

def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
 user_id (str): The ID of the user whose completed items are being requested

Returns:
 list: Completed items by the user
""""""
', '

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
 work_id (str): The ID of the work item to estimate cost for
 cost_per_hour (float): The cost per hour. Default is '100'

Returns:
 float: Estimated cost
""""""', '

def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
 task_id (str): The ID of the task to be updated with an estimated time
 estimation_hours (float): The estimated time in hours to complete the task

Returns:
 None
""""""
', '

def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
 user_id (str): The ID of the user
 project_id (str, optional): The ID of the project to filter tasks

Returns:
 list: List of task IDs completed by the user
""""""
', '

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
 work_id (str): The ID of the work item to check

Returns:
 bool: True if the work item is complete, False if it lacks information
""""""
', '

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 due_date (str): The new due date for the work item

Returns:
 None: Indicates that the operation was executed without returning any value
""""""
', '

def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
 group_id (str): The ID of the group

Returns:
 list: User IDs belonging to the group
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Assign all complete work items related to part ""ENG-456"" to user ""EngineerEmma"" and calculate the progress percentage of project ""PRJ-789"".","var_1 = works_list(applies_to_part=[""ENG-456""])
var_2 = filter_users_by_skill(skill_name=""EngineerEmma"")
var_3 = get_team_member_list(team_id=var_2)
var_4 = calculate_progress_percentage(project_id=""PRJ-789"")
var_5 = assign_ticket_to_user(ticket_id=var_1, user_id=var_3)","

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
 issue_id (str): The ID of the issue to be updated
 solution_text (str): The description of the solution to apply to the issue

Returns:
 None
""""""
', '

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
 work_id (str): The ID of the work item to check

Returns:
 bool: True if the work item is complete, False if it lacks information
""""""
', '

def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
 project_id (str): The ID of the project for which to calculate progress

Returns:
 float: The percentage of project completion
""""""
', '

def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
 text (str): The text from which keywords are to be extracted

Returns:
 list: A list of extracted keywords
""""""
', 'def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
 ticket_id (str): The ID of the ticket to be assigned
 user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""
', '

def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
 primary_task_id (str): The ID of the primary task which remains after the merge
 duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
 None
""""""
', '

def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
 skill_name (str): The name of the skill to filter by
 minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
 list: A list of user IDs that match the criteria
""""""
', '

def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
 primary_work_id (str): The ID of the primary work item
 duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
 bool: True if merge was successful, otherwise False
""""""
', '

def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: List of team member IDs
""""""
', '

def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
 object_id (str): The ID of the object to remove

Returns:
 None
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Calculate the workload for user ""AgentSmith"", fetch their recent activity log, and validate the existence of their assigned work items.","var_1 = search_object_by_name(query=""AgentSmith"")
var_2 = calculate_workload_for_user(user_id=var_1)
var_3 = get_recent_activity_log(user_id=var_1)
var_4 = validate_data_integrity(data_point_ids=var_3)","

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""
', '

def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
 user_id (str): The ID of the user to get activities for
 limit (int): The maximum number of activity log entries to return

Returns:
 list: Recent activity log entries
""""""
', '

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
 user_id (str): The ID of the user for whom to calculate the workload

Returns:
 int: The total number of open work items
""""""
', 'def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
 ticket_ids (list): A list of ticket IDs to be assigned
 user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
 None
""""""
', '

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
 data_point_ids (list): List of data point IDs to validate

Returns:
 list: Validation results with status (True or False) for each data point
""""""
', '

def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
 tag_id (str): The ID of the tag used to filter work items
 include_archived (bool): Include archived work items if set to True

Returns:
 list: Work items associated with the tag
""""""
', '

def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
 ticket_id (str): The ID of the ticket for which the history is requested
 history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
 list: A list of history records for the ticket
""""""
', '

def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
 object_id (str): The ID of the object to be removed from the archive

Returns:
 bool: True if the object was successfully removed, False otherwise
""""""
', '

def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
 work_id (str): The ID of the work item for which duration is to be calculated

Returns:
 float: The total duration in hours
""""""
', '

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
 object_id (str): The ID of the object to check

Returns:
 bool: True if the object exists, otherwise False
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check if user ""TeamLead"" has permission to access work item ""TASK-456"", update its due date to ""2023-05-10"", and then log this activity.","var_1 = search_object_by_name(query=""TeamLead"")
var_2 = check_object_permission(user_id=var_1, object_id=""TASK-456"")
var_3 = update_work_item_due_date(work_item_id=""TASK-456"", due_date=""2023-05-10"")
var_4 = log_user_activity(user_id=var_1, activity_description=""Checked permissions and updated due date for TASK-456"")","

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 due_date (str): The new due date for the work item

Returns:
 None: Indicates that the operation was executed without returning any value
""""""
', '

def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
 user_id (str): The ID of the user
 object_id (str): The ID of the object to check permission for

Returns:
 bool: True if the user has permission, False otherwise
""""""
', '

def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
 archive_id (str): The ID of the archive from which to retrieve documents
 keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
 list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""', '

def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
 user_id (str): The ID of the user whose activity is being logged
 activity_description (str): A description of the activity

Returns:
 bool: True if the logging was successful, False otherwise
""""""
', '

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
 task_id (str): The ID of the task to be converted
 parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
 bool: True if the conversion was successful, False otherwise
""""""
', '

def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
 work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
 int: The number of work items successfully archived
""""""
', '

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
 department_id (str): The ID of the department to list members for

Returns:
 list: User IDs of all the members in the department
""""""
', '

def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
 user_id (str): The ID of the user whose activities are to be listed
 limit (int): The maximum number of recent activities to return

Returns:
 list: Recent activities of the user
""""""
', '

def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
 user_id (str): The ID of the user to get activities for
 limit (int): The maximum number of activity log entries to return

Returns:
 list: Recent activity log entries
""""""
', '

def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
 contact_id (str): The ID of the contact to update
 new_phone (str): The new phone number for the contact, default is 'None'
 new_email (str): The new email address for the contact, default is 'None'

Returns:
 bool: Status of the update operation
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""



def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
    object_ids (list): A list of object IDs

Returns:
    str: The ID of the generated report
""""""


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""


def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
Update the due date for all high-severity tickets to next Monday and retrieve their change history.,"var_1 = works_list(type=[""ticket""], ticket.severity=[""high""])
var_2 = calculate_due_dates(work_item_ids=var_1, urgency_level=""high"")
var_3 = update_work_item_due_date(work_item_id=var_1[0], due_date=var_2[0])
var_4 = update_work_item_due_date(work_item_id=var_1[1], due_date=var_2[1])
var_5 = update_work_item_due_date(work_item_id=var_1[2], due_date=var_2[2])
var_6 = get_work_item_history(work_id=var_1[0])
var_7 = get_work_item_history(work_id=var_1[1])
var_8 = get_work_item_history(work_id=var_1[2])","

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 due_date (str): The new due date for the work item

Returns:
 None: Indicates that the operation was executed without returning any value
""""""
', '

def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
 work_id (str): The ID of the work item

Returns:
 list: A chronological list of changes made to the work item
""""""
', '

def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
 user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
 list: The list of permissions for the user
""""""
', '

def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be determined

Returns:
 int: The number of tasks assigned to the user
""""""
', 'def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
 work_item_ids (list): A list of work item IDs for which due dates are required
 urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
 list: Due dates for the specified work items
""""""
', '

def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
 work_item_id (str): The ID of the work item to update
 new_stage (str): The new stage to which the work item should be moved

Returns:
 bool: True if the stage is successfully updated, False otherwise
""""""', 'def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
 ticket_id (str): The ID of the ticket where the merged note will be added
 note_ids (list): List of note IDs that will be merged into the ticket
 updated_by (str): The ID of the user performing the merge

Returns:
 str: ID of the updated ticket note
""""""
', '

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
 expense_ids (list): List of expense IDs to calculate the total amount

Returns:
 float: The total amount of the expenses
""""""
', '

def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
 text_id (str): The ID of the text source from which to extract contact information
 entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
 list: Extracted contact information
""""""', '

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task will be assigned

Returns:
 bool: True if assignment was successful, otherwise False
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""



def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Identify work items with severity ""high"" and reassign their ownership to user ""TechLead"", then update their status to ""In Progress"".","var_1 = works_list(ticket.severity=[""high""])
var_2 = search_object_by_name(query=""TechLead"")
var_3 = reassign_work_item_owner(work_id=var_1[0], new_owner_id=var_2)
var_4 = update_work_item_status(work_item_id=var_1[0], new_status=""In Progress"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 new_status (str): The new status to set for the work item
""""""
', '

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
 data_point_ids (list): List of data point IDs to validate

Returns:
 list: Validation results with status (True or False) for each data point
""""""
', '

def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
 report_template_id (str): The ID of the report template to use
 data_source_id (str): The ID of the data source

Returns:
 str: Generated report
""""""
', '

def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
 task_id (str): The ID of the task to be marked as complete

Returns:
 bool: True if marked successfully, False otherwise
""""""
', '

def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
 report_type (str): The type of report to generate
 subject_id (str): The ID of the subject for the report
 include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
 str: The ID of the generated report
""""""
', '

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
 work_id (str): The ID of the work item to be reassigned
 new_owner_id (str): The user ID of the new owner

Returns:
 bool: True if reassignment is successful, False otherwise
""""""
', '

def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
 user_id (str): The ID of the user to set permissions for
 permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
 bool: True if the permission was set successfully, False otherwise
""""""
', '

def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
 user_id (str): The ID of the user whose account is to be deactivated
 reason (str): The reason for deactivating the account

Returns:
 bool: True if the account was successfully deactivated; otherwise False
""""""
', '

def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
 object_ids (list): A list of object IDs to filter
 object_type (str): The type of objects to filter for

Returns:
 list: Filtered object IDs matching the specified type
""""""
', '

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task will be assigned

Returns:
 bool: True if assignment was successful, otherwise False
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""



def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
"""""""
"Validate the data consistency of user ""QAAnalyst""'s workload and summarize all tickets they own with high severity.","var_1 = search_object_by_name(query=""QAAnalyst"")
var_2 = get_user_workload(user_id=var_1)
var_3 = validate_data_consistency(data_id=var_2, schema_id=""workload_schema"")
var_4 = works_list(type=[""ticket""], owned_by=[var_1], ticket.severity=[""high""])
var_5 = summarize_objects(objects=var_4)","

def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""


def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
 data_id (str): The ID of the data to be validated
 schema_id (str): The ID of the schema to validate the data against

Returns:
 bool: True if data is consistent, False otherwise
""""""
', '

def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be determined

Returns:
 int: The number of tasks assigned to the user
""""""
', '

def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
 ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
 bool: True if the ticket was marked as resolved, False otherwise
""""""
', '
def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
 user_id (str): The ID of the user whose status is to be updated
 status (str): The new status to apply to the user account

Returns:
 str: updated User Id
""""""
', '

def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
 task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
 float: Total effort spent on the task
""""""
', '

def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
 contact_id (str): The ID of the contact to update
 new_email (str, optional): The new email address; defaults to None
 new_phone (str, optional): The new phone number; defaults to None

Returns:
 bool: True if the update was successful; otherwise False
""""""
', '

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
 data_point_ids (list): List of data point IDs to validate

Returns:
 list: Validation results with status (True or False) for each data point
""""""
', '

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
 task_id (str): The ID of the task for which dependencies are requested

Returns:
 list: Dependency task IDs
""""""
', '

def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
 user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
 list: User permissions
""""""
', '

def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
 object_id (str): The ID of the object to be removed from the archive

Returns:
 bool: True if the object was successfully removed, False otherwise
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check the data integrity of expense IDs ""EXP-321"", ""EXP-654"", and ""EXP-987"", then calculate the total expense amount.","var_1 = validate_data_integrity(data_point_ids=[""EXP-321"", ""EXP-654"", ""EXP-987""])
var_2 = calculate_expense_totals(expense_ids=[""EXP-321"", ""EXP-654"", ""EXP-987""])","

def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
 data_point_ids (list): List of data point IDs to validate

Returns:
 list: Validation results with status (True or False) for each data point
""""""
', '

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
 task_id (str): The ID of the task for which to estimate completion time

Returns:
 float: The estimated number of hours to complete the task
""""""
', '

def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
 primary_task_id (str): The ID of the primary task which remains after the merge
 duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
 None
""""""
', '

def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
 project_id (str): The ID of the project for which the timeline is requested

Returns:
 list: Key milestones and dates for the project timeline
""""""
', '

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
 expense_ids (list): List of expense IDs to calculate the total amount

Returns:
 float: The total amount of the expenses
""""""
', '

def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
 user_id (str): The ID of the user to get activities for
 limit (int): The maximum number of activity log entries to return

Returns:
 list: Recent activity log entries
""""""
', '

def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
 list: Ticket IDs that are currently blocked
""""""', '

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
 part_id (str): The ID of the part to check in inventory
 minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
 bool: True if the minimum quantity is available; otherwise False
""""""
', '

def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
 user_id (str): The ID of the user whose account is to be deactivated
 reason (str): The reason for deactivating the account

Returns:
 bool: True if the account was successfully deactivated; otherwise False
""""""
', 'def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
 ticket_id (str): The ID of the ticket to be assigned
 user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
 bool: True if the assignment is successful, False otherwise
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""


def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""


def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check if a work item with ID ""TASK-456"" exists, estimate the time for completion, and then assign it to user ""EngineerEmma"".","var_1 = validate_object_existence(object_id=""TASK-456"")
var_2 = estimate_time_for_task(task_id=""TASK-456"", estimation_hours=5)
var_3 = search_object_by_name(query=""EngineerEmma"")
var_4 = assign_task_to_user(task_id=""TASK-456"", user_id=var_3)","

def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
 object_id (str): The ID of the object to check

Returns:
 bool: True if the object exists, otherwise False
""""""
', '

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task will be assigned

Returns:
 bool: True if assignment was successful, otherwise False
""""""
', '

def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
 project_id (str): The ID of the project containing the tasks
 completed_since (str): Archive tasks completed after this timestamp

Returns:
 int: Number of tasks archived
""""""
', '

def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 new_status (str): The new status to set for the work item
""""""
', '

def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
 work_type (str): The type of the work items to filter by
 tag (str): The tag to filter the work items

Returns:
 list: List of work items with the given tag
""""""
', '

def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
 task_id (str): The ID of the task to be updated with an estimated time
 estimation_hours (float): The estimated time in hours to complete the task

Returns:
 None
""""""
', '

def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be determined

Returns:
 int: The number of tasks assigned to the user
""""""
', '

def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
 work_id (str): The ID of the work item to estimate cost for
 cost_per_hour (float): The cost per hour. Default is '100'

Returns:
 float: Estimated cost
""""""', 'def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
 start_date (str): The start date of the desired date range
 end_date (str): The end date of the desired date range
 work_type (list): Optional filter for type of work

Returns:
 list: Work items within the specified date range
""""""
', '

def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be calculated

Returns:
 float: The calculated workload value
""""""



def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check if the object with ID ""OBJ-5467"" exists, calculate the remaining budget for budget ID ""BUD-9910"", and then retrieve and summarize all tickets created by user ""BudgetManager"".","var_1 = validate_object_existence(object_id=""OBJ-5467"")
var_2 = calculate_budget_remaining(budget_id=""BUD-9910"")
var_3 = search_object_by_name(query=""BudgetManager"")
var_4 = works_list(created_by=[var_3], type=[""ticket""])
var_5 = summarize_objects(objects=var_4)","

def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
 object_id (str): The ID of the object to check

Returns:
 bool: True if the object exists, otherwise False
""""""
', '

def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
 user_ids (list): List of user IDs whose roles should be updated
 new_role (str): The new role to assign

Returns:
 int: Number of users successfully updated
""""""
', '

def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
 budget_id (str): The ID of the budget to calculate

Returns:
 float: The amount of remaining budget
""""""
', '

def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
 data_id (str): The ID of the data to be validated
 schema_id (str): The ID of the schema to validate the data against

Returns:
 bool: True if data is consistent, False otherwise
""""""
', '

def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
 contact_id (str): The ID of the contact to update
 new_phone (str): The new phone number for the contact, default is 'None'
 new_email (str): The new email address for the contact, default is 'None'

Returns:
 bool: Status of the update operation
""""""
', '

def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
 task_ids (list): A list of task IDs to calculate cost for

Returns:
 float: Total cost of the tasks
""""""
', '

def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
 task_id (str): The ID of the task to be marked as complete

Returns:
 bool: True if marked successfully, False otherwise
""""""
', '

def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
 object_id (str): The ID of the object to remove from inventory

Returns:
 bool: True if the removal was successful, False otherwise
""""""
', '

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which the progress report is needed
 report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
 str: The generated progress report
""""""
', '

def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
 contact_id (str): The ID of the contact to update
 new_email (str, optional): The new email address; defaults to None
 new_phone (str, optional): The new phone number; defaults to None

Returns:
 bool: True if the update was successful; otherwise False
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""

def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""

def who_am_i():
""""""
Returns the string ID of the current user
""""""



def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check if the user ""QAAnalyst"" exists in the system, fetch all tasks assigned to them, and prioritize these tasks.","var_1 = search_object_by_name(query=""QAAnalyst"")
var_2 = fetch_user_tasks(user_id=var_1)
var_3 = prioritize_objects(objects=var_2)","

def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
 object_id (str): The ID of the object to check

Returns:
 bool: True if the object exists, otherwise False
""""""
', '

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
 report_type (str): The type of report to generate
 data_set_id (str): The ID of the data set to be used for the report

Returns:
 str: A report data string or ID depending on internal implementation
""""""
', '

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
 task_id (str): The ID of the task to be converted

Returns:
 str: The ID of the newly created ticket
""""""
', '

def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
 part_id (str): The ID of the part to check for availability

Returns:
 bool: True if the part is available, False otherwise
""""""
', '

def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
 object_ids (list): List of object IDs to delete

Returns:
 bool: True if objects were successfully deleted, False otherwise
""""""
', '

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
 task_id (str): The ID of the task to be converted
 parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
 bool: True if the conversion was successful, False otherwise
""""""
', 'def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""
', '

def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
 object_id (str): The ID of the object for which history is requested

Returns:
 list: A list of changes made to the object
""""""
', '

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 due_date (str): The new due date for the work item

Returns:
 None: Indicates that the operation was executed without returning any value
""""""
', 'def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
 issue_ids (list): A list of issue IDs to be linked to the project
 project_id (str): The ID of the project to which the issues should be linked

Returns:
 bool: Status of the linking action
""""""



def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Check if work item ""TASK-789"" is complete and generate a detailed progress report for the project associated with this work item.","var_1 = validate_work_item_completeness(work_id=""TASK-789"")
var_2 = search_object_by_name(query=""TASK-789"")
var_3 = generate_progress_report(project_id=var_2, report_format=""detailed"")","

def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
 work_id (str): The ID of the work item to check

Returns:
 bool: True if the work item is complete, False if it lacks information
""""""
', '

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
 event_type (str): The type of event to log
 description (str): A brief description of the event
 user_id (str): The ID of the user involved in the event, if applicable

Returns:
 str: The ID of the logged event
""""""
', '

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which the progress report is needed
 report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
 str: The generated progress report
""""""
', '

def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
 task_id (str): The ID of the task for which to estimate completion time

Returns:
 float: The estimated number of hours to complete the task
""""""
', '

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
 task_id (str): The ID of the task to be assigned
 user_id (str): The ID of the user to whom the task will be assigned

Returns:
 bool: True if assignment was successful, otherwise False
""""""
', '

def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
 department_id (str): The ID of the department to list members for

Returns:
 list: User IDs of all the members in the department
""""""
', '

def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
 user_id (str): The ID of the user whose workload is to be calculated

Returns:
 float: The calculated workload value
""""""
', '

def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
 part_id (str): The ID of the part to check in inventory
 minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
 bool: True if the minimum quantity is available; otherwise False
""""""
', '

def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
 project_id (str): The ID of the project to which resources are allocated
 resource_ids (list): A list of resource IDs to allocate to the project

Returns:
 bool: True if resources could be allocated, False otherwise
""""""
', '

def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
 work_ids (list): A list of work item IDs for report generation

Returns:
 str: The ID of the generated report
""""""



def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""
def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Assign tickets with severity ""high"" to user ""TechLead"" and calculate the project completion rate for project ""PRJ-456"".","var_1 = search_object_by_name(query=""TechLead"")
var_2 = works_list(type=[""ticket""], ticket.severity=[""high""])
var_3 = assign_tickets_to_user(ticket_ids=var_2, user_id=var_1)
var_4 = calculate_project_completion_rate(project_id=""PRJ-456"")","

def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""
def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
 ticket_ids (list): A list of ticket IDs to be assigned
 user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
 None
""""""
', '

def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
 project_id (str): The ID of the project to summarize

Returns:
 str: A summary report of the project
""""""
', '

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
 task_id (str): The ID of the task for which dependencies are requested

Returns:
 list: Dependency task IDs
""""""
', '

def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
 work_item_id (str): The ID of the work item to update
 new_stage (str): The new stage to which the work item should be moved

Returns:
 bool: True if the stage is successfully updated, False otherwise
""""""', '

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
 work_item_id (str): The ID of the work item to be updated
 due_date (str): The new due date for the work item

Returns:
 None: Indicates that the operation was executed without returning any value
""""""
', '

def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', '

def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
 record_ids (list): List of record IDs to filter
 start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
 end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
 list: Filtered record IDs
""""""
', '

def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
 project_id (str): The ID of the project for which progress is being calculated

Returns:
 float: The progress percentage of the project
""""""
', '

def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
 archive_id (str): The ID of the archive from which to retrieve documents
 keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
 list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""', '

def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
 user_id (str): The ID of the user to set permissions for
 permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
 bool: True if the permission was set successfully, False otherwise
""""""



def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""


def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Fetch all tasks assigned to user ""User123"", calculate the total expenses related to these tasks, and then summarize the tasks for a report.","var_1 = who_am_i()
var_2 = search_object_by_name(query=""User123"")
var_3 = fetch_user_tasks(user_id=var_2)
var_4 = calculate_expense_totals(expense_ids=var_3)
var_5 = summarize_objects(objects=var_3)","

def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
 user_id (str): The ID of the user whose tasks are to be fetched
 include_completed (bool): Whether to include completed tasks in the list

Returns:
 list: List of tasks assigned to the user
""""""
', '

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
 feature_id (str): The ID of the feature to toggle access
 user_id (str): The ID of the user whose access will be toggled
 enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
 bool: The resulting access status
""""""
', '

def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
 keyword (str): The keyword to search for in the documents

Returns:
 str: ID of the document containing the keyword
""""""', '

def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
 project_id (str): The ID of the project for which the timeline is requested

Returns:
 list: Key milestones and dates for the project timeline
""""""
', '

def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
 dataset_id (str): The ID of the dataset from which to generate the report
 report_type (str): The type of report to generate, default is 'summary'

Returns:
 str: The ID of the generated report
""""""
', '

def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
 object_id (str): The ID of the object for which the status is updated
 new_status (str): The new status for the object
 changed_by (str): The ID of the user who is changing the status

Returns:
 None
""""""
', '

def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
 expense_ids (list): List of expense IDs to calculate the total amount

Returns:
 float: The total amount of the expenses
""""""
', '

def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
 object_ids (list): List of object IDs to delete

Returns:
 bool: True if objects were successfully deleted, False otherwise
""""""
', '

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
 task_id (str): The ID of the task for which dependencies are requested

Returns:
 list: Dependency task IDs
""""""
', '

def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
 ticket_id (str): The ID of the ticket to be updated
 new_status (str): The new status to update the ticket with

Returns:
 bool: True if the update was successful, otherwise False
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve all work items with severity ""high"" related to the ""Engineering"" Rev organization, calculate the total cost for these tasks, and generate a detailed progress report for the project with ID ""PROJ-456"".","var_1 = search_object_by_name(query=""Engineering"")
var_2 = works_list(issue.rev_orgs=[var_1], ticket.severity=[""high""], type=[""issue"", ""ticket"", ""task""])
var_3 = calculate_cost_of_tasks(task_ids=var_2)
var_4 = generate_progress_report(project_id=""PROJ-456"", report_format=""detailed"")","
def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""

def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
 project_ids (list): A list of project IDs to filter
 status (str): The status to filter by, default is 'active'

Returns:
 list: Project IDs matching the status
""""""
', '

def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
 work_id (str): The ID of the work item for which the estimation is to be made

Returns:
 float: Estimated hours required to complete the work item
""""""
', '

def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
 data_id (str): The ID of the data to be validated
 schema_id (str): The ID of the schema to validate the data against

Returns:
 bool: True if data is consistent, False otherwise
""""""
', '

def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
 ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
 bool: True if the ticket was marked as resolved, False otherwise
""""""
', '

def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
 user_id (str): The ID of the user whose completed items are being requested

Returns:
 list: Completed items by the user
""""""
', '

def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
 task_id (str): The ID of the task for which dependencies are requested

Returns:
 list: Dependency task IDs
""""""
', '

def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
 task_ids (list): A list of task IDs to calculate cost for

Returns:
 float: Total cost of the tasks
""""""
', '

def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
 user_id (str): The ID of the user to check for overdue tasks

Returns:
 None
""""""
', '

def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
 project_id (str): The ID of the project for which the progress report is needed
 report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
 str: The generated progress report
""""""
', '

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
 work_id (str): The ID of the work item to be reassigned
 new_owner_id (str): The user ID of the new owner

Returns:
 bool: True if reassignment is successful, False otherwise
""""""


def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""

         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Filter users from the ""Engineering"" department who are active, check if they have ""edit_work_items"" permission, and then retrieve and summarize work items created by these users.","var_1 = search_object_by_name(query=""Engineering"")
var_2 = filter_users_by_department(department_id=var_1, active_only=True)
var_3 = validate_user_permissions(user_id=var_2, required_permissions=[""edit_work_items""])
var_4 = works_list(created_by=var_2, type=[""issue"", ""ticket"", ""task""])
var_5 = summarize_objects(objects=var_4)","

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""
def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""

def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""


def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""


def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""

def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
 department_id (str): The ID of the department to filter users
 active_only (bool): Filters for only active users if set to True

Returns:
 list: Users in the specified department
""""""
', '

def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: User IDs of the team members
""""""
', '

def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
 user_id (str): The ID of the user whose permissions need to be checked
 required_permissions (list): A list of permissions to check against the user's permissions

Returns:
 bool: True if the user has all the required permissions, False otherwise
""""""
', '

def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
 team_id (str): The ID of the team

Returns:
 list: List of team member IDs
""""""
', '

def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
 dataset_id (str): The ID of the dataset from which to generate the report
 report_type (str): The type of report to generate, default is 'summary'

Returns:
 str: The ID of the generated report
""""""
', '

def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
 project_id (str): The ID of the project to calculate the completion rate for

Returns:
 float: The completion rate as a percentage
""""""
', 'def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
 issue_ids (list): A list of issue IDs to be linked to the project
 project_id (str): The ID of the project to which the issues should be linked

Returns:
 bool: Status of the linking action
""""""
', '

def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
 primary_object_id (str): The ID of the primary object
 duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
 bool: True if the merge was successful, False otherwise
""""""
', '

def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
 primary_ticket_id (str): The ID of the primary ticket that remains
 duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
 None
""""""
', '

def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
 work_id (str): The ID of the work item

Returns:
 float: Estimated effort in hours
""""""


def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
"Retrieve all comments from ticket ID ""TICKET-456"", calculate the estimated work left on the project associated with this ticket, and create actionable tasks from the comments.","var_1 = get_ticket_comments(ticket_id=""TICKET-456"")
var_2 = search_object_by_name(query=""TICKET-456"")
var_3 = calculate_work_left(project_id=var_2)
var_4 = create_actionable_tasks_from_text(text=var_1)","def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
 issue_id (str): The ID of the issue to be updated
 new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
 bool: True if the update was successful, False otherwise
""""""
', '

def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
 ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
 list: Comments associated with the ticket
""""""
', '

def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
 project_id (str): The ID of the project to calculate work for

Returns:
 float: Estimated hours of work left
""""""
', '

def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
 archive_id (str): The ID of the archive from which to retrieve documents
 keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
 list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""', '

def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
 project_id (str): The ID of the project to be analyzed

Returns:
 str: Estimated date of completion
""""""
', '

def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
 category_id (str): The ID of the category to filter projects by
 active_only (bool): Whether to return only active projects

Returns:
 list: List of project IDs matching the category filter
""""""
', '

def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
 task_ids (list): List of task IDs to filter
 completed (bool): The completion status to filter by. Default is 'True'

Returns:
 list: List of task IDs that match the completion status
""""""
', '

def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
 primary_record_id (str): The ID of the primary record to keep
 duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
 bool: True if the merge was successful; otherwise False
""""""
', '

def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
 user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
 list: User permissions
""""""
', '

def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
 project_id (str): The ID of the project containing the tasks
 completed_since (str): Archive tasks completed after this timestamp

Returns:
 int: Number of tasks archived
""""""


def get_sprint_id():
""""""
Returns the ID of the current sprint
""""""


def who_am_i():
""""""
Returns the string ID of the current user
""""""



def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""

def add_work_items_to_sprint(work_ids, sprint_id):
""""""
Adds the given work items to the sprint

Parameters:
    work_ids (list): A list of work item IDs to be added to the sprint
    sprint_id (str): The ID of the sprint to which the work items should be added
""""""


def prioritize_objects(objects):
""""""
Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail

Parameters:
    objects (list): A list of objects to be prioritized

Returns:
    list: Prioritized objects
""""""



def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""

def search_object_by_name(query):
""""""
Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest

Parameters:
    query (str): The search string, could be for example customer’s name, part name, user name

Returns:
    str: ID of matching object
""""""



def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""
         
def summarize_objects(objects):
""""""
Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail

Parameters:
    objects (list): List of objects to summarize

Returns:
    text: Summarized text of the objects
""""""


def get_similar_work_items(work_id):
""""""
Returns a list of work items that are similar to the given work item

Parameters:
    work_id (str): The ID of the work item for which you want to find similar items

Returns:
    list: Similar work items
""""""



def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""


def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""

def works_list(applies_to_part=None, created_by=None, issue.priority=None, issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None, ticket.needs_response=False, ticket.rev_org=None, ticket.severity=None, ticket.source_channel=None, work_type=None):
""""""
Returns a list of work items matching the request

Parameters:
    applies_to_part (list): Filters for work belonging to any of the provided parts
    created_by (list): Filters for work created by any of these users
    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3
    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations
    limit (int): The maximum number of works to return. The default is '50'
    owned_by (list): Filters for work owned by any of these users
    stage.name (list): Filters for records in the provided stage(s) by name
    ticket.needs_response (bool): Filters for tickets that need a response
    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations
    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium
    ticket.source_channel (list): Filters for tickets with any of the provided source channels
    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Matching work items
""""""


def create_actionable_tasks_from_text(text):
""""""
Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item

Parameters:
    text (str): The text from which the actionable insights need to be created

Returns:
    list: tasks created from the given text
""""""
"
