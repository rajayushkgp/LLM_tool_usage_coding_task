Query,Output,Docstring
Create tasks for the reported issues in the component COMP-999,"var_1 = search_object_by_name(query=""COMP-999"")
var_2 = create_actionable_tasks_from_text(text=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""



def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Locate and add p3 issues from REV-Engineering to the sprint,"var_1 = search_object_by_name(query=""REV-Engineering"")
var_2 = works_list(issue.rev_orgs=[var_1], issue.priority=[""p3""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""



def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""



def calculate_progress(project_id):
""""""
Calculates the overall progress of a given project as a percentage

Parameters:
    project_id (str): The ID of the project for which progress is being calculated

Returns:
    float: The progress percentage of the project
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""
"
"Retrieve the current sprint ID and add p3 issues from the ""GammaModule"".","var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""GammaModule"")
var_3 = works_list(issue.priority=[""p3""], applies_to_part=[var_2], type=[""issue""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
","

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""



def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""
"
Find and summarize the latest tasks associated with Rev organization REV-XYZ for quick review,"var_1 = search_object_by_name(query=""REV-XYZ"")
var_2 = works_list(type=[""task""], ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Create tasks from meeting notes and assign them to DevTeam123.,"var_1 = create_actionable_tasks_from_text(text=""meeting notes"")
var_2 = search_object_by_name(query=""DevTeam123"")
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
","

def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""



def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""
"
Prioritize tickets from the REV-345 organization that need a response and summarize the prioritized list,"var_1 = works_list(ticket.rev_org=[""REV-345""], ticket.needs_response=True, type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""



def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""
"
Who won the Indian Elections last time?,#Unanswerable_Invalid_Query_Error,"
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""



def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""
"
Identify work items related to the 'Customer Engagement' project and create a prioritized list,"var_1 = search_object_by_name(query=""Customer Engagement"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = prioritize_objects(objects=var_2)
","def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""

def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""
"
List all high severity tickets coming in from slack from customer Cust123 and generate a summary of them.,"var_1 = search_object_by_name(query=""Cust123"")
var_2 = works_list(ticket.severity=[""high""], ticket.source_channel=[""slack""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
","

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""



def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""



def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""
"
Identify my p1 issues within Rev organization 'REV-789' and summarize for today's meeting,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""REV-789"")
var_3 = works_list(owned_by=[var_1], issue.priority=[""p1""], issue.rev_orgs=[var_2], type=[""issue""])
var_4 = summarize_objects(objects=var_3)
","

def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""



def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""

def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""



def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Retrieve my work items associated with part PART-987 and needing response, then summarize them","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], applies_to_part=[""PART-987""], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
","

def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    
def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""



def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Find and prioritize tasks related to project Gamma, then summarize","var_1 = search_object_by_name(query=""Gamma"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
","

def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Search for an object with the name ""CriticalServer"" and return the highest confidence match","var_1 = search_object_by_name(query=""CriticalServer"")
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""



def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""
"
List all tasks owned by DEVU-321 that are in the 'in-progress' stage and summarize them.,"var_1 = works_list(owned_by=[""DEVU-321""], stage.name=[""in-progress""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Is consciousness a product of the brain, or does the brain serve as a conduit for a greater consciousness?",#Unanswerable_Invalid_Query_Error,"

def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
List all P2 priority tickets from the product PROD-789 and add them to the current sprint.,"var_1 = search_object_by_name(query=""PROD-789"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p2""], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
","def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""



def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    
def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""



def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Find and summarize all P3 issues owned by TechLead and limit the number of work items to 30.,"var_1 = works_list(owned_by=[""TechLead""], issue.priority=[""p3""], type=[""issue""], limit=30)
var_2 = summarize_objects(objects=var_1)
","

def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""



def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""



def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Get the summary of tickets created by me with severity ""blocker"" and link them to the part ""PROD-999""","var_1 = who_am_i()
var_2 = search_object_by_name(query=""PROD-999"")
var_3 = works_list(created_by=[var_1], ticket.severity=[""blocker""], applies_to_part=[var_2], type=[""ticket""])
var_4 = summarize_objects(objects=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Collect all issues related to 'Widget-Improvement' and add them to the 'Engineering' sprint.,"var_1 = search_object_by_name(query=""Widget-Improvement"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""Engineering"")
","

def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""



def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""
"
Extract tasks from the engineering meeting notes T and summarize the action items,"var_1 = create_actionable_tasks_from_text(text=""T"")
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""



def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Create tasks for issues that need response and are created by user USR-456,"var_1 = works_list(ticket.needs_response=True, created_by=[""USR-456""], type=[""issue""])
var_2 = create_actionable_tasks_from_text(text=var_1)
","

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""



def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    
def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""



def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""
"
"For user DEVU-456, summarize their tickets and issues with 'blocker' severity","var_1 = works_list(created_by=[""DEVU-456""], ticket.severity=[""blocker""], type=[""ticket"", ""issue""])
var_2 = summarize_objects(objects=var_1)
","

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""



def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""



def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""



def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""



def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""



def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""

```"
"Display my tasks in ""QA Testing"" stage and add them to the sprint ""S1234""","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""QA Testing""], type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""S1234"")
","

def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""



def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""



def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""


def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""

def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Summarize work related to multiple parts including FEAT-456 and BUG-789, and then prioritize them","var_1 = works_list(applies_to_part=[""FEAT-456"", ""BUG-789""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""



def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""



def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
List all blocker and high severity tickets for the product PROD-789 and summarize the impact,"var_1 = works_list(applies_to_part=[""PROD-789""], ticket.severity=[""blocker"", ""high""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""



def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""



def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Find tickets with severity 'medium', summarize and identify similar work items for PROD-456","var_1 = search_object_by_name(query=""PROD-456"")
var_2 = works_list(ticket.severity=[""medium""], applies_to_part=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_similar_work_items(work_id=var_1)
","

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""

def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
""""""


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""
"
Fetch the current sprint ID and list all tasks assigned to the user DEVU-456,"var_1 = get_sprint_id()
var_2 = search_object_by_name(query=""DEVU-456"")
var_3 = works_list(owned_by=[var_2], type=[""task""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_1)
","

def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""



def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
    object_ids (list): A list of object IDs

Returns:
    str: The ID of the generated report
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""
"
Generate a list of my tickets that need a response and summarize them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
","

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""



def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""



def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""
"
Prioritize tickets from source channel 'email' and filter by user AGENT-007,"var_1 = works_list(owned_by=[""AGENT-007""], ticket.source_channel=[""email""], type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Generate a summary of all p0 issues from the ""Networking"" part category.","var_1 = works_list(applies_to_part=[""Networking""], issue.priority=[""p0""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
","

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""



def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""



def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""
"
"Extract actionable tasks from meeting notes ""ProjectX"" and summarize them for review","var_1 = create_actionable_tasks_from_text(text=""ProjectX"")
var_2 = summarize_objects(objects=var_1)
","def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""
"
"List all tasks owned by user DEVU-456, filter by stage 'development', and add to sprint SPRINT-123","var_1 = works_list(owned_by=[""DEVU-456""], stage.name=[""development""], type=[""task""])
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-123"")
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""



def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Find all issues related to the part 'UI-Widget' and provide a summarized report,"var_1 = works_list(applies_to_part=[""UI-Widget""], type=[""issue""])
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""



def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""



def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""



def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""
"
Summarize the current sprint's work items and find similar tasks to improve efficiency,"var_1 = get_sprint_id()
var_2 = works_list()
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""



def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""
"
" Find work items created by User789, prioritize them, and add them to the current sprint, limiting the results to 45.","var_1 = works_list(created_by=[""User789""], limit=45)
var_2 = prioritize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""



def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""



def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""



def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Summarize the tasks for the Rev organization ORG-321 and list any tickets requiring response,"var_1 = search_object_by_name(query=""ORG-321"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
","

def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""



def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""



def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Find issues related to the ""ENH-456"" enhancement and determine if any require urgent responses","var_1 = search_object_by_name(query=""ENH-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
","

def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Provide a summary of all issues raised by user 'UserX' that need a response,"var_1 = works_list(type=[""issue""], created_by=[""UserX""], ticket.needs_response=True)
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""



def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""
"
"Add tasks related to the ""CAPL-789"" part to the sprint ""Sprint-123""","var_1 = search_object_by_name(query=""CAPL-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""Sprint-123"")
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""



def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Identify and prioritize tasks related to the 'Frontend' component and prepare them for the current sprint,"var_1 = search_object_by_name(query=""Frontend"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""



def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""
"
Retrieve my tasks awaiting response and organize them by urgency,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = prioritize_objects(objects=var_2)
","def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""

def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Retrieve and summarize tasks of type 'issue' and 'ticket' for CAPL-567,"var_1 = search_object_by_name(query=""CAPL-567"")
var_2 = works_list(type=[""issue"", ""ticket""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
","

def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""



def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""



def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""



def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Get the current user's issues with priority 'p2' that are in the 'development' stage, and summarize the list.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], stage.name=[""development""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
","

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""

def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""
"
Summarize all tasks that need a response and are in a 'QA' stage,"var_1 = works_list(stage.name=[""QA""], ticket.needs_response=True, type=[""task""])
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""
"
Generate a summary of issues tagged with 'Urgent-Fix' and assign them to the 'Hotfix' sprint.,"var_1 = search_object_by_name(query=""Urgent-Fix"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""Hotfix"")
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""



def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Find and summarize all tickets from Rev organization REV-555 that need a response,"var_1 = works_list(ticket.rev_org=[""REV-555""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
","

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""



def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""



def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""



def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
"""""""
Generate a list of tasks from the executive meeting notes and summarize the outcomes.,"var_1 = create_actionable_tasks_from_text(text=""executive meeting notes"")
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Retrieve and summarize tickets that require a response from support channel ""Email""","var_1 = works_list(ticket.needs_response=True, ticket.source_channel=[""Email""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"What are the top-rated tourist attractions in Rome, Italy?",#Unanswerable_Invalid_Query_Error,"

def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""
"
Get the ID for the current sprint and list all low severity tickets for it,"var_1 = get_sprint_id()
var_2 = works_list(ticket.severity=[""low""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
"""""""
"Find tickets needing a response, summarize, and prioritize for the REV-456 organization","var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(type=[""ticket""], ticket.needs_response=True, ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""



def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Retrieve the current sprint's ID and summarize the tasks within it,"var_1 = get_sprint_id()
var_2 = works_list(type=[""task""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Generate a list of medium severity tickets and add them to sprint spr5,"var_1 = works_list(ticket.severity=[""medium""], type=[""ticket""])
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""spr5"")
","

def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    
def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""



def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""



def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""
"
"Given the name ""LeadTech"", find associated work items, create tasks for urgent issues, and add them to the sprint","var_1 = search_object_by_name(query=""LeadTech"")
var_2 = works_list(created_by=[var_1], ticket.severity=[""blocker""], type=[""issue""])
var_3 = create_actionable_tasks_from_text(text=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Prioritize and summarize all P2 issues under the PRODUCT rev organization with a limit of 20 work items.,"var_1 = works_list(issue.rev_orgs=[""PRODUCT""], issue.priority=[""p2""], type=[""issue""], limit=20)
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
","

def calculate_budget_allocation(project_id, cost_limit):
""""""
Calculates and assigns the budget allocation for a project

Parameters:
    project_id (str): The ID of the project for which the budget is calculated
    cost_limit (float): The cost limit for the project's budget

Returns:
    float: The amount allocated to the project budget
""""""

def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""



def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""
"
Summarize the tasks related to project 'Alpha',"var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Aggregate all tickets requiring a response for the engineering team,"var_1 = works_list(ticket.needs_response=True, owned_by=[""engineering team""], type=[""ticket""])
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Identify work items linked to part PROD-456, filter by Rev organization ORG-678, and provide a summary.","var_1 = search_object_by_name(query=""ORG-678"")
var_2 = works_list(applies_to_part=[""PROD-456""], issue.rev_orgs=[var_1])
var_3 = summarize_objects(objects=var_2)
","

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""



def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""



def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""
"
"Give me a summary of tickets needing response for the ""Beta"" department","var_1 = search_object_by_name(query=""Beta"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Retrieve the sprint ID and add all my tasks with 'blocker' severity to it,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""blocker""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""



def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""

```"
Find issues assigned to me with high priority and summarize them.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""high""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""
"
"Find all work items with type ""issue"" that involve Rev organization ""REV-456"", prioritize and add to sprint ""SPRINT-123""","var_1 = works_list(issue.rev_orgs=[""REV-456""], type=[""issue""])
var_2 = prioritize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-123"")
","

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Is knowledge a limitation, and ignorance a form of liberation?",#Unanswerable_Invalid_Query_Error,"
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""



def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Find work items for component 'UIX-987' and list them by priority,"var_1 = works_list(applies_to_part=[""UIX-987""], type=[""issue"", ""ticket"", ""task""])
var_2 = prioritize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Summarize tickets requiring response for Rev organization ""REV-321""","var_1 = works_list(ticket.rev_org=[""REV-321""], ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""
"
Find tasks related to project Alpha and summarize them,"var_1 = search_object_by_name(query=""project Alpha"")
var_2 = works_list(type=[""task""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""



def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""
"
Add tasks related to customer 'InnovateCorp' to the sprint after summarizing,"var_1 = search_object_by_name(query=""InnovateCorp"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
","def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""



def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""



def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""
"
"For part CAPL-987, summarize all P1 and P2 issues and tickets requiring high priority attention","var_1 = search_object_by_name(query=""CAPL-987"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p1"", ""p2""], ticket.severity=[""high""], type=[""issue"", ""ticket""])
var_3 = summarize_objects(objects=var_2)
","

def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Retrieve my work of the type ""issue"" and ""task"", add them to the current sprint, and then get a summary of the sprint contents.","var_1 = who_am_i()
var_2 = works_list(created_by=[var_1], type=[""issue"", ""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = summarize_objects(objects=var_2)
","def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""



def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def log_system_activity(activity_description, user_id=None):
""""""
Logs a system activity with an optional user ID

Parameters:
    activity_description (str): A brief description of the activity being logged
    user_id (str, optional): The ID of the user associated with the activity; defaults to None

Returns:
    bool: True if the activity was logged successfully; otherwise False
""""""

def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""
"
"Retrieve and summarize all tickets marked as blocker severity associated with ""REV-Engineering"".","var_1 = search_object_by_name(query=""REV-Engineering"")
var_2 = works_list(ticket.severity=[""blocker""], ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""



def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Find similar issues to ENG-432, summarize them, and then find work items similar to the summary","var_1 = get_similar_work_items(work_id=""ENG-432"")
var_2 = summarize_objects(objects=var_1)
var_3 = get_similar_work_items(work_id=var_2)
","

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""



def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""
"
Generate tasks from the discussion notes in the document Doc567 and add them to my sprint,"var_1 = create_actionable_tasks_from_text(text=""Doc567"")
var_2 = who_am_i()
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
","

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""



def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Locate the current sprint and add any urgent tasks created by user ""UserABC"" to it","var_1 = search_object_by_name(query=""UserABC"")
var_2 = get_sprint_id()
var_3 = works_list(created_by=[var_1], ticket.severity=[""blocker""], type=[""task""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""



def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""



def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""



def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""
"
"Find work items for the ""Alpha"" project, filter by tasks, and get the list of high priority tasks","var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""



def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""

```


def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""



def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""



def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""



def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""
"
What are the upcoming video game releases for this year?,#Unanswerable_Invalid_Query_Error,"
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""



def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Identify and summarize low priority tasks in the design phase for the project PROJ-789,"var_1 = works_list(type=[""task""], stage.name=[""design""], ticket.severity=[""low""], applies_to_part=[""PROJ-789""])
var_2 = summarize_objects(objects=var_1)
","

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""
"
Add my 'urgent-fix' issues to the current sprint and prioritize the sprint items,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""urgent-fix""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
var_5 = prioritize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"List all tasks created by user USER-XYZ, prioritize them, and add them to the sprint with ID SPRINT-789.","var_1 = works_list(created_by=[""USER-XYZ""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-789"")
","

def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""



def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""



def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Find and summarize work items related to ""ENH-789"" and identify their severity","var_1 = search_object_by_name(query=""ENH-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""work""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Summarize all tickets that require a response from the engineering team,"var_1 = search_object_by_name(query=""engineering team"")
var_2 = works_list(ticket.needs_response=True, owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Extract actionable tasks from the meeting notes ""M"" and assign to ""Delta"" team members","var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = search_object_by_name(query=""Delta"")
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""



def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""



def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""
"
What if time is not a linear progression but a complex web of interconnected moments?,#Unanswerable_Invalid_Query_Error,"
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Find open issues assigned to me and summarise them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""
"
Generate tasks from meeting notes X and get the sprint ID,"var_1 = create_actionable_tasks_from_text(text=""X"")
var_2 = get_sprint_id()
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Add tasks for customer follow-ups mentioned in document 'Notes-123' to my task list,"var_1 = create_actionable_tasks_from_text(text=""Notes-123"")
var_2 = who_am_i()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""



def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""
"
Summarize the current sprint's tasks for user USER-ABC,"var_1 = search_object_by_name(query=""USER-ABC"")
var_2 = get_sprint_id()
var_3 = works_list(owned_by=[var_1], type=[""task""])
var_4 = summarize_objects(objects=var_3)
","

def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""



def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def archive_completed_work(work_ids):
""""""
Archives a list of completed work items

Parameters:
    work_ids (list): A list of work item IDs that have been completed and need to be archived

Returns:
    int: The number of work items successfully archived
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def update_work_item_status(work_item_id, new_status):
""""""
Updates the status of a given work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    new_status (str): The new status to set for the work item
""""""
"
"Retrieve the current sprint's tasks and filter by the ""Development"" stage","var_1 = get_sprint_id()
var_2 = works_list(stage.name=[""Development""])
var_3 = prioritize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Retrieve and prioritize tasks related to CAPL-123 that need a response,"var_1 = works_list(applies_to_part=[""CAPL-123""], ticket.needs_response=True, type=[""task""])
var_2 = prioritize_objects(objects=var_1)
","

def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""
"
"Return a list of my open tickets that need a response and are associated with ""TechCorp""","var_1 = who_am_i()
var_2 = search_object_by_name(query=""TechCorp"")
var_3 = works_list(owned_by=[var_1], ticket.needs_response=True, ticket.rev_org=[var_2], type=[""ticket""])
","

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""

def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""
"
Add my recently created high priority tickets to the current sprint,"var_1 = who_am_i()
var_2 = get_sprint_id()
var_3 = works_list(created_by=[var_1], issue.priority=[""high""], type=[""ticket""])
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""



def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""



def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""
"
"Find and summarize work items related to component COMP-456, then prioritize and add them to my sprint","var_1 = search_object_by_name(query=""COMP-456"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], applies_to_part=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
var_5 = get_sprint_id()
var_6 = add_work_items_to_sprint(work_ids=var_4, sprint_id=var_5)
","

def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def estimate_work_hours(work_id):
""""""
Estimates the number of hours required to complete a specific work item

Parameters:
    work_id (str): The ID of the work item for which the estimation is to be made

Returns:
    float: Estimated hours required to complete the work item
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""



def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""



def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""
"
Add all tasks related to the Epic EPIC-789 to the current sprint,"var_1 = search_object_by_name(query=""EPIC-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
","

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""
"
Create tasks from the insights of a project update and add them to the sprint for user USER-123.,"var_1 = search_object_by_name(query=""USER-123"")
var_2 = create_actionable_tasks_from_text(text=""project update"")
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""



def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""



def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""



def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""
"
"Get similar tasks to TASK-789, summarize and prioritize for current sprint","var_1 = get_similar_work_items(work_id=""TASK-789"")
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Retrieve and summarize all tickets needing a response for user DEVU-123,"var_1 = search_object_by_name(query=""DEVU-123"")
var_2 = works_list(ticket.needs_response=True, owned_by=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""
"
"Identify tickets labeled as ""high"" severity for component ""UI-Component"", summarize them, and prioritize for the current release.","var_1 = search_object_by_name(query=""UI-Component"")
var_2 = works_list(applies_to_part=[var_1], ticket.severity=[""high""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""



def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""
"
"Summarize my tickets with ""medium"" severity and response needed","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""medium""], ticket.needs_response=True, type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""
"
"Add all P1 issues related to service ""ServiceY"" to the upcoming sprint","var_1 = search_object_by_name(query=""ServiceY"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
","def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""
"
Create a list of action items from the meeting notes and add to my 'To-Do' tasks,"var_1 = create_actionable_tasks_from_text(text=""meeting notes"")
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Summarize tasks related to project PROJ-456 and check for any that need response,"var_1 = search_object_by_name(query=""PROJ-456"")
var_2 = works_list(applies_to_part=[var_1], ticket.needs_response=True, type=[""task""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""



def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""
"
What if our emotions are not just personal experiences but a shared energy connecting all living beings?,#Unanswerable_Invalid_Query_Error,"def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    
def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""



def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""



def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""



def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
"""""""
"Identify tasks for ""EpsilonExpansion"" requiring response, summarize and add to my tasks","var_1 = search_object_by_name(query=""EpsilonExpansion"")
var_2 = works_list(type=[""task""], ticket.needs_response=True, ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = who_am_i()
var_5 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_4)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Add new high priority issues to current sprint,"var_1 = works_list(issue.priority=[""high""], type=[""issue""])
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""



def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""

```"
Summarize high and blocker severity tickets for the mobile team,"var_1 = works_list(ticket.severity=[""high"", ""blocker""], owned_by=[""mobile team""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Extract tasks from the ""project update"" notes and add them to the sprint for execution","var_1 = create_actionable_tasks_from_text(text=""project update"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""
"
"Identify tasks created by 'UserX', prioritize them, and summarize the top priority tasks","var_1 = works_list(created_by=[""UserX""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=[var_2[0]])
","

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""



def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""
"
Collect my issues from Rev organization REV-321 and summarize the urgent ones,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""REV-321"")
var_3 = works_list(owned_by=[var_1], issue.rev_orgs=[var_2], type=[""issue""])
var_4 = summarize_objects(objects=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""
"
Retrieve and prioritize issues from Rev organization REV-456 with priority p2 and then add them to sprint SPRINT-789,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(issue.priority=[""p2""], issue.rev_orgs=[var_1], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = add_work_items_to_sprint(work_ids=var_3, sprint_id=""SPRINT-789"")
","def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Retrieve a list of tickets with 'blocker' severity from REV-456 and summarize them for review,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.severity=[""blocker""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""


def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""



def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""
"
"Is there a purpose to existence, or do we create our own meaning in a seemingly indifferent universe?",#Unanswerable_Invalid_Query_Error,"
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""



def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""



def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""



def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
" Prioritize and add to the current sprint all tasks related to part SEC-999, limiting the results to 25.","var_1 = search_object_by_name(query=""SEC-999"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""], limit=25)
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
","

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""



def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""



def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""
"
"Find all tasks related to the ""DEV-OPS"" project and list them by ascending priority","var_1 = search_object_by_name(query=""DEV-OPS"")
var_2 = works_list(issue.rev_orgs=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""



def merge_duplicate_records(primary_record_id, duplicate_record_id):
""""""
Merges a duplicate record into a primary record

Parameters:
    primary_record_id (str): The ID of the primary record to keep
    duplicate_record_id (str): The ID of the duplicate record to merge

Returns:
    bool: True if the merge was successful; otherwise False
""""""



def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""



def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""



def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""
"
Find issues that need a response for Rev organization REV-256 and summarize them,"var_1 = works_list(issue.rev_orgs=[""REV-256""], ticket.needs_response=True, type=[""issue""])
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""
"
"Identify my tasks in ""QA-Testing"" stage and assign to the upcoming sprint","var_1 = who_am_i()
var_2 = works_list(type=[""task""], owned_by=[var_1], stage.name=[""QA-Testing""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""



def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""



def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""
"
"Retrieve all tasks created by user USER-321, filter for stage 'development', and add to sprint SPRINT-ID-123.","var_1 = works_list(type=[""task""], created_by=[""USER-321""], stage.name=[""development""])
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-ID-123"")
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""



def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""
"
Find p0 priority tasks assigned to user USER-456 and summarize them,"var_1 = works_list(issue.priority=[""p0""], owned_by=[""USER-456""], type=[""task""])
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def allocate_resources_to_project(project_id, resource_ids):
""""""
Allocates specified resources to a project

Parameters:
    project_id (str): The ID of the project to which resources are allocated
    resource_ids (list): A list of resource IDs to allocate to the project

Returns:
    bool: True if resources could be allocated, False otherwise
""""""



def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""



def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def log_user_activity(user_id, activity_description):
""""""
Logs a user's activity with a description

Parameters:
    user_id (str): The ID of the user whose activity is being logged
    activity_description (str): A description of the activity

Returns:
    bool: True if the logging was successful, False otherwise
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""
"
Summarize tasks from the 'QA Team' and list them by priority for the upcoming sprint,"var_1 = works_list(created_by=[""QA Team""], type=[""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
","

def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""



def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""



def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
""""""


def mark_task_as_completed(task_id):
""""""
Marks a task as completed in the system.

Parameters:
    task_id (str): The ID of the task to be marked as complete

Returns:
    bool: True if marked successfully, False otherwise
""""""
"
"Find the current sprint ID and list all tasks within it, then summarize those tasks and search for any similar to ""TASK-456"".","var_1 = get_sprint_id()
var_2 = works_list(stage.name=[""current""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = search_object_by_name(query=""TASK-456"")
var_5 = get_similar_work_items(work_id=var_4)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""



def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Find and summarize work items related to the ""Analytics"" project created by user ""ANALYT-321""","var_1 = search_object_by_name(query=""Analytics"")
var_2 = works_list(created_by=[""ANALYT-321""], applies_to_part=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Find tasks related to the ""Release 2.1"" feature and organize them by priority.","var_1 = search_object_by_name(query=""Release 2.1"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""



def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""
"
"Search for work items from 'REV-321', prioritize and add to sprint 'SPRINT-789'","var_1 = works_list(owned_by=[""REV-321""], type=[""issue"", ""ticket"", ""task""])
var_2 = prioritize_objects(objects=var_1)
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-789"")
","

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""



def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""



def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Summarize all tickets that need a response and are associated with the Rev organization ORG-789,"var_1 = search_object_by_name(query=""ORG-789"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""



def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""
"
Add new high-priority tickets from REV-456 to my sprint,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.severity=[""high""], ticket.rev_org=[var_1], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""



def track_time_on_task(task_id, hours_spent):
""""""
Tracks time spent on a task by logging the number of hours

Parameters:
    task_id (str): The ID of the task on which time is spent
    hours_spent (float): The number of hours spent on the task

Returns:
    bool: Status of the time tracking
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Retrieve the current user's ID and summarize their tasks.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Search for customer 'Enterprise123', list their P2 issues, and summarize","var_1 = search_object_by_name(query=""Enterprise123"")
var_2 = works_list(issue.priority=[""p2""], ticket.rev_org=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
","

def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""
"
What are the new features in the latest iPhone model?,#Unanswerable_Invalid_Query_Error,"def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""



def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""

def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def estimate_completion_time(task_id):
""""""
Estimates the completion time for a given task

Parameters:
    task_id (str): The ID of the task for which to estimate completion time

Returns:
    float: The estimated number of hours to complete the task
""""""



def merge_duplicate_work_items(primary_work_id, duplicate_work_ids):
""""""
Merges duplicate work items into the primary work item

Parameters:
    primary_work_id (str): The ID of the primary work item
    duplicate_work_ids (list): List of IDs of duplicate work items to be merged

Returns:
    bool: True if merge was successful, otherwise False
""""""



def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""
"
"Check for tickets that need a response, summarize them, and prioritize.","var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""



def check_object_permission(user_id, object_id):
""""""
Checks if a user has permission to access a specific object

Parameters:
    user_id (str): The ID of the user
    object_id (str): The ID of the object to check permission for

Returns:
    bool: True if the user has permission, False otherwise
""""""



def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""



def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""
"
Prioritize tasks related to project Alpha and present a summary,"var_1 = search_object_by_name(query=""Alpha"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
","

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def calculate_estimated_effort(work_id):
""""""
Calculates the estimated effort required to complete a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    float: Estimated effort in hours
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""



def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""



def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""



def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""
"
"What if our thoughts have the power to shape the fabric of reality, influencing the course of events?",#Unanswerable_Invalid_Query_Error,"

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""



def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""
"
Add all P1 enhancement issues created by user DEVU-456 to the sprint,"var_1 = search_object_by_name(query=""DEVU-456"")
var_2 = works_list(created_by=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
","def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""

def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""



def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    
def fetch_user_tasks(user_id, include_completed=False):
""""""
Retrieves a list of tasks assigned to a user

Parameters:
    user_id (str): The ID of the user whose tasks are to be fetched
    include_completed (bool): Whether to include completed tasks in the list

Returns:
    list: List of tasks assigned to the user
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""



def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""
"
" Find and summarize tickets with severity high that need a response, limiting the results to 50.","var_1 = works_list(ticket.severity=[""high""], ticket.needs_response=True, limit=50, type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Determine my tasks in the 'development' stage and organize them by urgency,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Can you provide the lyrics to the song ""Bohemian Rhapsody"" by Queen?",#Unanswerable_Invalid_Query_Error,"
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""



def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Find all P2 tickets related to ""CustomerX"" and then summarize the results.","var_1 = search_object_by_name(query=""CustomerX"")
var_2 = works_list(issue.rev_orgs=[var_1], issue.priority=[""p2""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Find tickets needing response for REV-456 and add them to my sprint,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.needs_response=True, ticket.rev_org=[var_1], type=[""ticket""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""



def get_sprint_history(sprint_id):
""""""
Retrieves the change history of a sprint

Parameters:
    sprint_id (str): The ID of the ticket

Returns:
    list: A list of changes made to the sprint
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""
"
"For the user DEVU-456, find all their 'task' type work items and generate a summary","var_1 = works_list(type=[""task""], owned_by=[""DEVU-456""])
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""
"
Find the current user's P1 issues and summarize them,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def check_availability_of_part(part_id):
""""""
Checks if a specific part is available in inventory

Parameters:
    part_id (str): The ID of the part to check for availability

Returns:
    bool: True if the part is available, False otherwise
""""""



def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Find my tasks that are in the backlog stage and organize them by priority.,"var_1 = who_am_i()
var_2 = works_list(stage.name=[""backlog""], owned_by=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""



def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""

def link_issues_to_project(issue_ids, project_id):
""""""
Links the given issues to the specified project

Parameters:
    issue_ids (list): A list of issue IDs to be linked to the project
    project_id (str): The ID of the project to which the issues should be linked

Returns:
    bool: Status of the linking action
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
"""""""
Display tasks for user DEVU-789 and filter those associated with Rev organization REV-456,"var_1 = search_object_by_name(query=""DEVU-789"")
var_2 = works_list(created_by=[var_1], issue.rev_orgs=[""REV-456""], type=[""task""])
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Find work related to the ""ProjectX"" enhancement and get a summary","var_1 = search_object_by_name(query=""ProjectX"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Identify my tasks that are in the 'development' stage and add them to my current sprint,"var_1 = who_am_i()
var_2 = works_list(stage.name=[""development""], owned_by=[var_1], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""
"
Identify work items for customer BetaCorp and sort by priority,"var_1 = search_object_by_name(query=""BetaCorp"")
var_2 = works_list(type=[""issue"", ""ticket"", ""task""], ticket.rev_org=[var_1])
var_3 = prioritize_objects(objects=var_2)
","

def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""



def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""



def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""
"
"Assign p3 priority issues to the current sprint for the ""frontend"" team","var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p3""], owned_by=[""frontend""], type=[""issue""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Look up the ID of the user 'UserX' and summarize all their owned work items,"var_1 = search_object_by_name(query=""UserX"")
var_2 = works_list(owned_by=[var_1], type=[""issue"", ""ticket"", ""task""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""



def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Get my tasks related to `DOC-321` that need a response, prioritize and summarize them.","var_1 = who_am_i()
var_2 = works_list(type=[""task""], applies_to_part=[""DOC-321""], owned_by=[var_1], ticket.needs_response=True)
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def get_recent_activity_log(user_id, limit=10):
""""""
Gets the most recent activity log entries for a given user

Parameters:
    user_id (str): The ID of the user to get activities for
    limit (int): The maximum number of activity log entries to return

Returns:
    list: Recent activity log entries
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Search for a user named DevLead, list all tickets they own, and summarize the tickets from the channel 'email'","var_1 = search_object_by_name(query=""DevLead"")
var_2 = works_list(owned_by=[var_1], ticket.source_channel=[""email""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def generate_progress_report(project_id, report_format=""summary""):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which the progress report is needed
    report_format (str): The format of the report; 'summary' or 'detailed'. The default is 'summary'

Returns:
    str: The generated progress report
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""



def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""
"
List all tickets requiring a response and add them to sprint SPRINT-456,"var_1 = works_list(ticket.needs_response=True, type=[""ticket""])
var_2 = add_work_items_to_sprint(work_ids=var_1, sprint_id=""SPRINT-456"")
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""

def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""

def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Generate a list of work items owned by user ""DEV_LEAD_456"" and filter for those in ""QAReview""","var_1 = works_list(owned_by=[""DEV_LEAD_456""], stage.name=[""QAReview""], type=[""work""])
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def get_work_item_history(work_id):
""""""
Retrieves the history of changes for a given work item

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: A chronological list of changes made to the work item
""""""



def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"What if our existence is a result of a cosmic coincidence, and life is a rare anomaly in the universe?",#Unanswerable_Invalid_Query_Error,"
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    
def filter_projects_by_status(project_ids, status=""active""):
""""""
Filters a list of project IDs by their status

Parameters:
    project_ids (list): A list of project IDs to filter
    status (str): The status to filter by, default is 'active'

Returns:
    list: Project IDs matching the status
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""



def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""



def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""
"
Identify and prioritize tickets from Rev organization REV-321 and add them to my sprint,"var_1 = search_object_by_name(query=""REV-321"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
","def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""



def retrieve_user_permissions(user_id):
""""""
Retrieves the list of permissions for the specified user

Parameters:
    user_id (str): The ID of the user whose permissions are to be retrieved

Returns:
    list: The list of permissions for the user
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""



def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""



def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Extract tasks from meeting notes M and summarize them for review.,"var_1 = create_actionable_tasks_from_text(text=""M"")
var_2 = summarize_objects(objects=var_1)
","

def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def list_user_skills(user_id):
""""""
Lists the skills associated with the specified user

Parameters:
    user_id (str): The ID of the user whose skills are being queried

Returns:
    list: The skills of the user
""""""



def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""

def filter_users_by_department(department_id=None, active_only=False):
""""""
Filters a list of users that belong to the specified department

Parameters:
    department_id (str): The ID of the department to filter users
    active_only (bool): Filters for only active users if set to True

Returns:
    list: Users in the specified department
""""""



def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
" Locate and summarize tickets from the PHONE source channel with severity high, limiting the results to 40.","var_1 = works_list(ticket.source_channel=[""PHONE""], ticket.severity=[""high""], type=[""ticket""], limit=40)
var_2 = summarize_objects(objects=var_1)
","

def calculate_workload_for_user(user_id):
""""""
Calculates the total number of open work items assigned to a user

Parameters:
    user_id (str): The ID of the user for whom to calculate the workload

Returns:
    int: The total number of open work items
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Find and summarize all 'blocker' severity tickets,"var_1 = works_list(type=[""ticket""], ticket.severity=[""blocker""])
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"For user DEVU-789, summarize tasks with 'low' priority that are associated with Rev organization 'REV-456'","var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(type=[""task""], owned_by=[""DEVU-789""], ticket.severity=[""low""], ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
","

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""



def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""



def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""



def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Find work items for part CAPL-123 created by user DEVU-456 and filter by p2 priority,"var_1 = search_object_by_name(query=""CAPL-123"")
var_2 = search_object_by_name(query=""DEVU-456"")
var_3 = works_list(applies_to_part=[var_1], created_by=[var_2], issue.priority=[""p2""], type=[""issue""])
","def assign_tickets_to_user(ticket_ids, user_id):
""""""
Assigns a set of tickets to a specified user

Parameters:
    ticket_ids (list): A list of ticket IDs to be assigned
    user_id (str): The ID of the user to whom the tickets will be assigned

Returns:
    None
""""""



def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""

def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def generate_unique_identifier(prefix, use_timestamp=True):
""""""
Generates a unique identifier with an optional timestamp

Parameters:
    prefix (str): A prefix for the identifier
    use_timestamp (bool): If true, appends a timestamp to the prefix; defaults to True

Returns:
    str: The generated unique identifier
""""""

```"
"Prioritize and summarize tickets from the SALES source channel, limiting the results to 35.","var_1 = works_list(ticket.source_channel=[""SALES""], limit=35, type=[""ticket""])
var_2 = prioritize_objects(objects=var_1)
var_3 = summarize_objects(objects=var_2)
","

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def filter_users_by_skill(skill_name, minimum_proficiency=3):
""""""
Filters users by a specific skill and its minimum proficiency level

Parameters:
    skill_name (str): The name of the skill to filter by
    minimum_proficiency (int): The minimum proficiency level a user should have in the skill

Returns:
    list: A list of user IDs that match the criteria
""""""



def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Retrieve the current sprint ID, list all tasks within it, and then provide a summary of these tasks.","var_1 = get_sprint_id()
var_2 = works_list(stage.name=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
","

def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""



def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""



def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""



def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""


def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Find similar tasks to TASK-321, summarize and rank them by priority","var_1 = get_similar_work_items(work_id=""TASK-321"")
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def estimate_task_duration(task_id, complexity_level):
""""""
Estimates the duration needed to complete a task based on its complexity level

Parameters:
    task_id (str): The ID of the task
    complexity_level (str): The complexity level of the task. Allowed values: 'low', 'medium', 'high'

Returns:
    float: Estimated duration in hours
""""""



def filter_records_by_date(record_ids, start_date, end_date):
""""""
Filters a list of record IDs based on a date range

Parameters:
    record_ids (list): List of record IDs to filter
    start_date (str): Start date for the filtering in 'YYYY-MM-DD' format
    end_date (str): End date for the filtering in 'YYYY-MM-DD' format

Returns:
    list: Filtered record IDs
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""
"
Retrieve and summarize my work items of type 'issue' that are related to the 'QA' part,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""QA"")
var_3 = works_list(type=[""issue""], owned_by=[var_1], applies_to_part=[var_2])
var_4 = summarize_objects(objects=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Identify tasks linked to the product CORE-789, determine their urgency, and summarize the urgent ones","var_1 = search_object_by_name(query=""CORE-789"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
","

def update_work_item_due_date(work_item_id, due_date):
""""""
Updates the due date for the specified work item

Parameters:
    work_item_id (str): The ID of the work item to be updated
    due_date (str): The new due date for the work item

Returns:
    None: Indicates that the operation was executed without returning any value
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    
def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""



def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Summarize all P1 tickets from the support channel 'email' that are pending review,"var_1 = works_list(ticket.severity=[""p1""], ticket.source_channel=[""email""], stage.name=[""pending review""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""
"
"Identify issues owned by me that need a response, and return a prioritized list","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
","

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""



def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""



def generate_report(report_type, subject_id, include_summary=True):
""""""
Generates a report of a specific type for a subject in the system

Parameters:
    report_type (str): The type of report to generate
    subject_id (str): The ID of the subject for the report
    include_summary (bool): Whether to include a summary in the report; defaults to True

Returns:
    str: The ID of the generated report
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Create tasks for each actionable item from the email content 'E' and summarize these tasks,"var_1 = create_actionable_tasks_from_text(text='E')
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""



def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""



def generate_report_from_data(dataset_id, report_type=""summary""):
""""""
Generates a specific type of report from a dataset

Parameters:
    dataset_id (str): The ID of the dataset from which to generate the report
    report_type (str): The type of report to generate, default is 'summary'

Returns:
    str: The ID of the generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Get the current user's tickets that need a response and organize them by severity,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""



def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""



def filter_tasks_by_completion(task_ids, completed=True):
""""""
Filters the list of tasks by their completion status

Parameters:
    task_ids (list): List of task IDs to filter
    completed (bool): The completion status to filter by. Default is 'True'

Returns:
    list: List of task IDs that match the completion status
""""""



def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""
"
"Find tickets from REV-456, summarize and prioritize them","var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
var_4 = prioritize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def check_ticket_status(ticket_id):
""""""
Checks the status of a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose status is to be checked

Returns:
    str: The status of the ticket
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""



def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""



def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""
"
"Filter my P2 tickets, prioritize them, and retrieve the sprint ID.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.severity=[""p2""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""



def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""



def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""

def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""
"
Create a report of all open tickets from the Tech Support channel,"var_1 = works_list(ticket.source_channel=[""Tech Support""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
","

def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""



def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""



def validate_data_consistency(data_id, schema_id):
""""""
Validates if data conforms to a specified schema for consistency

Parameters:
    data_id (str): The ID of the data to be validated
    schema_id (str): The ID of the schema to validate the data against

Returns:
    bool: True if data is consistent, False otherwise
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""



def convert_task_to_subtask(task_id, parent_task_id):
""""""
Converts a standalone task into a subtask of another task

Parameters:
    task_id (str): The ID of the task to be converted
    parent_task_id (str): The ID of the parent task to which the subtask will be linked

Returns:
    bool: True if the conversion was successful, False otherwise
""""""
"
Organize my `p1` issues into the `QA-Testing` stage and prioritize them.,"var_1 = who_am_i()
var_2 = works_list(type=[""issue""], owned_by=[var_1], stage.name=[""QA-Testing""], issue.priority=[""p1""])
var_3 = prioritize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""



def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""



def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""



def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Find similar work items to TASK-321, summarize and associate them with Rev organization ORG-789","var_1 = get_similar_work_items(work_id=""TASK-321"")
var_2 = search_object_by_name(query=""ORG-789"")
var_3 = works_list(issue.rev_orgs=[var_2], type=[""task""])
var_4 = summarize_objects(objects=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def find_work_items_by_tag(work_type, tag):
""""""
Finds work items of a certain type with a given tag

Parameters:
    work_type (str): The type of the work items to filter by
    tag (str): The tag to filter the work items

Returns:
    list: List of work items with the given tag
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""


def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""



def calculate_user_workload(user_id):
""""""
Calculates the workload of a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be calculated

Returns:
    float: The calculated workload value
""""""



def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Identify similar work items to ""ISSUE-999"" and prepare a summary","var_1 = get_similar_work_items(work_id=""ISSUE-999"")
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def fetch_ticket_history(ticket_id, history_limit=10):
""""""
Fetches the history of changes to a given ticket

Parameters:
    ticket_id (str): The ID of the ticket for which the history is requested
    history_limit (int): Maximum number of history entries to retrieve. The default is '10'

Returns:
    list: A list of history records for the ticket
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""
"
Retrieve my own work items that are tasks and add them to sprint ID SPRINT-123,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=""SPRINT-123"")
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Retrieve my tickets that need a response and sort them by severity,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], ticket.needs_response=True, type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
","

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""



def calculate_time_until_deadline(work_item_id):
""""""
Calculates the amount of time remaining until the deadline of a work item

Parameters:
    work_item_id (str): The ID of the work item

Returns:
    float: The number of hours until the deadline
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"For the new ""UX Improvement"" initiative, find related tasks and create a summary for the design team meeting.","var_1 = search_object_by_name(query=""UX Improvement"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
","

def generate_report_data(report_type, data_set_id):
""""""
Generates report data based on the provided report type and data set

Parameters:
    report_type (str): The type of report to generate
    data_set_id (str): The ID of the data set to be used for the report

Returns:
    str: A report data string or ID depending on internal implementation
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    
def assign_ticket_to_user(ticket_id, user_id):
""""""
Assigns a specific ticket to a user

Parameters:
    ticket_id (str): The ID of the ticket to be assigned
    user_id (str): The ID of the user to whom the ticket will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""



def link_related_tickets(ticket_id, related_ids):
""""""
Links tickets that are related to each other

Parameters:
    ticket_id (str): The ID of the ticket that will be linked with related tickets
    related_ids (list): List of IDs for tickets that are related to the original ticket

Returns:
    bool: True if the linking is successful, False otherwise
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""



def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Summarize and prioritize issues with priority P1 from the QA team, limiting the results to 25.","var_1 = search_object_by_name(query=""QA team"")
var_2 = works_list(issue.priority=[""p1""], created_by=[var_1], limit=25, type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
","

def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def filter_tasks_by_due_date(task_ids, due_date):
""""""
Filters tasks by their due date

Parameters:
    task_ids (list): A list of task IDs to filter
    due_date (str): The due date to filter tasks by

Returns:
    list: List of task IDs that have the specified due date
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def validate_data_integrity(data_point_ids):
""""""
Checks the integrity of a list of data points in the system

Parameters:
    data_point_ids (list): List of data point IDs to validate

Returns:
    list: Validation results with status (True or False) for each data point
""""""



def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""
"
Generate a report of P1 tickets owned by user USER-567 and summarize the findings,"var_1 = search_object_by_name(query=""USER-567"")
var_2 = works_list(type=[""ticket""], issue.priority=[""p1""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Find work items related to specific parts 'PART-456', 'PART-789' and get their summary","var_1 = works_list(applies_to_part=[""PART-456"", ""PART-789""], type=[""issue"", ""ticket"", ""task""])
var_2 = summarize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def delete_objects_by_id(object_ids):
""""""
Deletes objects from the system based on their IDs

Parameters:
    object_ids (list): List of object IDs to delete

Returns:
    bool: True if objects were successfully deleted, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""
"
create actionable tasks from summarized tasks of issue 'REV-789',"var_1 = get_similar_work_items(work_id=""REV-789"")
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Find similar issues to ISSU-123, summarize them, and add them to the current sprint, limiting the number of work items to 10.","var_1 = get_similar_work_items(work_id=""ISSU-123"")
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""



def get_user_permissions(user_id):
""""""
Returns a list of permissions for a specified user ID

Parameters:
    user_id (str): The ID of the user whose permissions you want to retrieve

Returns:
    list: User permissions
""""""



def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def mark_ticket_for_review(ticket_id, reviewer_id):
""""""
Marks a ticket for review by a specific user

Parameters:
    ticket_id (str): The ID of the ticket to be marked for review
    reviewer_id (str): The ID of the user who should review the ticket

Returns:
    None
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""
"
"Retrieve the ID of the current user, list their tasks of type 'issue', then add any P2 priority issues to the current sprint.","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Could the concept of good and evil be fluid, evolving with the changing dynamics of society?",#Unanswerable_Invalid_Query_Error,"

def remove_object_by_id(object_id):
""""""
Removes an object from the system by its ID

Parameters:
    object_id (str): The ID of the object to remove

Returns:
    None
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""



def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def list_user_permissions(user_id):
""""""
Lists all the permissions that a user has within the system

Parameters:
    user_id (str): The ID of the user for whom permissions are being listed

Returns:
    list: A list of permissions that the user possesses
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def link_related_documents(doc_id, related_doc_ids):
""""""
Links related documents to the given document in the system

Parameters:
    doc_id (str): The ID of the document to which related documents should be linked
    related_doc_ids (list): A list of IDs for related documents

Returns:
    bool: True if the operation was successful, False otherwise
""""""



def retrieve_user_workload(user_id):
""""""
Retrieves the current workload for the specified user

Parameters:
    user_id (str): The ID of the user whose workload is to be retrieved

Returns:
    list: A list containing workload details
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Generate a list of tickets from ""REV-456"" organization, summarize the tickets with medium severity, and create tasks for them.","var_1 = works_list(ticket.rev_org=[""REV-456""], type=[""ticket""])
var_2 = summarize_objects(objects=var_1)
var_3 = create_actionable_tasks_from_text(text=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""



def merge_duplicate_tickets(primary_ticket_id, duplicate_ticket_ids):
""""""
Merges duplicate tickets into a primary ticket

Parameters:
    primary_ticket_id (str): The ID of the primary ticket that remains
    duplicate_ticket_ids (list): The IDs of the duplicate tickets to be merged into the primary

Returns:
    None
""""""

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""


def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""
"
Summarize tasks related to the Epic EPIC-456,"var_1 = search_object_by_name(query=""EPIC-456"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""



def calculate_cost_of_tasks(task_ids):
""""""
Calculates the total cost for a list of task IDs

Parameters:
    task_ids (list): A list of task IDs to calculate cost for

Returns:
    float: Total cost of the tasks
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""



def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""
"
"Find tasks related to project X, prioritize them, and add to sprint","var_1 = search_object_by_name(query=""Project X"")
var_2 = works_list(applies_to_part=[var_1], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""
"
"Find work items for part CAPL-123 created by user DEVU-456, then prioritize and summarize them","var_1 = search_object_by_name(query=""DEVU-456"")
var_2 = works_list(created_by=[var_1], applies_to_part=[""CAPL-123""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
","

def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""



def generate_project_summary(project_id):
""""""
Generates a summary report for the specified project

Parameters:
    project_id (str): The ID of the project to summarize

Returns:
    str: A summary report of the project
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""



def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""
"
"Get all work items similar to TKT-123, summarize them, and prioritize them","var_1 = get_similar_work_items(work_id=""TKT-123"")
var_2 = summarize_objects(objects=var_1)
var_3 = prioritize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Retrieve my tasks, summarize them, and prioritize issues for this week","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], type=[""task""])
var_3 = summarize_objects(objects=var_2)
var_4 = works_list(owned_by=[var_1], type=[""issue""])
var_5 = prioritize_objects(objects=var_4)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""


def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_report_by_tag(tag_id, include_archived=False):
""""""
Generates a report for all work items associated with the given tag

Parameters:
    tag_id (str): The ID of the tag used to filter work items
    include_archived (bool): Include archived work items if set to True

Returns:
    list: Work items associated with the tag
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""
"
What if our understanding of the cosmos is limited by the constraints of our three-dimensional perception?,#Unanswerable_Invalid_Query_Error,"
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""



def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""
"
Get all tickets from the current sprint with priority p3 and create a detailed summary,"var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p3""], type=[""ticket""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""
"
"Find tasks related to product enhancement, summarize","var_1 = works_list(type=[""task""], applies_to_part=[""product enhancement""])
var_2 = summarize_objects(objects=var_1)
","

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def validate_project_completion(project_id):
""""""
Validates if all tasks within a project are completed

Parameters:
    project_id (str): The ID of the project to validate

Returns:
    bool: True if completed, False otherwise
""""""



def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""



def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""
"
"Prioritize tasks created by ""USER-789"" and filter by ""issue.rev_orgs"" with value ""ORG-101""","var_1 = search_object_by_name(query=""USER-789"")
var_2 = works_list(created_by=[var_1], issue.rev_orgs=[""ORG-101""], type=[""issue""])
var_3 = prioritize_objects(objects=var_2)
","

def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def merge_duplicate_tasks(primary_task_id, duplicate_task_ids):
""""""
Merges duplicate tasks into a primary task

Parameters:
    primary_task_id (str): The ID of the primary task which remains after the merge
    duplicate_task_ids (list): A list of IDs of the duplicate tasks to be merged

Returns:
    None
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""

def retrieve_sprint_workload(sprint_id):
""""""
Calculates the total workload for a given sprint based on the work items associated with it

Parameters:
    sprint_id (str): The ID of the sprint for workload calculation

Returns:
    float: Total workload in hours
""""""

def calculate_due_dates(work_item_ids, urgency_level):
""""""
Calculates the due dates for given work items based on their urgency

Parameters:
    work_item_ids (list): A list of work item IDs for which due dates are required
    urgency_level (str): The urgency level. Allowed values: 'high', 'medium', 'low'

Returns:
    list: Due dates for the specified work items
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def list_all_blocked_tickets():
""""""
Lists all tickets that are currently blocked

Returns:
    list: Ticket IDs that are currently blocked
"""""""
Add all P2 issues from customer BigCorp to the sprint and list them,"var_1 = search_object_by_name(query=""BigCorp"")
var_2 = works_list(issue.rev_orgs=[var_1], issue.priority=[""p2""], type=[""issue""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Search for P1 issues related to the 'User Experience' part and provide a summary,"var_1 = search_object_by_name(query=""User Experience"")
var_2 = works_list(applies_to_part=[var_1], issue.priority=[""p1""], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def estimate_time_for_task(task_id, estimation_hours):
""""""
Updates a task with a time estimation

Parameters:
    task_id (str): The ID of the task to be updated with an estimated time
    estimation_hours (float): The estimated time in hours to complete the task

Returns:
    None
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Prioritize and add to sprint all blocker tickets from the REV-789 organization,"var_1 = search_object_by_name(query=""REV-789"")
var_2 = works_list(ticket.rev_org=[var_1], ticket.severity=[""blocker""], type=[""ticket""])
var_3 = prioritize_objects(objects=var_2)
var_4 = get_sprint_id()
var_5 = add_work_items_to_sprint(work_ids=var_3, sprint_id=var_4)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    
def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task is assigned

Returns:
    None
""""""


def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""



def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_estimated_completion(project_id):
""""""
Calculates the estimated completion date for a project based on current progress

Parameters:
    project_id (str): The ID of the project to be analyzed

Returns:
    str: Estimated date of completion
""""""



def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""
"
"List latest tickets by 'user123', prioritize by severity, and summarize for the weekly review","var_1 = search_object_by_name(query=""user123"")
var_2 = works_list(type=[""ticket""], created_by=[var_1])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
","

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def calculate_progress_percentage(project_id):
""""""
Calculates the progress percentage of the given project

Parameters:
    project_id (str): The ID of the project for which to calculate progress

Returns:
    float: The percentage of project completion
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def validate_work_item_completeness(work_id):
""""""
Checks if a work item has all necessary information completed

Parameters:
    work_id (str): The ID of the work item to check

Returns:
    bool: True if the work item is complete, False if it lacks information
""""""



def list_recent_projects(user_id, days_back=30):
""""""
Lists all projects a user has worked on in the past number of days

Parameters:
    user_id (str): The ID of the user
    days_back (int): The number of past days to look for projects. The default is '30'

Returns:
    list: Project IDs that the user has worked on
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def validate_user_permissions(user_id, required_permissions):
""""""
Checks if the user has the specified permissions

Parameters:
    user_id (str): The ID of the user whose permissions need to be checked
    required_permissions (list): A list of permissions to check against the user's permissions

Returns:
    bool: True if the user has all the required permissions, False otherwise
""""""



def calculate_estimate_completion_time(work_id):
""""""
Calculates the estimated completion time for the specified work item

Parameters:
    work_id (str): The ID of the work item to calculate the estimated time

Returns:
    float: Estimated completion time in hours
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""
"
"Get a list of all open issues from the customer 'MegaCorp', summarize and then add to the backlog","var_1 = search_object_by_name(query=""MegaCorp"")
var_2 = works_list(type=[""issue""], ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""



def update_contact_information(contact_id, new_phone=None, new_email=None):
""""""
Updates the contact information with new provided phone number or email

Parameters:
    contact_id (str): The ID of the contact to update
    new_phone (str): The new phone number for the contact, default is 'None'
    new_email (str): The new email address for the contact, default is 'None'

Returns:
    bool: Status of the update operation
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Summarize my tasks related to the ""BetaLaunch"" project created by ""Beta""","var_1 = search_object_by_name(query=""BetaLaunch"")
var_2 = who_am_i()
var_3 = works_list(created_by=[""Beta""], owned_by=[var_2], applies_to_part=[var_1], type=[""task""])
var_4 = summarize_objects(objects=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a given date range.

Parameters:
    start_date (str): The start date of the desired date range
    end_date (str): The end date of the desired date range
    work_type (list): Optional filter for type of work

Returns:
    list: Work items within the specified date range
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
List p3 priority tickets for response and add to sprint,"var_1 = get_sprint_id()
var_2 = works_list(issue.priority=[""p3""], ticket.needs_response=True, type=[""ticket""])
var_3 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def link_related_objects(object_id, related_object_id):
""""""
Creates a link between two related objects in the system

Parameters:
    object_id (str): The ID of the primary object
    related_object_id (str): The ID of the object to relate to the primary

Returns:
    bool: True if the objects were successfully linked, False otherwise
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def create_new_ticket(title, description, reported_by):
""""""
Creates a new ticket in the system with the given details

Parameters:
    title (str): The title of the new ticket
    description (str): A detailed description of the issue or request
    reported_by (str): The ID of the user reporting the ticket

Returns:
    str: The ID of the newly created ticket
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def fetch_user_created_work(user_id, work_type=None):
""""""
Retrieves work items created by a specific user

Parameters:
    user_id (str): The ID of the user whose work items are to be retrieved
    work_type (list): Filters for work of the provided types, e.g., ['issue', 'ticket']

Returns:
    list: Work items created by the user
""""""



def remove_object_from_archive(object_id):
""""""
Removes an object from the system archive, making it active again

Parameters:
    object_id (str): The ID of the object to be removed from the archive

Returns:
    bool: True if the object was successfully removed, False otherwise
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_work_left(project_id):
""""""
Calculates the estimated amount of work left in a project

Parameters:
    project_id (str): The ID of the project to calculate work for

Returns:
    float: Estimated hours of work left
""""""



def filter_contacts_by_organization(organization_id, active_only=True):
""""""
Returns a list of contacts associated with the specified organization, optionally filtering only active contacts

Parameters:
    organization_id (str): The ID of the organization to filter contacts
    active_only (bool): Flag to filter only active contacts, default value 'True'

Returns:
    list: Contacts associated with the organization
""""""



def get_user_contact_info(user_id):
""""""
Retrieves contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact information is requested

Returns:
    str: The contact information of the user
""""""
"
Retrieve the ID of the sprint for this month and list all P2 tickets owned by me in that sprint.,"var_1 = get_sprint_id()
var_2 = who_am_i()
var_3 = works_list(issue.priority=[""p2""], owned_by=[var_2], stage.name=[var_1], type=[""ticket""])
","

def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def filter_projects_by_category(category_id, active_only=True):
""""""
Filters projects by their category and returns a list of project IDs

Parameters:
    category_id (str): The ID of the category to filter projects by
    active_only (bool): Whether to return only active projects

Returns:
    list: List of project IDs matching the category filter
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    
def merge_ticket_notes(ticket_id, note_ids, updated_by):
""""""
Merges multiple notes into a single ticket note

Parameters:
    ticket_id (str): The ID of the ticket where the merged note will be added
    note_ids (list): List of note IDs that will be merged into the ticket
    updated_by (str): The ID of the user performing the merge

Returns:
    str: ID of the updated ticket note
""""""



def assign_tasks_to_user(task_ids, user_id):
""""""
Assigns a list of task IDs to the provided user

Parameters:
    task_ids (list): List of task IDs to be assigned
    user_id (str): The ID of the user to whom the tasks will be assigned

Returns:
    bool: True if the assignment is successful, False otherwise
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def find_user_by_email(email):
""""""
Finds a user in the system by their email address

Parameters:
    email (str): The email address of the user to find

Returns:
    str: ID of the user
""""""



def notify_user_of_overdue_tasks(user_id):
""""""
Notifies a user of any overdue tasks assigned to them

Parameters:
    user_id (str): The ID of the user to check for overdue tasks

Returns:
    None
""""""



def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""
"
"Organize and summarize tickets by medium severity for 'Team Alpha', and output p0-priority  tasks from the issue","var_1 = search_object_by_name(query=""Team Alpha"")
var_2 = works_list(type=[""ticket""], ticket.severity=[""medium""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = works_list(type=[""task""], issue.priority=[""p0""], owned_by=[var_1])
","def assign_issues_to_user(issue_ids, user_id):
""""""
Assigns a list of issues to the specified user

Parameters:
    issue_ids (list): A list of issue IDs that need to be assigned
    user_id (str): The user ID to whom the issues will be assigned

Returns:
    None
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def generate_progress_report(project_id):
""""""
Generates a progress report for the specified project

Parameters:
    project_id (str): The ID of the project for which to generate the report

Returns:
    str: A string summary of the project's progress report
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""



def update_stage_of_work_item(work_item_id, new_stage):
""""""
Updates the stage of a work item

Parameters:
    work_item_id (str): The ID of the work item to update
    new_stage (str): The new stage to which the work item should be moved

Returns:
    bool: True if the stage is successfully updated, False otherwise
""""""

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def update_object_status(object_id, new_status, changed_by):
""""""
Updates the status of an object and records the user that made the change

Parameters:
    object_id (str): The ID of the object for which the status is updated
    new_status (str): The new status for the object
    changed_by (str): The ID of the user who is changing the status

Returns:
    None
""""""



def extract_contact_info(text_id, entity_type):
""""""
Extracts contact information from a text source based on a given entity type

Parameters:
    text_id (str): The ID of the text source from which to extract contact information
    entity_type (str): The type of entity to extract info from. Allowed values: 'individual', 'company'

Returns:
    list: Extracted contact information
""""""
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""



def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
"""""""
What if the purpose of life is not to find answers but to embrace the beauty of uncertainty?,#Unanswerable_Invalid_Query_Error,"
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def check_inventory_availability(part_id, minimum_quantity=1):
""""""
Checks if the inventory has the specified part in at least the minimum quantity

Parameters:
    part_id (str): The ID of the part to check in inventory
    minimum_quantity (int): The minimum quantity to check for; defaults to 1

Returns:
    bool: True if the minimum quantity is available; otherwise False
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_expense_totals(expense_ids):
""""""
Calculates the total amount from a list of expense IDs

Parameters:
    expense_ids (list): List of expense IDs to calculate the total amount

Returns:
    float: The total amount of the expenses
""""""
"
Find work items similar to task Task-234 and add them to the current sprint,"var_1 = get_similar_work_items(work_id=""Task-234"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
","

def reassign_work_item_owner(work_id, new_owner_id):
""""""
Reassigns the owner of a work item to a new user

Parameters:
    work_id (str): The ID of the work item to be reassigned
    new_owner_id (str): The user ID of the new owner

Returns:
    bool: True if reassignment is successful, False otherwise
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def filter_tickets_by_date(ticket_ids, start_date, end_date=None):
""""""
Filters a list of ticket IDs based on a date range

Parameters:
    ticket_ids (list): A list of ticket IDs to filter
    start_date (str): The start date for the range
    end_date (str, optional): The end date for the range, defaults to None

Returns:
    list: Filtered list of ticket IDs
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def get_project_timeline(project_id):
""""""
Retrieves the timeline and key milestones of a project

Parameters:
    project_id (str): The ID of the project for which the timeline is requested

Returns:
    list: Key milestones and dates for the project timeline
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
How do I backup my computer files to an external hard drive?,#Unanswerable_Invalid_Query_Error,"
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def batch_update_user_roles(user_ids, new_role):
""""""
Updates the roles for a batch of users to a new role

Parameters:
    user_ids (list): List of user IDs whose roles should be updated
    new_role (str): The new role to assign

Returns:
    int: Number of users successfully updated
""""""



def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
"""""""
Find and prioritize tasks assigned to me that are related to ENH-999,"var_1 = who_am_i()
var_2 = search_object_by_name(query=""ENH-999"")
var_3 = works_list(owned_by=[var_1], applies_to_part=[var_2], type=[""task""])
var_4 = prioritize_objects(objects=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def update_contact_info(contact_id, new_email=None, new_phone=None):
""""""
Updates the contact information for a given contact ID with new email and/or phone

Parameters:
    contact_id (str): The ID of the contact to update
    new_email (str, optional): The new email address; defaults to None
    new_phone (str, optional): The new phone number; defaults to None

Returns:
    bool: True if the update was successful; otherwise False
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_report_from_template(report_template_id, data_source_id):
""""""
Generates a report based on a specified template and data source

Parameters:
    report_template_id (str): The ID of the report template to use
    data_source_id (str): The ID of the data source

Returns:
    str: Generated report
""""""



def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Get current sprint ID and add new critical task 'TASK-911' to it.,"var_1 = get_sprint_id()
var_2 = add_work_items_to_sprint(work_ids=[""TASK-911""], sprint_id=var_1)
","

def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""



def mark_item_as_duplicated(work_item_id, duplicate_of_id):
""""""
Marks a work item as a duplicate of another

Parameters:
    work_item_id (str): The ID of the work item that is a duplicate
    duplicate_of_id (str): The ID of the work item of which it is a duplicate

Returns:
    bool: True if the item is successfully marked, False otherwise
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def list_user_tasks(user_id, completed=False):
""""""
Lists all tasks assigned to a user, optionally filtering for completed tasks

Parameters:
    user_id (str): The ID of the user whose tasks are to be listed
    completed (bool): If True, only completed tasks are returned

Returns:
    list: A list of tasks assigned to the user
""""""



def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def list_recent_activities(user_id, limit=10):
""""""
Lists the most recent activities performed by a user

Parameters:
    user_id (str): The ID of the user whose activities are to be listed
    limit (int): The maximum number of recent activities to return

Returns:
    list: Recent activities of the user
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Prioritize and summarize my tasks that are currently in the 'not-completed' stage.,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""not-completed""], type=[""task""])
var_3 = prioritize_objects(objects=var_2)
var_4 = summarize_objects(objects=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Add all my tasks in 'development' stage to the current sprint,"var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""development""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
","

def assign_task_to_user(task_id, user_id):
""""""
Assigns a specific task to a user

Parameters:
    task_id (str): The ID of the task to be assigned
    user_id (str): The ID of the user to whom the task will be assigned

Returns:
    bool: True if assignment was successful, otherwise False
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def update_ticket_status(ticket_id, new_status):
""""""
Updates the status of a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to be updated
    new_status (str): The new status to update the ticket with

Returns:
    bool: True if the update was successful, otherwise False
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def calculate_project_completion_rate(project_id):
""""""
Calculates the completion rate of tasks for a given project

Parameters:
    project_id (str): The ID of the project to calculate the completion rate for

Returns:
    float: The completion rate as a percentage
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def get_user_workload(user_id):
""""""
Determines the current workload for a user based on assigned tasks

Parameters:
    user_id (str): The ID of the user whose workload is to be determined

Returns:
    int: The number of tasks assigned to the user
""""""



def calculate_work_item_duration(work_id):
""""""
Calculates the total time taken to complete a work item

Parameters:
    work_id (str): The ID of the work item for which duration is to be calculated

Returns:
    float: The total duration in hours
""""""



def fetch_users_from_group(group_id):
""""""
Retrieves a list of user IDs that belong to the specified group

Parameters:
    group_id (str): The ID of the group

Returns:
    list: User IDs belonging to the group
""""""
"
"Hi, my name is Arya. What's yours?",#Unanswerable_Invalid_Query_Error,"def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""



def log_system_event(event_type, description, user_id=None):
""""""
Logs an event in the system with an optional user ID associated with it

Parameters:
    event_type (str): The type of event to log
    description (str): A brief description of the event
    user_id (str): The ID of the user involved in the event, if applicable

Returns:
    str: The ID of the logged event
""""""



def toggle_feature_access(feature_id, user_id, enable_access):
""""""
Toggles access to a specific feature for a user

Parameters:
    feature_id (str): The ID of the feature to toggle access
    user_id (str): The ID of the user whose access will be toggled
    enable_access (bool): 'True' to enable access, 'False' to disable

Returns:
    bool: The resulting access status
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def generate_summary_report(object_ids):
""""""
Generates a summary report for the specified objects

Parameters:
    object_ids (list): A list of object IDs

Returns:
    str: The ID of the generated report
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def retrieve_archived_documents(archive_id, keyword=None):
""""""
Retrieves documents from the archive based on optional keyword

Parameters:
    archive_id (str): The ID of the archive from which to retrieve documents
    keyword (str): Optional keyword to filter documents, default is 'None'

Returns:
    list: A list of documents matching the keyword if provided, otherwise all documents from the archive
""""""
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
" Locate tasks in the Design stage, summarize them, and add them to the current sprint, limiting the results to 10.","var_1 = works_list(stage.name=[""Design""], type=[""task""], limit=10)
var_2 = summarize_objects(objects=var_1)
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def estimate_ticket_resolution_time(ticket_id):
""""""
Estimates the resolution time for a given ticket

Parameters:
    ticket_id (str): The ID of the ticket to estimate time for

Returns:
    float: Estimated time in hours to resolve the ticket
""""""



def validate_object_existence(object_id):
""""""
Checks if an object with the given ID exists in the system

Parameters:
    object_id (str): The ID of the object to check

Returns:
    bool: True if the object exists, otherwise False
""""""


def update_user_ID(user_id, status):
""""""
Updates the status of a user account in the system and returns the updated id

Parameters:
    user_id (str): The ID of the user whose status is to be updated
    status (str): The new status to apply to the user account

Returns:
    str: updated User Id
""""""



def remove_users_from_group(user_ids, group_id):
""""""
Removes the specified users from a group

Parameters:
    user_ids (list): A list of user IDs to be removed from the group
    group_id (str): The ID of the group from which the users should be removed

Returns:
    bool: Status of the removal
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def merge_duplicate_objects(primary_object_id, duplicate_object_id):
""""""
Merges a duplicate object into a primary object

Parameters:
    primary_object_id (str): The ID of the primary object
    duplicate_object_id (str): The ID of the duplicate object to be merged

Returns:
    bool: True if the merge was successful, False otherwise
""""""
"
"Retrieve my tasks, filter by p2 priority, and prepare for current sprint inclusion","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], issue.priority=[""p2""], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""
"
What are my all issues in the triage stage under part FEAT-123? Summarize them.,"var_1 = who_am_i()
var_2 = works_list(stage.name=[""triage""], applies_to_part=[""FEAT-123""], owned_by=[var_1], type=[""issue""])
var_3 = summarize_objects(objects=var_2)
","

def get_team_member_list(team_id):
""""""
Retrieves a list of team members for the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: List of team member IDs
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def update_issue_with_solution(issue_id, solution_text):
""""""
Updates an issue with a solution description

Parameters:
    issue_id (str): The ID of the issue to be updated
    solution_text (str): The description of the solution to apply to the issue

Returns:
    None
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""
"
Retrieve and sort issues of type 'task' that need a response,"var_1 = works_list(ticket.needs_response=True, type=[""task""])
var_2 = prioritize_objects(objects=var_1)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def batch_update_task_status(task_ids, new_status):
""""""
Updates the status of multiple tasks in a batch operation

Parameters:
    task_ids (list): A list of task IDs whose status needs updating
    new_status (str): The new status to apply to the tasks

Returns:
    bool: True if the update was successful, False otherwise
""""""



def filter_objects_by_type(object_ids, object_type):
""""""
Filters a list of objects based on their type

Parameters:
    object_ids (list): A list of object IDs to filter
    object_type (str): The type of objects to filter for

Returns:
    list: Filtered object IDs matching the specified type
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def get_ticket_comments(ticket_id):
""""""
Retrieves the comments attached to a ticket

Parameters:
    ticket_id (str): The ID of the ticket whose comments are being retrieved

Returns:
    list: Comments associated with the ticket
""""""
"
"List my issues tagged as 'p0', summarize, and get current sprint ID","var_1 = who_am_i()
var_2 = works_list(type=[""issue""], issue.priority=[""p0""], owned_by=[var_1])
var_3 = summarize_objects(objects=var_2)
var_4 = get_sprint_id()
","

def get_object_history(object_id):
""""""
Retrieves the change history of a specified object

Parameters:
    object_id (str): The ID of the object for which history is requested

Returns:
    list: A list of changes made to the object
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def remove_object_from_inventory(object_id):
""""""
Removes an object from the inventory system based on the object ID

Parameters:
    object_id (str): The ID of the object to remove from inventory

Returns:
    bool: True if the removal was successful, False otherwise
""""""



def filter_work_by_date_range(start_date, end_date, work_type=None):
""""""
Filters work items based on a specific date range

Parameters:
    start_date (str): The start date for the filter range (format: YYYY-MM-DD)
    end_date (str): The end date for the filter range (format: YYYY-MM-DD)
    work_type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

Returns:
    list: Work items in the specified date range
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_report_for_sprint(sprint_id):
""""""
Generates a performance report for a specified sprint

Parameters:
    sprint_id (str): The ID of the sprint for which to generate the report

Returns:
    str: The ID of the generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def assign_tasks_to_employee(task_ids, employee_id):
""""""
Assigns a list of tasks to the specified employee

Parameters:
    task_ids (list): A list of task IDs to be assigned
    employee_id (str): The ID of the employee to whom the tasks will be assigned

Returns:
    bool: True if the assignment was successful, False otherwise
""""""
"
"Retrieve my tasks, filter by 'in-progress' stage, and summarize","var_1 = who_am_i()
var_2 = works_list(owned_by=[var_1], stage.name=[""in-progress""], type=[""task""])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def track_project_completion(project_id):
""""""
Tracks the completion percentage of a project based on completed tasks

Parameters:
    project_id (str): The ID of the project to track

Returns:
    float: Percentage of the project completed
""""""



def estimate_cost_for_work(work_id, cost_per_hour=100):
""""""
Estimates the cost for completing a work item based on a cost per hour rate

Parameters:
    work_id (str): The ID of the work item to estimate cost for
    cost_per_hour (float): The cost per hour. Default is '100'

Returns:
    float: Estimated cost
""""""


def list_department_members(department_id):
""""""
Returns a list of user IDs for all members within a specified department

Parameters:
    department_id (str): The ID of the department to list members for

Returns:
    list: User IDs of all the members in the department
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
"Is reality a shared illusion, and do we collectively agree on its parameters?",#Unanswerable_Invalid_Query_Error,"

def convert_task_to_ticket(task_id):
""""""
Converts a task into a ticket in the system

Parameters:
    task_id (str): The ID of the task to be converted

Returns:
    str: The ID of the newly created ticket
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def archive_completed_tasks(project_id, completed_since):
""""""
Archives tasks that are completed within the given project since the specified time

Parameters:
    project_id (str): The ID of the project containing the tasks
    completed_since (str): Archive tasks completed after this timestamp

Returns:
    int: Number of tasks archived
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def extend_sprint_end_date(sprint_id, new_end_date):
""""""
Extends the end date of a current sprint to a new date

Parameters:
    sprint_id (str): The ID of the sprint to extend
    new_end_date (str): The new end date for the sprint in YYYY-MM-DD format

Returns:
    bool: True if the sprint end date was extended, False otherwise
""""""



def list_completed_tasks_by_user(user_id, project_id=None):
""""""
Lists all tasks completed by a given user, optionally filtered by project

Parameters:
    user_id (str): The ID of the user
    project_id (str, optional): The ID of the project to filter tasks

Returns:
    list: List of task IDs completed by the user
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def set_user_permission(user_id, permission_level):
""""""
Sets a specific permission level for a user account

Parameters:
    user_id (str): The ID of the user to set permissions for
    permission_level (str): The level of permission to assign e.g., 'read', 'write', 'admin'

Returns:
    bool: True if the permission was set successfully, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Find work items for REV-456 and summarize them,"var_1 = search_object_by_name(query=""REV-456"")
var_2 = works_list(ticket.rev_org=[var_1])
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def archive_old_tickets(older_than_date, active_status=False):
""""""
Archives tickets that are older than the specified date, optionally filters by active status and returns the IDs

Parameters:
    older_than_date (str): A date in the format 'YYYY-MM-DD', to filter tickets older than this date
    active_status (bool): If True, only archives tickets that are currently active; defaults to False

Returns:
    str: ID of tickets archived
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def remove_object_from_sprint(object_id, sprint_id):
""""""
Removes a specified object from a sprint and returns the new list

Parameters:
    object_id (str): The ID of the object to be removed
    sprint_id (str): The ID of the project from which the object should be removed

Returns:
    list: Returns the updated list of sprint objects
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Retrieve and add any P2 tasks I own to the current sprint,"var_1 = who_am_i()
var_2 = works_list(issue.priority=[""p2""], owned_by=[var_1], type=[""task""])
var_3 = get_sprint_id()
var_4 = add_work_items_to_sprint(work_ids=var_2, sprint_id=var_3)
","

def get_user_avatar(user_id):
""""""
Retrieves the avatar image URL for the specified user

Parameters:
    user_id (str): The ID of the user whose avatar is to be retrieved

Returns:
    str: URL of the user's avatar image
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def list_completed_tasks_by_user(user_id):
""""""
Lists all completed tasks for a specific user

Parameters:
    user_id (str): The ID of the user whose completed tasks need to be listed

Returns:
    list: List of completed task IDs
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def retrieve_document_by_keyword(keyword):
""""""
Retrieves a document ID containing the specified keyword

Parameters:
    keyword (str): The keyword to search for in the documents

Returns:
    str: ID of the document containing the keyword
""""""

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def generate_work_report(work_ids):
""""""
Generates a report for the given work items.

Parameters:
    work_ids (list): A list of work item IDs for report generation

Returns:
    str: The ID of the generated report
""""""



def find_team_members(team_id):
""""""
Returns a list of user IDs that are members of the specified team

Parameters:
    team_id (str): The ID of the team

Returns:
    list: User IDs of the team members
""""""



def remove_work_item_from_sprint(work_id, sprint_id):
""""""
Removes the specified work item from a sprint

Parameters:
    work_id (str): The ID of the work item to be removed
    sprint_id (str): The ID of the sprint from which to remove the work item

Returns:
    bool: True if the removal was successful, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def validate_work_item_status(work_item_id, status_options):
""""""
Checks if the given work item has a status that is among the provided options

Parameters:
    work_item_id (str): The ID of the work item to check
    status_options (list): A list of valid status options

Returns:
    bool: True if status is valid, False otherwise
""""""
"
Create tasks from project kickoff notes and add them to the team's sprint,"var_1 = create_actionable_tasks_from_text(text=""project kickoff notes"")
var_2 = get_sprint_id()
var_3 = add_work_items_to_sprint(work_ids=var_1, sprint_id=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def schedule_meeting_with_user(user_id, duration=30, urgent=False):
""""""
Schedules a meeting with a specified user

Parameters:
    user_id (str): The ID of the user with whom to schedule a meeting
    duration (int): Duration of the meeting in minutes, default is '30'
    urgent (bool): Whether the meeting is urgent, defaults to False

Returns:
    str: The ID of the scheduled meeting
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def retrieve_user_contact_info(user_id):
""""""
Retrieves the contact information for a user

Parameters:
    user_id (str): The ID of the user whose contact info is requested

Returns:
    str: Contact information of the user
""""""



def create_report_for_sprint(sprint_id, report_type):
""""""
Generates a report for a given sprint

Parameters:
    sprint_id (str): The ID of the sprint
    report_type (str): The type of report to be generated

Returns:
    str: The ID of the generated report
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    "
Create tasks from customer feedback text 'FeedbackText' and prioritize them,"var_1 = create_actionable_tasks_from_text(text=""FeedbackText"")
var_2 = prioritize_objects(objects=var_1)
","def update_issue_status(issue_id, new_status):
""""""
Updates the status of an issue

Parameters:
    issue_id (str): The ID of the issue to be updated
    new_status (str): The new status to be set for the issue. Allowed values: open, in_progress, resolved, closed

Returns:
    bool: True if the update was successful, False otherwise
""""""


    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    

    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    


def calculate_effort_for_task(task_id):
""""""
Calculates the effort spent on a specific task by summing subtasks

Parameters:
    task_id (str): The ID of the task for which the effort needs to be calculated

Returns:
    float: Total effort spent on the task
""""""


    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    

    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    


def mark_ticket_as_resolved(ticket_id):
""""""
Marks a ticket as resolved in the system

Parameters:
    ticket_id (str): The ID of the ticket to be marked as resolved

Returns:
    bool: True if the ticket was marked as resolved, False otherwise
""""""

         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def extract_keywords_from_text(text):
""""""
Given a text, extracts and returns the main keywords

Parameters:
    text (str): The text from which keywords are to be extracted

Returns:
    list: A list of extracted keywords
""""""



def calculate_budget_remaining(budget_id):
""""""
Calculates the remaining budget for a given budget ID

Parameters:
    budget_id (str): The ID of the budget to calculate

Returns:
    float: The amount of remaining budget
""""""
"
Find and summarize work items in the 'development' stage for part 'WidgetX' that need a response.,"var_1 = search_object_by_name(query=""WidgetX"")
var_2 = works_list(type=[""issue""], stage.name=[""development""], applies_to_part=[var_1], ticket.needs_response=True)
var_3 = summarize_objects(objects=var_2)
","
    def who_am_i():

    """"""

    Returns the string ID of the current user

    """"""
    


def get_task_dependencies(task_id):
""""""
Returns a list of task IDs that are dependencies for the given task

Parameters:
    task_id (str): The ID of the task for which dependencies are requested

Returns:
    list: Dependency task IDs
""""""



def deactivate_user_account(user_id, reason):
""""""
Deactivates a user account for a specific reason

Parameters:
    user_id (str): The ID of the user whose account is to be deactivated
    reason (str): The reason for deactivating the account

Returns:
    bool: True if the account was successfully deactivated; otherwise False
""""""


    def works_list(applies_to_part=None, created_by=None, issue.priority=None,

    issue.rev_orgs=None, limit=50, owned_by=None, stage.name=None,

    ticket.needs_response=False, ticket.rev_org=None,

    ticket.severity=None, ticket.source_channel=None, work_type=None):

    """"""

    Returns a list of work items matching the request

    Parameters:

    applies_to_part (list): Filters for work belonging to any of the provided parts

    created_by (list): Filters for work created by any of these users

    issue.priority (list): Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3

    issue.rev_orgs (list): Filters for issues with any of the provided Rev organizations

    limit (int): The maximum number of works to return. The default is '50'

    owned_by (list): Filters for work owned by any of these users

    stage.name (list): Filters for records in the provided stage(s) by name

    ticket.needs_response (bool): Filters for tickets that need a response

    ticket.rev_org (list): Filters for tickets associated with any of the provided Rev organizations

    ticket.severity (list): Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium

    ticket.source_channel (list): Filters for tickets with any of the provided source channels

    type (list): Filters for work of the provided types. Allowed values: issue, ticket, task

    Returns:

    list: Matching work items

    """"""
    

    def add_work_items_to_sprint(work_ids, sprint_id):

    """"""

    Adds the given work items to the sprint

    Parameters:

    work_ids (list): A list of work item IDs to be added to the sprint

    sprint_id (str): The ID of the sprint to which the work items should be added

    """"""
    

    def get_sprint_id():

    """"""

    Returns the ID of the current sprint

    """"""
    


def list_work_attachments(work_id):
""""""
Lists all attachments associated with a work item.

Parameters:
    work_id (str): The ID of the work item

Returns:
    list: Attachment file IDs
""""""


    def get_similar_work_items(work_id):

    """"""

    Returns a list of work items that are similar to the given work item

    Parameters:

    work_id (str): The ID of the work item for which you want to find similar items

    Returns:

    list: Similar work items

    """"""
    

    def create_actionable_tasks_from_text(text):

    """"""

    Given a text, extracts actionable insights, and creates tasks for them,

    which are kind of a work item

    Parameters:

    text (str): The text from which the actionable insights need to be created

    Returns:

    list: tasks created from the given text

    """"""
    

    def search_object_by_name(query):

    """"""

    Given a search string, returns the ID of a matching object in the system of record.

    If multiple matches are found, it returns the one where the confidence is highest

    Parameters:

    query (str): The search string, could be for example customer’s name, part name, user name

    Returns:

    str: ID of matching object

    """"""
    
         
    def summarize_objects(objects):

    """"""

    Summarizes a list of objects. The logic of how to summarize a

    particular object type is an internal implementation detail

    Parameters:

    objects (list): List of objects to summarize

    Returns:

    text: Summarized text of the objects

    """"""
    

    def prioritize_objects(objects):

    """"""

    Returns a list of objects sorted by priority. The logic of what constitutes

    priority for a given object is an internal implementation detail

    Parameters:

    objects (list): A list of objects to be prioritized

    Returns:

    list: Prioritized objects

    """"""
    


def list_completed_items_by_user(user_id):
""""""
Lists items that have been completed by the given user

Parameters:
    user_id (str): The ID of the user whose completed items are being requested

Returns:
    list: Completed items by the user
""""""



def remove_user_from_project(user_id, project_id):
""""""
Removes a user from a project

Parameters:
    user_id (str): The ID of the user to be removed
    project_id (str): The ID of the project from which the user is to be removed

Returns:
    bool: True if the user is successfully removed, False otherwise
"""""""
